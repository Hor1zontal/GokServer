// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: believer.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
type AutoAddBeliever struct {
	Uid   int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Times int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *AutoAddBeliever) Reset()                    { *m = AutoAddBeliever{} }
func (m *AutoAddBeliever) String() string            { return proto.CompactTextString(m) }
func (*AutoAddBeliever) ProtoMessage()               {}
func (*AutoAddBeliever) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{0} }

func (m *AutoAddBeliever) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AutoAddBeliever) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type AutoAddBelieverRet struct {
	Believer     []*BelieverInfo `protobuf:"bytes,1,rep,name=believer" json:"believer,omitempty"`
	BelieverTime int64           `protobuf:"varint,2,opt,name=believerTime,proto3" json:"believerTime,omitempty"`
}

func (m *AutoAddBelieverRet) Reset()                    { *m = AutoAddBelieverRet{} }
func (m *AutoAddBelieverRet) String() string            { return proto.CompactTextString(m) }
func (*AutoAddBelieverRet) ProtoMessage()               {}
func (*AutoAddBelieverRet) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{1} }

func (m *AutoAddBelieverRet) GetBeliever() []*BelieverInfo {
	if m != nil {
		return m.Believer
	}
	return nil
}

func (m *AutoAddBelieverRet) GetBelieverTime() int64 {
	if m != nil {
		return m.BelieverTime
	}
	return 0
}

type UpdateBelieverInfo struct {
}

func (m *UpdateBelieverInfo) Reset()                    { *m = UpdateBelieverInfo{} }
func (m *UpdateBelieverInfo) String() string            { return proto.CompactTextString(m) }
func (*UpdateBelieverInfo) ProtoMessage()               {}
func (*UpdateBelieverInfo) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{2} }

type UpdateBelieverInfoRet struct {
	Believer []*BelieverInfo `protobuf:"bytes,1,rep,name=believer" json:"believer,omitempty"`
}

func (m *UpdateBelieverInfoRet) Reset()                    { *m = UpdateBelieverInfoRet{} }
func (m *UpdateBelieverInfoRet) String() string            { return proto.CompactTextString(m) }
func (*UpdateBelieverInfoRet) ProtoMessage()               {}
func (*UpdateBelieverInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{3} }

func (m *UpdateBelieverInfoRet) GetBeliever() []*BelieverInfo {
	if m != nil {
		return m.Believer
	}
	return nil
}

// 升级信徒
type UpgradeBeliever struct {
	SelectID string `protobuf:"bytes,1,opt,name=selectID,proto3" json:"selectID,omitempty"`
	MatchID  string `protobuf:"bytes,2,opt,name=matchID,proto3" json:"matchID,omitempty"`
	Uid      int32  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Faith    int32  `protobuf:"varint,4,opt,name=faith,proto3" json:"faith,omitempty"`
}

func (m *UpgradeBeliever) Reset()                    { *m = UpgradeBeliever{} }
func (m *UpgradeBeliever) String() string            { return proto.CompactTextString(m) }
func (*UpgradeBeliever) ProtoMessage()               {}
func (*UpgradeBeliever) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{4} }

func (m *UpgradeBeliever) GetSelectID() string {
	if m != nil {
		return m.SelectID
	}
	return ""
}

func (m *UpgradeBeliever) GetMatchID() string {
	if m != nil {
		return m.MatchID
	}
	return ""
}

func (m *UpgradeBeliever) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpgradeBeliever) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

// 升级信徒结果
type UpgradeBelieverRet struct {
	Result           *BelieverInfo     `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Cost             int32             `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	CivilizationInfo *CivilizationInfo `protobuf:"bytes,3,opt,name=civilizationInfo" json:"civilizationInfo,omitempty"`
	ItemID           int32             `protobuf:"varint,4,opt,name=itemID,proto3" json:"itemID,omitempty"`
}

func (m *UpgradeBelieverRet) Reset()                    { *m = UpgradeBelieverRet{} }
func (m *UpgradeBelieverRet) String() string            { return proto.CompactTextString(m) }
func (*UpgradeBelieverRet) ProtoMessage()               {}
func (*UpgradeBelieverRet) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{5} }

func (m *UpgradeBelieverRet) GetResult() *BelieverInfo {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *UpgradeBelieverRet) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *UpgradeBelieverRet) GetCivilizationInfo() *CivilizationInfo {
	if m != nil {
		return m.CivilizationInfo
	}
	return nil
}

func (m *UpgradeBelieverRet) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

type UpdateBeliever struct {
	Uid        int32           `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UpdateInfo []*BelieverInfo `protobuf:"bytes,2,rep,name=updateInfo" json:"updateInfo,omitempty"`
	Operation  int32           `protobuf:"varint,3,opt,name=operation,proto3" json:"operation,omitempty"`
	IsConvert  bool            `protobuf:"varint,4,opt,name=isConvert,proto3" json:"isConvert,omitempty"`
}

func (m *UpdateBeliever) Reset()                    { *m = UpdateBeliever{} }
func (m *UpdateBeliever) String() string            { return proto.CompactTextString(m) }
func (*UpdateBeliever) ProtoMessage()               {}
func (*UpdateBeliever) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{6} }

func (m *UpdateBeliever) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateBeliever) GetUpdateInfo() []*BelieverInfo {
	if m != nil {
		return m.UpdateInfo
	}
	return nil
}

func (m *UpdateBeliever) GetOperation() int32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *UpdateBeliever) GetIsConvert() bool {
	if m != nil {
		return m.IsConvert
	}
	return false
}

type UpdateBelieverRet struct {
	Result   bool            `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Believer []*BelieverInfo `protobuf:"bytes,2,rep,name=believer" json:"believer,omitempty"`
	Faith    int32           `protobuf:"varint,3,opt,name=faith,proto3" json:"faith,omitempty"`
}

func (m *UpdateBelieverRet) Reset()                    { *m = UpdateBelieverRet{} }
func (m *UpdateBelieverRet) String() string            { return proto.CompactTextString(m) }
func (*UpdateBelieverRet) ProtoMessage()               {}
func (*UpdateBelieverRet) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{7} }

func (m *UpdateBelieverRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *UpdateBelieverRet) GetBeliever() []*BelieverInfo {
	if m != nil {
		return m.Believer
	}
	return nil
}

func (m *UpdateBelieverRet) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

type BelieverFlagInfo struct {
}

func (m *BelieverFlagInfo) Reset()                    { *m = BelieverFlagInfo{} }
func (m *BelieverFlagInfo) String() string            { return proto.CompactTextString(m) }
func (*BelieverFlagInfo) ProtoMessage()               {}
func (*BelieverFlagInfo) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{8} }

type BelieverFlagInfoRet struct {
	Id    []string `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	Value []bool   `protobuf:"varint,2,rep,packed,name=value" json:"value,omitempty"`
	Time  []int64  `protobuf:"varint,3,rep,packed,name=time" json:"time,omitempty"`
}

func (m *BelieverFlagInfoRet) Reset()                    { *m = BelieverFlagInfoRet{} }
func (m *BelieverFlagInfoRet) String() string            { return proto.CompactTextString(m) }
func (*BelieverFlagInfoRet) ProtoMessage()               {}
func (*BelieverFlagInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{9} }

func (m *BelieverFlagInfoRet) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *BelieverFlagInfoRet) GetValue() []bool {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BelieverFlagInfoRet) GetTime() []int64 {
	if m != nil {
		return m.Time
	}
	return nil
}

// 信徒信息变更推送
type BelieverPush struct {
	Believer []*BelieverInfo `protobuf:"bytes,1,rep,name=believer" json:"believer,omitempty"`
}

func (m *BelieverPush) Reset()                    { *m = BelieverPush{} }
func (m *BelieverPush) String() string            { return proto.CompactTextString(m) }
func (*BelieverPush) ProtoMessage()               {}
func (*BelieverPush) Descriptor() ([]byte, []int) { return fileDescriptorBeliever, []int{10} }

func (m *BelieverPush) GetBeliever() []*BelieverInfo {
	if m != nil {
		return m.Believer
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoAddBeliever)(nil), "protocol.auto_add_believer")
	proto.RegisterType((*AutoAddBelieverRet)(nil), "protocol.auto_add_believer_ret")
	proto.RegisterType((*UpdateBelieverInfo)(nil), "protocol.update_believer_info")
	proto.RegisterType((*UpdateBelieverInfoRet)(nil), "protocol.update_believer_info_ret")
	proto.RegisterType((*UpgradeBeliever)(nil), "protocol.upgrade_believer")
	proto.RegisterType((*UpgradeBelieverRet)(nil), "protocol.upgrade_believer_ret")
	proto.RegisterType((*UpdateBeliever)(nil), "protocol.update_believer")
	proto.RegisterType((*UpdateBelieverRet)(nil), "protocol.update_believer_ret")
	proto.RegisterType((*BelieverFlagInfo)(nil), "protocol.believer_flag_info")
	proto.RegisterType((*BelieverFlagInfoRet)(nil), "protocol.believer_flag_info_ret")
	proto.RegisterType((*BelieverPush)(nil), "protocol.believer_push")
}
func (m *AutoAddBeliever) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoAddBeliever) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Uid))
	}
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *AutoAddBelieverRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoAddBelieverRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, msg := range m.Believer {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBeliever(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BelieverTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.BelieverTime))
	}
	return i, nil
}

func (m *UpdateBelieverInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBelieverInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateBelieverInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBelieverInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, msg := range m.Believer {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBeliever(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpgradeBeliever) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeBeliever) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SelectID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(len(m.SelectID)))
		i += copy(dAtA[i:], m.SelectID)
	}
	if len(m.MatchID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(len(m.MatchID)))
		i += copy(dAtA[i:], m.MatchID)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Uid))
	}
	if m.Faith != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Faith))
	}
	return i, nil
}

func (m *UpgradeBelieverRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeBelieverRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Result.Size()))
		n1, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Cost != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Cost))
	}
	if m.CivilizationInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.CivilizationInfo.Size()))
		n2, err := m.CivilizationInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.ItemID))
	}
	return i, nil
}

func (m *UpdateBeliever) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBeliever) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Uid))
	}
	if len(m.UpdateInfo) > 0 {
		for _, msg := range m.UpdateInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeliever(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Operation != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Operation))
	}
	if m.IsConvert {
		dAtA[i] = 0x20
		i++
		if m.IsConvert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateBelieverRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBelieverRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Believer) > 0 {
		for _, msg := range m.Believer {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBeliever(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Faith != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(m.Faith))
	}
	return i, nil
}

func (m *BelieverFlagInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BelieverFlagInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BelieverFlagInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BelieverFlagInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(len(m.Value)))
		for _, b := range m.Value {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.Time) > 0 {
		dAtA4 := make([]byte, len(m.Time)*10)
		var j3 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBeliever(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *BelieverPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BelieverPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, msg := range m.Believer {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBeliever(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintBeliever(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoAddBeliever) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBeliever(uint64(m.Uid))
	}
	if m.Times != 0 {
		n += 1 + sovBeliever(uint64(m.Times))
	}
	return n
}

func (m *AutoAddBelieverRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, e := range m.Believer {
			l = e.Size()
			n += 1 + l + sovBeliever(uint64(l))
		}
	}
	if m.BelieverTime != 0 {
		n += 1 + sovBeliever(uint64(m.BelieverTime))
	}
	return n
}

func (m *UpdateBelieverInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateBelieverInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, e := range m.Believer {
			l = e.Size()
			n += 1 + l + sovBeliever(uint64(l))
		}
	}
	return n
}

func (m *UpgradeBeliever) Size() (n int) {
	var l int
	_ = l
	l = len(m.SelectID)
	if l > 0 {
		n += 1 + l + sovBeliever(uint64(l))
	}
	l = len(m.MatchID)
	if l > 0 {
		n += 1 + l + sovBeliever(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovBeliever(uint64(m.Uid))
	}
	if m.Faith != 0 {
		n += 1 + sovBeliever(uint64(m.Faith))
	}
	return n
}

func (m *UpgradeBelieverRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovBeliever(uint64(l))
	}
	if m.Cost != 0 {
		n += 1 + sovBeliever(uint64(m.Cost))
	}
	if m.CivilizationInfo != nil {
		l = m.CivilizationInfo.Size()
		n += 1 + l + sovBeliever(uint64(l))
	}
	if m.ItemID != 0 {
		n += 1 + sovBeliever(uint64(m.ItemID))
	}
	return n
}

func (m *UpdateBeliever) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBeliever(uint64(m.Uid))
	}
	if len(m.UpdateInfo) > 0 {
		for _, e := range m.UpdateInfo {
			l = e.Size()
			n += 1 + l + sovBeliever(uint64(l))
		}
	}
	if m.Operation != 0 {
		n += 1 + sovBeliever(uint64(m.Operation))
	}
	if m.IsConvert {
		n += 2
	}
	return n
}

func (m *UpdateBelieverRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if len(m.Believer) > 0 {
		for _, e := range m.Believer {
			l = e.Size()
			n += 1 + l + sovBeliever(uint64(l))
		}
	}
	if m.Faith != 0 {
		n += 1 + sovBeliever(uint64(m.Faith))
	}
	return n
}

func (m *BelieverFlagInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BelieverFlagInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, s := range m.Id {
			l = len(s)
			n += 1 + l + sovBeliever(uint64(l))
		}
	}
	if len(m.Value) > 0 {
		n += 1 + sovBeliever(uint64(len(m.Value))) + len(m.Value)*1
	}
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovBeliever(uint64(e))
		}
		n += 1 + sovBeliever(uint64(l)) + l
	}
	return n
}

func (m *BelieverPush) Size() (n int) {
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, e := range m.Believer {
			l = e.Size()
			n += 1 + l + sovBeliever(uint64(l))
		}
	}
	return n
}

func sovBeliever(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBeliever(x uint64) (n int) {
	return sovBeliever(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AutoAddBeliever) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: auto_add_believer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: auto_add_believer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoAddBelieverRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: auto_add_believer_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: auto_add_believer_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believer = append(m.Believer, &BelieverInfo{})
			if err := m.Believer[len(m.Believer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverTime", wireType)
			}
			m.BelieverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BelieverTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBelieverInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_believer_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_believer_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBelieverInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_believer_info_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_believer_info_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believer = append(m.Believer, &BelieverInfo{})
			if err := m.Believer[len(m.Believer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeBeliever) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: upgrade_believer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: upgrade_believer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeBelieverRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: upgrade_believer_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: upgrade_believer_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &BelieverInfo{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CivilizationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CivilizationInfo == nil {
				m.CivilizationInfo = &CivilizationInfo{}
			}
			if err := m.CivilizationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBeliever) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_believer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_believer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateInfo = append(m.UpdateInfo, &BelieverInfo{})
			if err := m.UpdateInfo[len(m.UpdateInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConvert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConvert = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBelieverRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_believer_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_believer_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believer = append(m.Believer, &BelieverInfo{})
			if err := m.Believer[len(m.Believer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BelieverFlagInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: believer_flag_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: believer_flag_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BelieverFlagInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: believer_flag_info_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: believer_flag_info_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeliever
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeliever
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeliever
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeliever
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeliever
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBeliever
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBeliever
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBeliever
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BelieverPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: believer_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: believer_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBeliever
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believer = append(m.Believer, &BelieverInfo{})
			if err := m.Believer[len(m.Believer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeliever(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBeliever
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeliever(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeliever
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeliever
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBeliever
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBeliever
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBeliever(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBeliever = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeliever   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("believer.proto", fileDescriptorBeliever) }

var fileDescriptorBeliever = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x95, 0xe3, 0xdd, 0x92, 0xce, 0x2e, 0xa5, 0x98, 0x52, 0xa2, 0x05, 0x55, 0x95, 0x4f, 0x3d,
	0x15, 0x69, 0xf7, 0xc0, 0x81, 0x1b, 0x54, 0x42, 0x3d, 0x21, 0x59, 0xdc, 0x2b, 0x6f, 0xe2, 0x6e,
	0x2d, 0x25, 0x71, 0x94, 0x38, 0x15, 0xe2, 0x4b, 0xf8, 0x18, 0x3e, 0x80, 0x23, 0x9f, 0x80, 0xfa,
	0x25, 0x28, 0xe3, 0x24, 0x4d, 0xb6, 0xab, 0x15, 0xda, 0x53, 0xfd, 0xc6, 0x6f, 0xc6, 0xaf, 0x6f,
	0x5e, 0x60, 0x74, 0xab, 0x62, 0xad, 0xf6, 0x2a, 0x5f, 0x66, 0xb9, 0xb1, 0x86, 0xf9, 0xf8, 0x13,
	0x9a, 0xf8, 0x6a, 0x24, 0x65, 0x68, 0x92, 0xc4, 0xa4, 0xee, 0x86, 0x7f, 0x84, 0x97, 0xb2, 0xb4,
	0x66, 0x23, 0xa3, 0x68, 0xd3, 0x34, 0xb1, 0x31, 0xd0, 0x52, 0x47, 0x01, 0x99, 0x93, 0xc5, 0xb9,
	0xa8, 0x8e, 0x6c, 0x02, 0xe7, 0x56, 0x27, 0xaa, 0x08, 0x3c, 0xac, 0x39, 0xc0, 0x33, 0x78, 0x7d,
	0xd2, 0xbc, 0xc9, 0x95, 0x65, 0x37, 0xe0, 0x37, 0x38, 0x20, 0x73, 0xba, 0xb8, 0xb8, 0x7e, 0xb3,
	0x6c, 0x24, 0x2c, 0x5b, 0xa6, 0x4e, 0xb7, 0x46, 0xb4, 0x44, 0xc6, 0xe1, 0xb2, 0x39, 0x7f, 0xd3,
	0x89, 0xc2, 0xa7, 0xa8, 0xe8, 0xd5, 0xf8, 0x14, 0x26, 0x65, 0x16, 0x49, 0xab, 0x36, 0xbd, 0x29,
	0xfc, 0x2b, 0x04, 0x0f, 0xd5, 0x9f, 0x2c, 0x86, 0x67, 0x30, 0x2e, 0xb3, 0xbb, 0x5c, 0x46, 0xc7,
	0x89, 0xec, 0x0a, 0xfc, 0x42, 0xc5, 0x2a, 0xb4, 0xeb, 0x15, 0x7a, 0x33, 0x14, 0x2d, 0x66, 0x01,
	0x3c, 0x4b, 0xa4, 0x0d, 0x77, 0xeb, 0x15, 0xea, 0x1e, 0x8a, 0x06, 0x36, 0x66, 0xd2, 0x9e, 0x99,
	0x5b, 0xa9, 0xed, 0x2e, 0x38, 0x73, 0x66, 0x22, 0xe0, 0xbf, 0x48, 0xf5, 0xdf, 0xfa, 0x4f, 0xa2,
	0xfe, 0xf7, 0x30, 0xc8, 0x55, 0x51, 0xc6, 0x16, 0x1f, 0x7d, 0x44, 0x7d, 0x4d, 0x63, 0x0c, 0xce,
	0x42, 0x53, 0xd8, 0x7a, 0x57, 0x78, 0x66, 0x5f, 0x60, 0x1c, 0xea, 0xbd, 0x8e, 0xf5, 0x0f, 0x69,
	0xb5, 0x49, 0xd7, 0xe9, 0xd6, 0xa0, 0xa4, 0x8b, 0xeb, 0xb7, 0xc7, 0x71, 0x5d, 0x86, 0x1b, 0x79,
	0xd2, 0xc4, 0xa6, 0x30, 0xd0, 0x56, 0x25, 0xeb, 0x55, 0xad, 0xbe, 0x46, 0xfc, 0x27, 0x81, 0x17,
	0xf7, 0x56, 0xf0, 0x40, 0x8e, 0x3e, 0x00, 0x38, 0x12, 0x0a, 0xf0, 0x1e, 0xdf, 0x46, 0x87, 0xca,
	0xde, 0xc1, 0xd0, 0x64, 0x2a, 0x47, 0x1d, 0xb5, 0x97, 0xc7, 0x42, 0x75, 0xab, 0x8b, 0xcf, 0x26,
	0xdd, 0xab, 0xdc, 0xa2, 0x2e, 0x5f, 0x1c, 0x0b, 0xfc, 0x3b, 0xbc, 0xba, 0x1f, 0x8e, 0xca, 0xd7,
	0x69, 0xcf, 0x57, 0xbf, 0xb5, 0xaf, 0x9b, 0x17, 0xef, 0x7f, 0xc3, 0xdb, 0xee, 0x94, 0x76, 0x77,
	0x3a, 0x01, 0xd6, 0x36, 0x6c, 0x63, 0x79, 0xe7, 0xc2, 0x2a, 0x60, 0x7a, 0x5a, 0x45, 0x49, 0x23,
	0xf0, 0xd0, 0x2f, 0xba, 0x18, 0x0a, 0xcf, 0x25, 0x65, 0x2f, 0xe3, 0x52, 0xa1, 0x0e, 0x5f, 0x38,
	0x50, 0xed, 0xb7, 0xfa, 0xfe, 0x02, 0x3a, 0xa7, 0x0b, 0x2a, 0xf0, 0xcc, 0x57, 0xf0, 0xbc, 0x9d,
	0x99, 0x95, 0xc5, 0xee, 0x49, 0xa9, 0xff, 0x74, 0xf9, 0xfb, 0x30, 0x23, 0x7f, 0x0e, 0x33, 0xf2,
	0xf7, 0x30, 0x23, 0xb7, 0x03, 0xe4, 0xdf, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xe9, 0x9d,
	0xb8, 0x4e, 0x04, 0x00, 0x00,
}
