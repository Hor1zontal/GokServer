// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shop.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 购买商品道具
type BuyShopItem struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BuyShopItem) Reset()                    { *m = BuyShopItem{} }
func (m *BuyShopItem) String() string            { return proto.CompactTextString(m) }
func (*BuyShopItem) ProtoMessage()               {}
func (*BuyShopItem) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{0} }

func (m *BuyShopItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 购买商品道具结果
type BuyShopItemRet struct {
}

func (m *BuyShopItemRet) Reset()                    { *m = BuyShopItemRet{} }
func (m *BuyShopItemRet) String() string            { return proto.CompactTextString(m) }
func (*BuyShopItemRet) ProtoMessage()               {}
func (*BuyShopItemRet) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{1} }

// 生成支付订单
type GenOrder struct {
	Uid    int32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ShopID int32   `protobuf:"varint,2,opt,name=shopID,proto3" json:"shopID,omitempty"`
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *GenOrder) Reset()                    { *m = GenOrder{} }
func (m *GenOrder) String() string            { return proto.CompactTextString(m) }
func (*GenOrder) ProtoMessage()               {}
func (*GenOrder) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{2} }

func (m *GenOrder) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GenOrder) GetShopID() int32 {
	if m != nil {
		return m.ShopID
	}
	return 0
}

func (m *GenOrder) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type GenOrderRet struct {
	OrderID string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (m *GenOrderRet) Reset()                    { *m = GenOrderRet{} }
func (m *GenOrderRet) String() string            { return proto.CompactTextString(m) }
func (*GenOrderRet) ProtoMessage()               {}
func (*GenOrderRet) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{3} }

func (m *GenOrderRet) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

// ------------------------------圣物商城------------------------------
type RefreshMallItem struct {
	IsWatchAd bool `protobuf:"varint,1,opt,name=isWatchAd,proto3" json:"isWatchAd,omitempty"`
}

func (m *RefreshMallItem) Reset()                    { *m = RefreshMallItem{} }
func (m *RefreshMallItem) String() string            { return proto.CompactTextString(m) }
func (*RefreshMallItem) ProtoMessage()               {}
func (*RefreshMallItem) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{4} }

func (m *RefreshMallItem) GetIsWatchAd() bool {
	if m != nil {
		return m.IsWatchAd
	}
	return false
}

type RefreshMallItemRet struct {
	Items []*MallItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Cost  int32       `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *RefreshMallItemRet) Reset()                    { *m = RefreshMallItemRet{} }
func (m *RefreshMallItemRet) String() string            { return proto.CompactTextString(m) }
func (*RefreshMallItemRet) ProtoMessage()               {}
func (*RefreshMallItemRet) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{5} }

func (m *RefreshMallItemRet) GetItems() []*MallItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *RefreshMallItemRet) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type BuyMallItem struct {
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *BuyMallItem) Reset()                    { *m = BuyMallItem{} }
func (m *BuyMallItem) String() string            { return proto.CompactTextString(m) }
func (*BuyMallItem) ProtoMessage()               {}
func (*BuyMallItem) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{6} }

func (m *BuyMallItem) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type BuyMallItemRet struct {
	Item *MallItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *BuyMallItemRet) Reset()                    { *m = BuyMallItemRet{} }
func (m *BuyMallItemRet) String() string            { return proto.CompactTextString(m) }
func (*BuyMallItemRet) ProtoMessage()               {}
func (*BuyMallItemRet) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{7} }

func (m *BuyMallItemRet) GetItem() *MallItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type GetMallItem struct {
}

func (m *GetMallItem) Reset()                    { *m = GetMallItem{} }
func (m *GetMallItem) String() string            { return proto.CompactTextString(m) }
func (*GetMallItem) ProtoMessage()               {}
func (*GetMallItem) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{8} }

type GetMallItemRet struct {
	RefreshTime int64       `protobuf:"varint,1,opt,name=refreshTime,proto3" json:"refreshTime,omitempty"`
	Items       []*MallItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	Cost        int32       `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *GetMallItemRet) Reset()                    { *m = GetMallItemRet{} }
func (m *GetMallItemRet) String() string            { return proto.CompactTextString(m) }
func (*GetMallItemRet) ProtoMessage()               {}
func (*GetMallItemRet) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{9} }

func (m *GetMallItemRet) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *GetMallItemRet) GetItems() []*MallItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *GetMallItemRet) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type AutoRefreshMallItem struct {
}

func (m *AutoRefreshMallItem) Reset()                    { *m = AutoRefreshMallItem{} }
func (m *AutoRefreshMallItem) String() string            { return proto.CompactTextString(m) }
func (*AutoRefreshMallItem) ProtoMessage()               {}
func (*AutoRefreshMallItem) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{10} }

type AutoRefreshMallItemRet struct {
	RefreshTime int64       `protobuf:"varint,1,opt,name=refreshTime,proto3" json:"refreshTime,omitempty"`
	Items       []*MallItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	Cost        int32       `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *AutoRefreshMallItemRet) Reset()                    { *m = AutoRefreshMallItemRet{} }
func (m *AutoRefreshMallItemRet) String() string            { return proto.CompactTextString(m) }
func (*AutoRefreshMallItemRet) ProtoMessage()               {}
func (*AutoRefreshMallItemRet) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{11} }

func (m *AutoRefreshMallItemRet) GetRefreshTime() int64 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *AutoRefreshMallItemRet) GetItems() []*MallItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *AutoRefreshMallItemRet) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type MallItem struct {
	ID        int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" bson:"id"`
	ItemID    int32 `protobuf:"varint,2,opt,name=itemID,proto3" json:"itemID,omitempty" bson:"itemID"`
	Num       int32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty" bson:"num"`
	BuyTimes  int32 `protobuf:"varint,4,opt,name=buyTimes,proto3" json:"buyTimes,omitempty" bson:"buyTimes"`
	GroupCost int32 `protobuf:"varint,5,opt,name=groupCost,proto3" json:"groupCost,omitempty" bson:"groupCost"`
}

func (m *MallItem) Reset()                    { *m = MallItem{} }
func (m *MallItem) String() string            { return proto.CompactTextString(m) }
func (*MallItem) ProtoMessage()               {}
func (*MallItem) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{12} }

func (m *MallItem) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MallItem) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *MallItem) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *MallItem) GetBuyTimes() int32 {
	if m != nil {
		return m.BuyTimes
	}
	return 0
}

func (m *MallItem) GetGroupCost() int32 {
	if m != nil {
		return m.GroupCost
	}
	return 0
}

func init() {
	proto.RegisterType((*BuyShopItem)(nil), "protocol.buy_shop_item")
	proto.RegisterType((*BuyShopItemRet)(nil), "protocol.buy_shop_item_ret")
	proto.RegisterType((*GenOrder)(nil), "protocol.gen_order")
	proto.RegisterType((*GenOrderRet)(nil), "protocol.gen_order_ret")
	proto.RegisterType((*RefreshMallItem)(nil), "protocol.refresh_mall_item")
	proto.RegisterType((*RefreshMallItemRet)(nil), "protocol.refresh_mall_item_ret")
	proto.RegisterType((*BuyMallItem)(nil), "protocol.buy_mall_item")
	proto.RegisterType((*BuyMallItemRet)(nil), "protocol.buy_mall_item_ret")
	proto.RegisterType((*GetMallItem)(nil), "protocol.get_mall_item")
	proto.RegisterType((*GetMallItemRet)(nil), "protocol.get_mall_item_ret")
	proto.RegisterType((*AutoRefreshMallItem)(nil), "protocol.auto_refresh_mall_item")
	proto.RegisterType((*AutoRefreshMallItemRet)(nil), "protocol.auto_refresh_mall_item_ret")
	proto.RegisterType((*MallItem)(nil), "protocol.MallItem")
}
func (m *BuyShopItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyShopItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *BuyShopItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyShopItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GenOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Uid))
	}
	if m.ShopID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShopID))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amount))))
		i += 8
	}
	return i, nil
}

func (m *GenOrderRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenOrderRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShop(dAtA, i, uint64(len(m.OrderID)))
		i += copy(dAtA[i:], m.OrderID)
	}
	return i, nil
}

func (m *RefreshMallItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshMallItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsWatchAd {
		dAtA[i] = 0x8
		i++
		if m.IsWatchAd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RefreshMallItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshMallItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Cost != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *BuyMallItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyMallItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func (m *BuyMallItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyMallItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Item.Size()))
		n1, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetMallItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMallItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetMallItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMallItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefreshTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.RefreshTime))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Cost != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *AutoRefreshMallItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoRefreshMallItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AutoRefreshMallItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoRefreshMallItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefreshTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.RefreshTime))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Cost != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *MallItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MallItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ID))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ItemID))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Num))
	}
	if m.BuyTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.BuyTimes))
	}
	if m.GroupCost != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.GroupCost))
	}
	return i, nil
}

func encodeVarintShop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BuyShopItem) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	return n
}

func (m *BuyShopItemRet) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GenOrder) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovShop(uint64(m.Uid))
	}
	if m.ShopID != 0 {
		n += 1 + sovShop(uint64(m.ShopID))
	}
	if m.Amount != 0 {
		n += 9
	}
	return n
}

func (m *GenOrderRet) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovShop(uint64(l))
	}
	return n
}

func (m *RefreshMallItem) Size() (n int) {
	var l int
	_ = l
	if m.IsWatchAd {
		n += 2
	}
	return n
}

func (m *RefreshMallItemRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	if m.Cost != 0 {
		n += 1 + sovShop(uint64(m.Cost))
	}
	return n
}

func (m *BuyMallItem) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovShop(uint64(m.ID))
	}
	return n
}

func (m *BuyMallItemRet) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	return n
}

func (m *GetMallItem) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetMallItemRet) Size() (n int) {
	var l int
	_ = l
	if m.RefreshTime != 0 {
		n += 1 + sovShop(uint64(m.RefreshTime))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	if m.Cost != 0 {
		n += 1 + sovShop(uint64(m.Cost))
	}
	return n
}

func (m *AutoRefreshMallItem) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AutoRefreshMallItemRet) Size() (n int) {
	var l int
	_ = l
	if m.RefreshTime != 0 {
		n += 1 + sovShop(uint64(m.RefreshTime))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	if m.Cost != 0 {
		n += 1 + sovShop(uint64(m.Cost))
	}
	return n
}

func (m *MallItem) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovShop(uint64(m.ID))
	}
	if m.ItemID != 0 {
		n += 1 + sovShop(uint64(m.ItemID))
	}
	if m.Num != 0 {
		n += 1 + sovShop(uint64(m.Num))
	}
	if m.BuyTimes != 0 {
		n += 1 + sovShop(uint64(m.BuyTimes))
	}
	if m.GroupCost != 0 {
		n += 1 + sovShop(uint64(m.GroupCost))
	}
	return n
}

func sovShop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShop(x uint64) (n int) {
	return sovShop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuyShopItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: buy_shop_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: buy_shop_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyShopItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: buy_shop_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: buy_shop_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gen_order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gen_order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopID", wireType)
			}
			m.ShopID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amount = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenOrderRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gen_order_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gen_order_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshMallItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: refresh_mall_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: refresh_mall_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWatchAd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWatchAd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshMallItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: refresh_mall_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: refresh_mall_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MallItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyMallItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: buy_mall_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: buy_mall_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyMallItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: buy_mall_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: buy_mall_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &MallItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMallItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_mall_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_mall_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMallItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_mall_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_mall_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MallItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoRefreshMallItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: auto_refresh_mall_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: auto_refresh_mall_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoRefreshMallItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: auto_refresh_mall_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: auto_refresh_mall_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MallItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MallItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MallItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MallItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyTimes", wireType)
			}
			m.BuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCost", wireType)
			}
			m.GroupCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupCost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShop   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shop.proto", fileDescriptorShop) }

var fileDescriptorShop = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0x3f, 0x8f, 0x9b, 0x4e,
	0x10, 0x15, 0x60, 0xfb, 0x67, 0xe6, 0x7e, 0xf6, 0x9d, 0xf7, 0x92, 0x13, 0x3a, 0x25, 0x06, 0x6d,
	0x11, 0xf9, 0x8a, 0xd8, 0xca, 0xa5, 0x4b, 0xaa, 0x38, 0x6e, 0x5c, 0x5c, 0xb3, 0x4a, 0x94, 0x12,
	0x81, 0xcd, 0x61, 0x24, 0x60, 0x2d, 0xd8, 0x2d, 0x4e, 0xca, 0x07, 0x4c, 0x99, 0x3e, 0x12, 0x8a,
	0xfc, 0x11, 0xf8, 0x04, 0xd1, 0xce, 0x82, 0x39, 0xeb, 0xae, 0x48, 0x95, 0x8a, 0xf9, 0xf3, 0xe6,
	0xcd, 0xbc, 0xc7, 0x02, 0x94, 0x3b, 0xbe, 0x9f, 0xef, 0x0b, 0x2e, 0x38, 0x19, 0xe2, 0x67, 0xc3,
	0xd3, 0xeb, 0xb7, 0x71, 0x22, 0x76, 0x32, 0x9c, 0x6f, 0x78, 0xb6, 0x88, 0x79, 0xcc, 0x17, 0xd8,
	0x09, 0xe5, 0x3d, 0x66, 0x98, 0x60, 0xa4, 0x07, 0xa9, 0x0b, 0xa3, 0x50, 0x3e, 0xf8, 0x8a, 0xca,
	0x4f, 0x44, 0x94, 0x91, 0x31, 0x98, 0xc9, 0xd6, 0x31, 0x3c, 0x63, 0xd6, 0x67, 0x66, 0xb2, 0xa5,
	0x97, 0x30, 0x39, 0x01, 0xf8, 0x45, 0x24, 0xe8, 0x1d, 0xd8, 0x71, 0x94, 0xfb, 0xbc, 0xd8, 0x46,
	0x05, 0xb9, 0x00, 0x4b, 0x1e, 0x47, 0x54, 0x48, 0xae, 0x60, 0xa0, 0xf0, 0xeb, 0x95, 0x63, 0x62,
	0xb1, 0xc9, 0x54, 0x3d, 0xc8, 0xb8, 0xcc, 0x85, 0x63, 0x79, 0xc6, 0xcc, 0x60, 0x4d, 0x46, 0x6f,
	0x60, 0x74, 0xa4, 0x53, 0xfc, 0xc4, 0x81, 0xff, 0x30, 0x59, 0xaf, 0x90, 0xd6, 0x66, 0x6d, 0x4a,
	0xdf, 0xc1, 0xa4, 0x88, 0xee, 0x8b, 0xa8, 0xdc, 0xf9, 0x59, 0x90, 0xa6, 0xfa, 0xe6, 0x57, 0x60,
	0x27, 0xe5, 0xb7, 0x40, 0x6c, 0x76, 0x9f, 0xf4, 0x1d, 0x43, 0xd6, 0x15, 0xe8, 0x57, 0x78, 0xf9,
	0x64, 0x04, 0xb7, 0xcc, 0xa0, 0xaf, 0xe2, 0xd2, 0x31, 0x3c, 0x6b, 0x76, 0x76, 0x4b, 0xe6, 0xad,
	0x89, 0xf3, 0xbb, 0x20, 0x4d, 0xd7, 0x22, 0xca, 0x98, 0x06, 0x10, 0x02, 0xbd, 0x0d, 0x2f, 0x45,
	0x23, 0x07, 0xe3, 0xd6, 0xb9, 0xee, 0x8a, 0x31, 0x98, 0xcd, 0xbd, 0x7d, 0x66, 0xae, 0x57, 0xf4,
	0xa3, 0x76, 0xee, 0x74, 0xe7, 0x1b, 0xe8, 0xa9, 0x18, 0x61, 0xcf, 0xaf, 0xc4, 0x3e, 0x3d, 0x57,
	0x96, 0x88, 0x6e, 0x98, 0x96, 0x30, 0x39, 0x29, 0x20, 0x9b, 0x07, 0x67, 0x8d, 0xb4, 0x2f, 0x49,
	0x16, 0x21, 0xa9, 0xc5, 0x1e, 0x97, 0x3a, 0x8d, 0xe6, 0xdf, 0x6a, 0xb4, 0x1e, 0x69, 0x74, 0xe0,
	0x2a, 0x90, 0x82, 0xfb, 0x4f, 0xfc, 0xa3, 0xdf, 0xe1, 0xfa, 0xf9, 0xce, 0x3f, 0xb9, 0xeb, 0x97,
	0x01, 0xc3, 0x16, 0x47, 0x5e, 0x77, 0xbe, 0x2f, 0x47, 0x75, 0xe5, 0xda, 0x61, 0xc9, 0xf3, 0x0f,
	0x34, 0xd9, 0x52, 0xf5, 0x1b, 0xc8, 0x0d, 0x0c, 0x14, 0x51, 0xfb, 0x18, 0x97, 0x93, 0xba, 0x72,
	0x47, 0x0d, 0x04, 0xeb, 0x94, 0x35, 0x00, 0xe2, 0x81, 0x95, 0xcb, 0x4c, 0x6f, 0x5a, 0x8e, 0xeb,
	0xca, 0x05, 0x8d, 0xcb, 0x65, 0x46, 0x99, 0x6a, 0x91, 0x05, 0x0c, 0x43, 0xf9, 0xa0, 0x14, 0x94,
	0x4e, 0x0f, 0x61, 0x97, 0x75, 0xe5, 0x9e, 0x6b, 0x58, 0xdb, 0xa1, 0xec, 0x08, 0x22, 0xb7, 0x60,
	0xc7, 0x05, 0x97, 0xfb, 0xcf, 0x4a, 0x42, 0x1f, 0x27, 0x5e, 0xd4, 0x95, 0x7b, 0xa1, 0x27, 0x8e,
	0x2d, 0xca, 0x3a, 0xd8, 0xf2, 0xff, 0x1f, 0x87, 0xa9, 0xf1, 0xf3, 0x30, 0x35, 0x7e, 0x1f, 0xa6,
	0x46, 0x38, 0x40, 0x67, 0xde, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x7e, 0x82, 0x79, 0xef,
	0x03, 0x00, 0x00,
}
