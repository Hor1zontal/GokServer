// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: role.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 创建角色
type CreateRole struct {
	Icon     int32  `protobuf:"varint,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *CreateRole) Reset()                    { *m = CreateRole{} }
func (m *CreateRole) String() string            { return proto.CompactTextString(m) }
func (*CreateRole) ProtoMessage()               {}
func (*CreateRole) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{0} }

func (m *CreateRole) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *CreateRole) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 创建角色结果
type CreateRoleRet struct {
	Result   int32     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	RoleInfo *RoleInfo `protobuf:"bytes,2,opt,name=roleInfo" json:"roleInfo,omitempty"`
}

func (m *CreateRoleRet) Reset()                    { *m = CreateRoleRet{} }
func (m *CreateRoleRet) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleRet) ProtoMessage()               {}
func (*CreateRoleRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{1} }

func (m *CreateRoleRet) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CreateRoleRet) GetRoleInfo() *RoleInfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

type GetAvatar struct {
	Uid []int32 `protobuf:"varint,1,rep,packed,name=uid" json:"uid,omitempty"`
}

func (m *GetAvatar) Reset()                    { *m = GetAvatar{} }
func (m *GetAvatar) String() string            { return proto.CompactTextString(m) }
func (*GetAvatar) ProtoMessage()               {}
func (*GetAvatar) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{2} }

func (m *GetAvatar) GetUid() []int32 {
	if m != nil {
		return m.Uid
	}
	return nil
}

type GetAvatarRet struct {
	Uid    []int32  `protobuf:"varint,1,rep,packed,name=uid" json:"uid,omitempty"`
	Avatar []string `protobuf:"bytes,2,rep,name=avatar" json:"avatar,omitempty"`
}

func (m *GetAvatarRet) Reset()                    { *m = GetAvatarRet{} }
func (m *GetAvatarRet) String() string            { return proto.CompactTextString(m) }
func (*GetAvatarRet) ProtoMessage()               {}
func (*GetAvatarRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{3} }

func (m *GetAvatarRet) GetUid() []int32 {
	if m != nil {
		return m.Uid
	}
	return nil
}

func (m *GetAvatarRet) GetAvatar() []string {
	if m != nil {
		return m.Avatar
	}
	return nil
}

// 获取角色信息
type GetRoleInfo struct {
}

func (m *GetRoleInfo) Reset()                    { *m = GetRoleInfo{} }
func (m *GetRoleInfo) String() string            { return proto.CompactTextString(m) }
func (*GetRoleInfo) ProtoMessage()               {}
func (*GetRoleInfo) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{4} }

// 获取角色信息结果
type GetRoleInfoRet struct {
	RoleInfo *RoleInfo `protobuf:"bytes,1,opt,name=roleInfo" json:"roleInfo,omitempty"`
}

func (m *GetRoleInfoRet) Reset()                    { *m = GetRoleInfoRet{} }
func (m *GetRoleInfoRet) String() string            { return proto.CompactTextString(m) }
func (*GetRoleInfoRet) ProtoMessage()               {}
func (*GetRoleInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{5} }

func (m *GetRoleInfoRet) GetRoleInfo() *RoleInfo {
	if m != nil {
		return m.RoleInfo
	}
	return nil
}

// 角色进入游戏，调用此接口，服务端才会创建角色会话
type JoinGame struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *JoinGame) Reset()                    { *m = JoinGame{} }
func (m *JoinGame) String() string            { return proto.CompactTextString(m) }
func (*JoinGame) ProtoMessage()               {}
func (*JoinGame) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{6} }

func (m *JoinGame) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type JoinGameRet struct {
}

func (m *JoinGameRet) Reset()                    { *m = JoinGameRet{} }
func (m *JoinGameRet) String() string            { return proto.CompactTextString(m) }
func (*JoinGameRet) ProtoMessage()               {}
func (*JoinGameRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{7} }

// 离开游戏，调用此接口后需要重新登录
type LeaveGame struct {
}

func (m *LeaveGame) Reset()                    { *m = LeaveGame{} }
func (m *LeaveGame) String() string            { return proto.CompactTextString(m) }
func (*LeaveGame) ProtoMessage()               {}
func (*LeaveGame) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{8} }

type LeaveGameRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *LeaveGameRet) Reset()                    { *m = LeaveGameRet{} }
func (m *LeaveGameRet) String() string            { return proto.CompactTextString(m) }
func (*LeaveGameRet) ProtoMessage()               {}
func (*LeaveGameRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{9} }

func (m *LeaveGameRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 角色信息推送
type RoleInfoPush struct {
	Level      int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp        int32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Power      int32 `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	PowerLimit int32 `protobuf:"varint,4,opt,name=powerLimit,proto3" json:"powerLimit,omitempty"`
	Faith      int32 `protobuf:"varint,5,opt,name=faith,proto3" json:"faith,omitempty"`
	Diamond    int32 `protobuf:"varint,6,opt,name=diamond,proto3" json:"diamond,omitempty"`
	GayPoint   int32 `protobuf:"varint,7,opt,name=gayPoint,proto3" json:"gayPoint,omitempty"`
	Subscribe  bool  `protobuf:"varint,8,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
}

func (m *RoleInfoPush) Reset()                    { *m = RoleInfoPush{} }
func (m *RoleInfoPush) String() string            { return proto.CompactTextString(m) }
func (*RoleInfoPush) ProtoMessage()               {}
func (*RoleInfoPush) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{10} }

func (m *RoleInfoPush) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RoleInfoPush) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *RoleInfoPush) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *RoleInfoPush) GetPowerLimit() int32 {
	if m != nil {
		return m.PowerLimit
	}
	return 0
}

func (m *RoleInfoPush) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *RoleInfoPush) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *RoleInfoPush) GetGayPoint() int32 {
	if m != nil {
		return m.GayPoint
	}
	return 0
}

func (m *RoleInfoPush) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

type RolePowerPush struct {
	Power           int32 `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	UpdateTimestamp int64 `protobuf:"varint,2,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
}

func (m *RolePowerPush) Reset()                    { *m = RolePowerPush{} }
func (m *RolePowerPush) String() string            { return proto.CompactTextString(m) }
func (*RolePowerPush) ProtoMessage()               {}
func (*RolePowerPush) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{11} }

func (m *RolePowerPush) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *RolePowerPush) GetUpdateTimestamp() int64 {
	if m != nil {
		return m.UpdateTimestamp
	}
	return 0
}

// 获取角色标识信息
type RoleFlagInfo struct {
}

func (m *RoleFlagInfo) Reset()                    { *m = RoleFlagInfo{} }
func (m *RoleFlagInfo) String() string            { return proto.CompactTextString(m) }
func (*RoleFlagInfo) ProtoMessage()               {}
func (*RoleFlagInfo) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{12} }

type RoleFlagInfoRet struct {
	Flag []*FlagInfo `protobuf:"bytes,1,rep,name=flag" json:"flag,omitempty"`
}

func (m *RoleFlagInfoRet) Reset()                    { *m = RoleFlagInfoRet{} }
func (m *RoleFlagInfoRet) String() string            { return proto.CompactTextString(m) }
func (*RoleFlagInfoRet) ProtoMessage()               {}
func (*RoleFlagInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{13} }

func (m *RoleFlagInfoRet) GetFlag() []*FlagInfo {
	if m != nil {
		return m.Flag
	}
	return nil
}

// 更新标识
type UpdateFlag struct {
	Flag  int32 `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UpdateFlag) Reset()                    { *m = UpdateFlag{} }
func (m *UpdateFlag) String() string            { return proto.CompactTextString(m) }
func (*UpdateFlag) ProtoMessage()               {}
func (*UpdateFlag) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{14} }

func (m *UpdateFlag) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *UpdateFlag) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type UpdateFlagRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UpdateFlagRet) Reset()                    { *m = UpdateFlagRet{} }
func (m *UpdateFlagRet) String() string            { return proto.CompactTextString(m) }
func (*UpdateFlagRet) ProtoMessage()               {}
func (*UpdateFlagRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{15} }

func (m *UpdateFlagRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type RoleDisplayInfo struct {
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (m *RoleDisplayInfo) Reset()                    { *m = RoleDisplayInfo{} }
func (m *RoleDisplayInfo) String() string            { return proto.CompactTextString(m) }
func (*RoleDisplayInfo) ProtoMessage()               {}
func (*RoleDisplayInfo) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{16} }

func (m *RoleDisplayInfo) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *RoleDisplayInfo) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type RoleDisplayInfoRet struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *RoleDisplayInfoRet) Reset()                    { *m = RoleDisplayInfoRet{} }
func (m *RoleDisplayInfoRet) String() string            { return proto.CompactTextString(m) }
func (*RoleDisplayInfoRet) ProtoMessage()               {}
func (*RoleDisplayInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{17} }

func (m *RoleDisplayInfoRet) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type UpdateDisplay struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UpdateDisplay) Reset()                    { *m = UpdateDisplay{} }
func (m *UpdateDisplay) String() string            { return proto.CompactTextString(m) }
func (*UpdateDisplay) ProtoMessage()               {}
func (*UpdateDisplay) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{18} }

func (m *UpdateDisplay) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateDisplayRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UpdateDisplayRet) Reset()                    { *m = UpdateDisplayRet{} }
func (m *UpdateDisplayRet) String() string            { return proto.CompactTextString(m) }
func (*UpdateDisplayRet) ProtoMessage()               {}
func (*UpdateDisplayRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{19} }

func (m *UpdateDisplayRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type UpdatePower struct {
}

func (m *UpdatePower) Reset()                    { *m = UpdatePower{} }
func (m *UpdatePower) String() string            { return proto.CompactTextString(m) }
func (*UpdatePower) ProtoMessage()               {}
func (*UpdatePower) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{20} }

type UpdatePowerRet struct {
	Power           int32 `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	UpdateTimestamp int64 `protobuf:"varint,2,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	ServerTimestamp int64 `protobuf:"varint,3,opt,name=serverTimestamp,proto3" json:"serverTimestamp,omitempty"`
}

func (m *UpdatePowerRet) Reset()                    { *m = UpdatePowerRet{} }
func (m *UpdatePowerRet) String() string            { return proto.CompactTextString(m) }
func (*UpdatePowerRet) ProtoMessage()               {}
func (*UpdatePowerRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{21} }

func (m *UpdatePowerRet) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *UpdatePowerRet) GetUpdateTimestamp() int64 {
	if m != nil {
		return m.UpdateTimestamp
	}
	return 0
}

func (m *UpdatePowerRet) GetServerTimestamp() int64 {
	if m != nil {
		return m.ServerTimestamp
	}
	return 0
}

type DayGiftStatus struct {
}

func (m *DayGiftStatus) Reset()                    { *m = DayGiftStatus{} }
func (m *DayGiftStatus) String() string            { return proto.CompactTextString(m) }
func (*DayGiftStatus) ProtoMessage()               {}
func (*DayGiftStatus) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{22} }

type DayGiftStatusRet struct {
	Draw bool `protobuf:"varint,1,opt,name=draw,proto3" json:"draw,omitempty"`
}

func (m *DayGiftStatusRet) Reset()                    { *m = DayGiftStatusRet{} }
func (m *DayGiftStatusRet) String() string            { return proto.CompactTextString(m) }
func (*DayGiftStatusRet) ProtoMessage()               {}
func (*DayGiftStatusRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{23} }

func (m *DayGiftStatusRet) GetDraw() bool {
	if m != nil {
		return m.Draw
	}
	return false
}

type CorrectCivilReward struct {
	Uid   int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Power int32 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *CorrectCivilReward) Reset()                    { *m = CorrectCivilReward{} }
func (m *CorrectCivilReward) String() string            { return proto.CompactTextString(m) }
func (*CorrectCivilReward) ProtoMessage()               {}
func (*CorrectCivilReward) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{24} }

func (m *CorrectCivilReward) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CorrectCivilReward) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

type CorrectCivilRewardRet struct {
}

func (m *CorrectCivilRewardRet) Reset()                    { *m = CorrectCivilRewardRet{} }
func (m *CorrectCivilRewardRet) String() string            { return proto.CompactTextString(m) }
func (*CorrectCivilRewardRet) ProtoMessage()               {}
func (*CorrectCivilRewardRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{25} }

type UpdateUnlockFlag struct {
	Uid   int32       `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Flags []*FlagInfo `protobuf:"bytes,2,rep,name=flags" json:"flags,omitempty"`
}

func (m *UpdateUnlockFlag) Reset()                    { *m = UpdateUnlockFlag{} }
func (m *UpdateUnlockFlag) String() string            { return proto.CompactTextString(m) }
func (*UpdateUnlockFlag) ProtoMessage()               {}
func (*UpdateUnlockFlag) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{26} }

func (m *UpdateUnlockFlag) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUnlockFlag) GetFlags() []*FlagInfo {
	if m != nil {
		return m.Flags
	}
	return nil
}

type UpdateUnlockFlagRet struct {
}

func (m *UpdateUnlockFlagRet) Reset()                    { *m = UpdateUnlockFlagRet{} }
func (m *UpdateUnlockFlagRet) String() string            { return proto.CompactTextString(m) }
func (*UpdateUnlockFlagRet) ProtoMessage()               {}
func (*UpdateUnlockFlagRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{27} }

type QueryByNickname struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *QueryByNickname) Reset()                    { *m = QueryByNickname{} }
func (m *QueryByNickname) String() string            { return proto.CompactTextString(m) }
func (*QueryByNickname) ProtoMessage()               {}
func (*QueryByNickname) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{28} }

func (m *QueryByNickname) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

type QueryByNicknameRet struct {
	Uids []int32 `protobuf:"varint,1,rep,packed,name=uids" json:"uids,omitempty"`
}

func (m *QueryByNicknameRet) Reset()                    { *m = QueryByNicknameRet{} }
func (m *QueryByNicknameRet) String() string            { return proto.CompactTextString(m) }
func (*QueryByNicknameRet) ProtoMessage()               {}
func (*QueryByNicknameRet) Descriptor() ([]byte, []int) { return fileDescriptorRole, []int{29} }

func (m *QueryByNicknameRet) GetUids() []int32 {
	if m != nil {
		return m.Uids
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRole)(nil), "protocol.create_role")
	proto.RegisterType((*CreateRoleRet)(nil), "protocol.create_role_ret")
	proto.RegisterType((*GetAvatar)(nil), "protocol.get_avatar")
	proto.RegisterType((*GetAvatarRet)(nil), "protocol.get_avatar_ret")
	proto.RegisterType((*GetRoleInfo)(nil), "protocol.get_role_info")
	proto.RegisterType((*GetRoleInfoRet)(nil), "protocol.get_role_info_ret")
	proto.RegisterType((*JoinGame)(nil), "protocol.join_game")
	proto.RegisterType((*JoinGameRet)(nil), "protocol.join_game_ret")
	proto.RegisterType((*LeaveGame)(nil), "protocol.leave_game")
	proto.RegisterType((*LeaveGameRet)(nil), "protocol.leave_game_ret")
	proto.RegisterType((*RoleInfoPush)(nil), "protocol.role_info_push")
	proto.RegisterType((*RolePowerPush)(nil), "protocol.role_power_push")
	proto.RegisterType((*RoleFlagInfo)(nil), "protocol.role_flag_info")
	proto.RegisterType((*RoleFlagInfoRet)(nil), "protocol.role_flag_info_ret")
	proto.RegisterType((*UpdateFlag)(nil), "protocol.update_flag")
	proto.RegisterType((*UpdateFlagRet)(nil), "protocol.update_flag_ret")
	proto.RegisterType((*RoleDisplayInfo)(nil), "protocol.role_display_info")
	proto.RegisterType((*RoleDisplayInfoRet)(nil), "protocol.role_display_info_ret")
	proto.RegisterType((*UpdateDisplay)(nil), "protocol.update_display")
	proto.RegisterType((*UpdateDisplayRet)(nil), "protocol.update_display_ret")
	proto.RegisterType((*UpdatePower)(nil), "protocol.update_power")
	proto.RegisterType((*UpdatePowerRet)(nil), "protocol.update_power_ret")
	proto.RegisterType((*DayGiftStatus)(nil), "protocol.day_gift_status")
	proto.RegisterType((*DayGiftStatusRet)(nil), "protocol.day_gift_status_ret")
	proto.RegisterType((*CorrectCivilReward)(nil), "protocol.correct_civil_reward")
	proto.RegisterType((*CorrectCivilRewardRet)(nil), "protocol.correct_civil_reward_ret")
	proto.RegisterType((*UpdateUnlockFlag)(nil), "protocol.update_unlock_flag")
	proto.RegisterType((*UpdateUnlockFlagRet)(nil), "protocol.update_unlock_flag_ret")
	proto.RegisterType((*QueryByNickname)(nil), "protocol.query_by_nickname")
	proto.RegisterType((*QueryByNicknameRet)(nil), "protocol.query_by_nickname_ret")
}
func (m *CreateRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Icon != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Icon))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRole(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *CreateRoleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Result))
	}
	if m.RoleInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.RoleInfo.Size()))
		n1, err := m.RoleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA3 := make([]byte, len(m.Uid)*10)
		var j2 int
		for _, num1 := range m.Uid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRole(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *GetAvatarRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAvatarRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA5 := make([]byte, len(m.Uid)*10)
		var j4 int
		for _, num1 := range m.Uid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRole(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.Avatar) > 0 {
		for _, s := range m.Avatar {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetRoleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetRoleInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.RoleInfo.Size()))
		n6, err := m.RoleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *JoinGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *JoinGameRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGameRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LeaveGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LeaveGameRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveGameRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RoleInfoPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleInfoPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Exp))
	}
	if m.Power != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Power))
	}
	if m.PowerLimit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.PowerLimit))
	}
	if m.Faith != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Faith))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Diamond))
	}
	if m.GayPoint != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.GayPoint))
	}
	if m.Subscribe {
		dAtA[i] = 0x40
		i++
		if m.Subscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RolePowerPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolePowerPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Power))
	}
	if m.UpdateTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.UpdateTimestamp))
	}
	return i, nil
}

func (m *RoleFlagInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleFlagInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RoleFlagInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleFlagInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Flag) > 0 {
		for _, msg := range m.Flag {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRole(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFlag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Flag))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *UpdateFlagRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFlagRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RoleDisplayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleDisplayInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Min != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Min))
	}
	if m.Max != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Max))
	}
	return i, nil
}

func (m *RoleDisplayInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleDisplayInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA8 := make([]byte, len(m.Id)*10)
		var j7 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRole(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *UpdateDisplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDisplay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *UpdateDisplayRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDisplayRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdatePower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePower) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdatePowerRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePowerRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Power))
	}
	if m.UpdateTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.UpdateTimestamp))
	}
	if m.ServerTimestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.ServerTimestamp))
	}
	return i, nil
}

func (m *DayGiftStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayGiftStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DayGiftStatusRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DayGiftStatusRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Draw {
		dAtA[i] = 0x8
		i++
		if m.Draw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CorrectCivilReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CorrectCivilReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Uid))
	}
	if m.Power != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Power))
	}
	return i, nil
}

func (m *CorrectCivilRewardRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CorrectCivilRewardRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateUnlockFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUnlockFlag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRole(dAtA, i, uint64(m.Uid))
	}
	if len(m.Flags) > 0 {
		for _, msg := range m.Flags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRole(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateUnlockFlagRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUnlockFlagRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueryByNickname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryByNickname) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRole(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *QueryByNicknameRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryByNicknameRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA10 := make([]byte, len(m.Uids)*10)
		var j9 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRole(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func encodeVarintRole(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateRole) Size() (n int) {
	var l int
	_ = l
	if m.Icon != 0 {
		n += 1 + sovRole(uint64(m.Icon))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRole(uint64(l))
	}
	return n
}

func (m *CreateRoleRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovRole(uint64(m.Result))
	}
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 1 + l + sovRole(uint64(l))
	}
	return n
}

func (m *GetAvatar) Size() (n int) {
	var l int
	_ = l
	if len(m.Uid) > 0 {
		l = 0
		for _, e := range m.Uid {
			l += sovRole(uint64(e))
		}
		n += 1 + sovRole(uint64(l)) + l
	}
	return n
}

func (m *GetAvatarRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Uid) > 0 {
		l = 0
		for _, e := range m.Uid {
			l += sovRole(uint64(e))
		}
		n += 1 + sovRole(uint64(l)) + l
	}
	if len(m.Avatar) > 0 {
		for _, s := range m.Avatar {
			l = len(s)
			n += 1 + l + sovRole(uint64(l))
		}
	}
	return n
}

func (m *GetRoleInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetRoleInfoRet) Size() (n int) {
	var l int
	_ = l
	if m.RoleInfo != nil {
		l = m.RoleInfo.Size()
		n += 1 + l + sovRole(uint64(l))
	}
	return n
}

func (m *JoinGame) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRole(uint64(m.Id))
	}
	return n
}

func (m *JoinGameRet) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LeaveGame) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LeaveGameRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *RoleInfoPush) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovRole(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovRole(uint64(m.Exp))
	}
	if m.Power != 0 {
		n += 1 + sovRole(uint64(m.Power))
	}
	if m.PowerLimit != 0 {
		n += 1 + sovRole(uint64(m.PowerLimit))
	}
	if m.Faith != 0 {
		n += 1 + sovRole(uint64(m.Faith))
	}
	if m.Diamond != 0 {
		n += 1 + sovRole(uint64(m.Diamond))
	}
	if m.GayPoint != 0 {
		n += 1 + sovRole(uint64(m.GayPoint))
	}
	if m.Subscribe {
		n += 2
	}
	return n
}

func (m *RolePowerPush) Size() (n int) {
	var l int
	_ = l
	if m.Power != 0 {
		n += 1 + sovRole(uint64(m.Power))
	}
	if m.UpdateTimestamp != 0 {
		n += 1 + sovRole(uint64(m.UpdateTimestamp))
	}
	return n
}

func (m *RoleFlagInfo) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RoleFlagInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Flag) > 0 {
		for _, e := range m.Flag {
			l = e.Size()
			n += 1 + l + sovRole(uint64(l))
		}
	}
	return n
}

func (m *UpdateFlag) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovRole(uint64(m.Flag))
	}
	if m.Value != 0 {
		n += 1 + sovRole(uint64(m.Value))
	}
	return n
}

func (m *UpdateFlagRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *RoleDisplayInfo) Size() (n int) {
	var l int
	_ = l
	if m.Min != 0 {
		n += 1 + sovRole(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovRole(uint64(m.Max))
	}
	return n
}

func (m *RoleDisplayInfoRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovRole(uint64(e))
		}
		n += 1 + sovRole(uint64(l)) + l
	}
	return n
}

func (m *UpdateDisplay) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRole(uint64(m.Id))
	}
	return n
}

func (m *UpdateDisplayRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *UpdatePower) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdatePowerRet) Size() (n int) {
	var l int
	_ = l
	if m.Power != 0 {
		n += 1 + sovRole(uint64(m.Power))
	}
	if m.UpdateTimestamp != 0 {
		n += 1 + sovRole(uint64(m.UpdateTimestamp))
	}
	if m.ServerTimestamp != 0 {
		n += 1 + sovRole(uint64(m.ServerTimestamp))
	}
	return n
}

func (m *DayGiftStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DayGiftStatusRet) Size() (n int) {
	var l int
	_ = l
	if m.Draw {
		n += 2
	}
	return n
}

func (m *CorrectCivilReward) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRole(uint64(m.Uid))
	}
	if m.Power != 0 {
		n += 1 + sovRole(uint64(m.Power))
	}
	return n
}

func (m *CorrectCivilRewardRet) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateUnlockFlag) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRole(uint64(m.Uid))
	}
	if len(m.Flags) > 0 {
		for _, e := range m.Flags {
			l = e.Size()
			n += 1 + l + sovRole(uint64(l))
		}
	}
	return n
}

func (m *UpdateUnlockFlagRet) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueryByNickname) Size() (n int) {
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovRole(uint64(l))
	}
	return n
}

func (m *QueryByNicknameRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovRole(uint64(e))
		}
		n += 1 + sovRole(uint64(l)) + l
	}
	return n
}

func sovRole(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRole(x uint64) (n int) {
	return sovRole(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: create_role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: create_role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: create_role_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: create_role_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &RoleInfo{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_avatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_avatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRole
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRole
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAvatarRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_avatar_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_avatar_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRole
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRole
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = append(m.Avatar, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_role_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_role_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_role_info_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_role_info_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoleInfo == nil {
				m.RoleInfo = &RoleInfo{}
			}
			if err := m.RoleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: join_game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: join_game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGameRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: join_game_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: join_game_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leave_game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leave_game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveGameRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leave_game_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leave_game_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleInfoPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_info_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_info_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerLimit", wireType)
			}
			m.PowerLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GayPoint", wireType)
			}
			m.GayPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GayPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolePowerPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_power_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_power_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			m.UpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleFlagInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_flag_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_flag_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleFlagInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_flag_info_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_flag_info_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = append(m.Flag, &FlagInfo{})
			if err := m.Flag[len(m.Flag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFlagRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_flag_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_flag_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleDisplayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_display_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_display_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleDisplayInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: role_display_info_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: role_display_info_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRole
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRole
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDisplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_display: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_display: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDisplayRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_display_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_display_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_power: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_power: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePowerRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_power_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_power_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			m.UpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTimestamp", wireType)
			}
			m.ServerTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayGiftStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: day_gift_status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: day_gift_status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DayGiftStatusRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: day_gift_status_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: day_gift_status_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Draw = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CorrectCivilReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: correct_civil_reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: correct_civil_reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CorrectCivilRewardRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: correct_civil_reward_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: correct_civil_reward_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUnlockFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_unlock_flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_unlock_flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRole
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flags = append(m.Flags, &FlagInfo{})
			if err := m.Flags[len(m.Flags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUnlockFlagRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_unlock_flag_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_unlock_flag_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryByNickname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_by_nickname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_by_nickname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRole
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRole
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryByNicknameRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRole
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: query_by_nickname_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: query_by_nickname_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRole
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRole
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRole
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRole(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRole
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRole(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRole
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRole
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRole
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRole
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRole
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRole(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRole = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRole   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("role.proto", fileDescriptorRole) }

var fileDescriptorRole = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4b, 0x6b, 0xdb, 0x4a,
	0x14, 0x46, 0x96, 0x95, 0xd8, 0x27, 0xb9, 0x72, 0x3c, 0x79, 0x20, 0x72, 0x2f, 0xc6, 0xcc, 0x26,
	0x0e, 0xf7, 0x92, 0xc0, 0xed, 0x22, 0x50, 0x48, 0x17, 0xa5, 0x9b, 0x42, 0x17, 0x8d, 0xe8, 0xaa,
	0x1b, 0x31, 0x96, 0xc6, 0xce, 0x34, 0x92, 0xc6, 0x1d, 0x8d, 0x9c, 0x18, 0xfa, 0x03, 0xbb, 0xec,
	0xb2, 0xcb, 0x92, 0x5f, 0x52, 0xe6, 0x8c, 0x24, 0xbf, 0xd2, 0x50, 0xe8, 0x4a, 0xe7, 0xf1, 0x9d,
	0x73, 0xbe, 0xf3, 0xd0, 0x00, 0x28, 0x99, 0xf2, 0x8b, 0x99, 0x92, 0x5a, 0x92, 0x0e, 0x7e, 0x62,
	0x99, 0x9e, 0xfa, 0x8c, 0xc5, 0x32, 0xcb, 0x64, 0x6e, 0x3d, 0xf4, 0x1a, 0xf6, 0x62, 0xc5, 0x99,
	0xe6, 0x91, 0x81, 0x13, 0x02, 0x6d, 0x11, 0xcb, 0x3c, 0x70, 0x86, 0xce, 0xc8, 0x0b, 0x51, 0x26,
	0xa7, 0xd0, 0xc9, 0x45, 0x7c, 0x97, 0xb3, 0x8c, 0x07, 0xad, 0xa1, 0x33, 0xea, 0x86, 0x8d, 0x4e,
	0x3f, 0x42, 0x6f, 0x25, 0x3c, 0x52, 0x5c, 0x93, 0x13, 0xd8, 0x51, 0xbc, 0x28, 0x53, 0x5d, 0x25,
	0xa9, 0x34, 0x72, 0x09, 0x1d, 0x83, 0x79, 0x9b, 0x4f, 0x24, 0xa6, 0xd9, 0xfb, 0xff, 0xf0, 0xa2,
	0xa6, 0x75, 0x81, 0xd1, 0x22, 0x9f, 0xc8, 0xb0, 0x01, 0xd1, 0x01, 0xc0, 0x94, 0xeb, 0x88, 0xcd,
	0x99, 0x66, 0x8a, 0x1c, 0x80, 0x5b, 0x8a, 0x24, 0x70, 0x86, 0xee, 0xc8, 0x0b, 0x8d, 0x48, 0x5f,
	0x82, 0xbf, 0xf4, 0x63, 0xe9, 0x2d, 0x8c, 0x21, 0x63, 0xfd, 0x41, 0x6b, 0xe8, 0x8e, 0xba, 0x61,
	0xa5, 0xd1, 0x1e, 0xfc, 0x65, 0x62, 0x9b, 0xb2, 0xf4, 0x0d, 0xf4, 0xd7, 0x0c, 0x98, 0x6f, 0x95,
	0xb2, 0xf3, 0x3b, 0x94, 0xff, 0x86, 0xee, 0x27, 0x29, 0xf2, 0x68, 0xca, 0x32, 0x4e, 0x7c, 0x68,
	0x21, 0x19, 0x33, 0x84, 0x96, 0x48, 0x4c, 0xcd, 0xc6, 0x69, 0xd2, 0xd3, 0x7d, 0x80, 0x94, 0xb3,
	0x39, 0x47, 0x0b, 0x1d, 0x81, 0xbf, 0xd4, 0x9e, 0x98, 0x64, 0xa7, 0x9e, 0x24, 0xfd, 0xee, 0x80,
	0xbf, 0x24, 0x3a, 0x2b, 0x8b, 0x5b, 0x72, 0x04, 0x5e, 0xca, 0xe7, 0x3c, 0xad, 0xca, 0x59, 0xc5,
	0xcc, 0x83, 0x3f, 0xcc, 0x70, 0xda, 0x5e, 0x68, 0x44, 0x83, 0x9b, 0xc9, 0x7b, 0xae, 0x02, 0xd7,
	0xe2, 0x50, 0x21, 0x03, 0x00, 0x14, 0xde, 0x89, 0x4c, 0xe8, 0xa0, 0x8d, 0xae, 0x15, 0x8b, 0x89,
	0x9a, 0x30, 0xa1, 0x6f, 0x03, 0xcf, 0x46, 0xa1, 0x42, 0x02, 0xd8, 0x4d, 0x04, 0xcb, 0x64, 0x9e,
	0x04, 0x3b, 0x68, 0xaf, 0x55, 0x73, 0x31, 0x53, 0xb6, 0x78, 0x2f, 0x45, 0xae, 0x83, 0x5d, 0x74,
	0x35, 0x3a, 0xf9, 0x07, 0xba, 0x45, 0x39, 0x2e, 0x62, 0x25, 0xc6, 0x3c, 0xe8, 0x60, 0x5f, 0x4b,
	0x03, 0xbd, 0x81, 0x1e, 0x76, 0x86, 0xc5, 0x9b, 0xd6, 0x2c, 0x65, 0x67, 0x95, 0xf2, 0x08, 0x7a,
	0xe5, 0x2c, 0x61, 0x9a, 0x7f, 0x10, 0x19, 0x2f, 0x34, 0xcb, 0x6c, 0x9b, 0x6e, 0xb8, 0x69, 0xa6,
	0x07, 0xd5, 0xb0, 0x26, 0x29, 0x9b, 0xda, 0x5d, 0x5f, 0x03, 0x59, 0xb7, 0xe0, 0xb4, 0xcf, 0xa0,
	0x6d, 0x0c, 0x78, 0x3d, 0x6b, 0x8b, 0x6e, 0x60, 0x21, 0x02, 0xe8, 0x15, 0xec, 0xd9, 0x1a, 0x98,
	0xc0, 0xfc, 0x32, 0x55, 0x1c, 0xfe, 0x32, 0x68, 0x3b, 0x02, 0x6f, 0xce, 0xd2, 0x92, 0x57, 0xa3,
	0xb7, 0x0a, 0x3d, 0xaf, 0x39, 0xdb, 0xca, 0xcf, 0xad, 0xf8, 0x0a, 0xfa, 0x48, 0x31, 0x11, 0xc5,
	0x2c, 0x65, 0x0b, 0x2c, 0x6f, 0xd6, 0x99, 0x89, 0xfa, 0xdf, 0x34, 0x22, 0x5a, 0xd8, 0x43, 0xbd,
	0xe0, 0x8c, 0x3d, 0xd0, 0x33, 0x38, 0xde, 0x0a, 0xc4, 0x4a, 0xf5, 0x35, 0xba, 0xd5, 0x35, 0x0e,
	0xc1, 0xaf, 0xc8, 0x54, 0xd0, 0xad, 0x7b, 0xfd, 0x0f, 0xc8, 0x3a, 0xe2, 0x59, 0xc6, 0x3e, 0xec,
	0x57, 0x68, 0x5c, 0x10, 0xfd, 0x02, 0x07, 0xab, 0x3a, 0xc6, 0xfe, 0xe1, 0x2a, 0x0d, 0xb2, 0xe0,
	0x6a, 0xce, 0xd5, 0x12, 0xe9, 0x5a, 0xe4, 0x86, 0x99, 0xf6, 0xa1, 0x97, 0xb0, 0x45, 0x34, 0x15,
	0x13, 0x1d, 0x15, 0x9a, 0xe9, 0xb2, 0xa0, 0xe7, 0x70, 0xb8, 0x61, 0x42, 0x4e, 0x04, 0xda, 0x89,
	0x62, 0xf7, 0x55, 0x37, 0x28, 0xd3, 0x57, 0x70, 0x14, 0x4b, 0xa5, 0x78, 0xac, 0xa3, 0x58, 0xcc,
	0x45, 0x1a, 0x29, 0x7e, 0xcf, 0x54, 0xb2, 0x7c, 0x5f, 0x9c, 0xfa, 0x7d, 0x69, 0x3a, 0x6a, 0xad,
	0x74, 0x44, 0x4f, 0x21, 0x78, 0x2a, 0x1e, 0x7f, 0xfa, 0x9b, 0x66, 0xaa, 0x65, 0x9e, 0xca, 0xf8,
	0xce, 0x1e, 0xd1, 0x76, 0xe6, 0x73, 0xf0, 0x8c, 0xa7, 0xc0, 0x87, 0xeb, 0x17, 0xf7, 0x68, 0x11,
	0x34, 0x80, 0x93, 0xed, 0x94, 0x58, 0xec, 0x12, 0xfa, 0x9f, 0x4b, 0xae, 0x16, 0xd1, 0x78, 0x11,
	0xd5, 0x6f, 0xf6, 0xda, 0x7b, 0xee, 0x6c, 0xbc, 0xe7, 0xff, 0xc2, 0xf1, 0x56, 0x40, 0x3d, 0xa6,
	0x52, 0x24, 0x45, 0x75, 0x40, 0x28, 0xbf, 0xde, 0xff, 0xfa, 0x38, 0x70, 0xbe, 0x3d, 0x0e, 0x9c,
	0x1f, 0x8f, 0x03, 0x67, 0xbc, 0x83, 0x04, 0x5f, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xec,
	0xd6, 0x1f, 0x78, 0x06, 0x00, 0x00,
}
