// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mail.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Mail struct {
	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner      int32   `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Title      string  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content    string  `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime int64   `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Attach     *Attach `protobuf:"bytes,6,opt,name=attach" json:"attach,omitempty"`
}

func (m *Mail) Reset()                    { *m = Mail{} }
func (m *Mail) String() string            { return proto.CompactTextString(m) }
func (*Mail) ProtoMessage()               {}
func (*Mail) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{0} }

func (m *Mail) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Mail) GetOwner() int32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *Mail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Mail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Mail) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Mail) GetAttach() *Attach {
	if m != nil {
		return m.Attach
	}
	return nil
}

// 邮件附件
type Attach struct {
	Draw     bool            `protobuf:"varint,1,opt,name=draw,proto3" json:"draw,omitempty"`
	Power    int32           `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	Faith    int32           `protobuf:"varint,3,opt,name=faith,proto3" json:"faith,omitempty"`
	GayPoint int32           `protobuf:"varint,4,opt,name=gayPoint,proto3" json:"gayPoint,omitempty"`
	Diamond  int32           `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Believer []*BelieverInfo `protobuf:"bytes,6,rep,name=Believer" json:"Believer,omitempty"`
	Item     []*BagItem      `protobuf:"bytes,7,rep,name=Item" json:"Item,omitempty"`
}

func (m *Attach) Reset()                    { *m = Attach{} }
func (m *Attach) String() string            { return proto.CompactTextString(m) }
func (*Attach) ProtoMessage()               {}
func (*Attach) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{1} }

func (m *Attach) GetDraw() bool {
	if m != nil {
		return m.Draw
	}
	return false
}

func (m *Attach) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Attach) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *Attach) GetGayPoint() int32 {
	if m != nil {
		return m.GayPoint
	}
	return 0
}

func (m *Attach) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *Attach) GetBeliever() []*BelieverInfo {
	if m != nil {
		return m.Believer
	}
	return nil
}

func (m *Attach) GetItem() []*BagItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type GetMail struct {
	Uid        int32 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	BeforeTime int64 `protobuf:"varint,2,opt,name=BeforeTime,proto3" json:"BeforeTime,omitempty"`
	Count      int32 `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
	Offset     int64 `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (m *GetMail) Reset()                    { *m = GetMail{} }
func (m *GetMail) String() string            { return proto.CompactTextString(m) }
func (*GetMail) ProtoMessage()               {}
func (*GetMail) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{2} }

func (m *GetMail) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetMail) GetBeforeTime() int64 {
	if m != nil {
		return m.BeforeTime
	}
	return 0
}

func (m *GetMail) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetMail) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetMailRet struct {
	Mail []*Mail `protobuf:"bytes,1,rep,name=mail" json:"mail,omitempty"`
}

func (m *GetMailRet) Reset()                    { *m = GetMailRet{} }
func (m *GetMailRet) String() string            { return proto.CompactTextString(m) }
func (*GetMailRet) ProtoMessage()               {}
func (*GetMailRet) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{3} }

func (m *GetMailRet) GetMail() []*Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

type GetAllMail struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetAllMail) Reset()                    { *m = GetAllMail{} }
func (m *GetAllMail) String() string            { return proto.CompactTextString(m) }
func (*GetAllMail) ProtoMessage()               {}
func (*GetAllMail) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{4} }

func (m *GetAllMail) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetAllMailRet struct {
	Mail []*Mail `protobuf:"bytes,1,rep,name=mail" json:"mail,omitempty"`
}

func (m *GetAllMailRet) Reset()                    { *m = GetAllMailRet{} }
func (m *GetAllMailRet) String() string            { return proto.CompactTextString(m) }
func (*GetAllMailRet) ProtoMessage()               {}
func (*GetAllMailRet) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{5} }

func (m *GetAllMailRet) GetMail() []*Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

// 领取邮件附件
type DrawMail struct {
	Uid    int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	MailID int64 `protobuf:"varint,2,opt,name=mailID,proto3" json:"mailID,omitempty"`
}

func (m *DrawMail) Reset()                    { *m = DrawMail{} }
func (m *DrawMail) String() string            { return proto.CompactTextString(m) }
func (*DrawMail) ProtoMessage()               {}
func (*DrawMail) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{6} }

func (m *DrawMail) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DrawMail) GetMailID() int64 {
	if m != nil {
		return m.MailID
	}
	return 0
}

// 领取邮件结果
type DrawMailRet struct {
	Mail *Mail `protobuf:"bytes,1,opt,name=mail" json:"mail,omitempty"`
}

func (m *DrawMailRet) Reset()                    { *m = DrawMailRet{} }
func (m *DrawMailRet) String() string            { return proto.CompactTextString(m) }
func (*DrawMailRet) ProtoMessage()               {}
func (*DrawMailRet) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{7} }

func (m *DrawMailRet) GetMail() *Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

// 领取邮件附件
type RemoveMail struct {
	Uid    int32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	MailID []int64 `protobuf:"varint,2,rep,packed,name=mailID" json:"mailID,omitempty"`
}

func (m *RemoveMail) Reset()                    { *m = RemoveMail{} }
func (m *RemoveMail) String() string            { return proto.CompactTextString(m) }
func (*RemoveMail) ProtoMessage()               {}
func (*RemoveMail) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{8} }

func (m *RemoveMail) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RemoveMail) GetMailID() []int64 {
	if m != nil {
		return m.MailID
	}
	return nil
}

// 领取邮件结果
type RemoveMailRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *RemoveMailRet) Reset()                    { *m = RemoveMailRet{} }
func (m *RemoveMailRet) String() string            { return proto.CompactTextString(m) }
func (*RemoveMailRet) ProtoMessage()               {}
func (*RemoveMailRet) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{9} }

func (m *RemoveMailRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 发送邮件
type CreateMail struct {
	Uid        int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	MailAttach string `protobuf:"bytes,4,opt,name=mailAttach,proto3" json:"mailAttach,omitempty"`
}

func (m *CreateMail) Reset()                    { *m = CreateMail{} }
func (m *CreateMail) String() string            { return proto.CompactTextString(m) }
func (*CreateMail) ProtoMessage()               {}
func (*CreateMail) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{10} }

func (m *CreateMail) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CreateMail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateMail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateMail) GetMailAttach() string {
	if m != nil {
		return m.MailAttach
	}
	return ""
}

type CreateMailRet struct {
	Mail *Mail `protobuf:"bytes,1,opt,name=mail" json:"mail,omitempty"`
}

func (m *CreateMailRet) Reset()                    { *m = CreateMailRet{} }
func (m *CreateMailRet) String() string            { return proto.CompactTextString(m) }
func (*CreateMailRet) ProtoMessage()               {}
func (*CreateMailRet) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{11} }

func (m *CreateMailRet) GetMail() *Mail {
	if m != nil {
		return m.Mail
	}
	return nil
}

type Notice struct {
	NoticeID int32  `protobuf:"varint,1,opt,name=noticeID,proto3" json:"noticeID,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content  string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Start    int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End      int64  `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	Status   int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Notice) Reset()                    { *m = Notice{} }
func (m *Notice) String() string            { return proto.CompactTextString(m) }
func (*Notice) ProtoMessage()               {}
func (*Notice) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{12} }

func (m *Notice) GetNoticeID() int32 {
	if m != nil {
		return m.NoticeID
	}
	return 0
}

func (m *Notice) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notice) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Notice) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Notice) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Notice) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GetOnNotices struct {
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GetOnNotices) Reset()                    { *m = GetOnNotices{} }
func (m *GetOnNotices) String() string            { return proto.CompactTextString(m) }
func (*GetOnNotices) ProtoMessage()               {}
func (*GetOnNotices) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{13} }

func (m *GetOnNotices) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GetOnNoticesRet struct {
	Notices []*Notice `protobuf:"bytes,1,rep,name=notices" json:"notices,omitempty"`
}

func (m *GetOnNoticesRet) Reset()                    { *m = GetOnNoticesRet{} }
func (m *GetOnNoticesRet) String() string            { return proto.CompactTextString(m) }
func (*GetOnNoticesRet) ProtoMessage()               {}
func (*GetOnNoticesRet) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{14} }

func (m *GetOnNoticesRet) GetNotices() []*Notice {
	if m != nil {
		return m.Notices
	}
	return nil
}

func init() {
	proto.RegisterType((*Mail)(nil), "protocol.Mail")
	proto.RegisterType((*Attach)(nil), "protocol.Attach")
	proto.RegisterType((*GetMail)(nil), "protocol.get_mail")
	proto.RegisterType((*GetMailRet)(nil), "protocol.get_mail_ret")
	proto.RegisterType((*GetAllMail)(nil), "protocol.get_all_mail")
	proto.RegisterType((*GetAllMailRet)(nil), "protocol.get_all_mail_ret")
	proto.RegisterType((*DrawMail)(nil), "protocol.draw_mail")
	proto.RegisterType((*DrawMailRet)(nil), "protocol.draw_mail_ret")
	proto.RegisterType((*RemoveMail)(nil), "protocol.remove_mail")
	proto.RegisterType((*RemoveMailRet)(nil), "protocol.remove_mail_ret")
	proto.RegisterType((*CreateMail)(nil), "protocol.create_mail")
	proto.RegisterType((*CreateMailRet)(nil), "protocol.create_mail_ret")
	proto.RegisterType((*Notice)(nil), "protocol.Notice")
	proto.RegisterType((*GetOnNotices)(nil), "protocol.get_on_notices")
	proto.RegisterType((*GetOnNoticesRet)(nil), "protocol.get_on_notices_ret")
}
func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Id))
	}
	if m.Owner != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Owner))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.CreateTime))
	}
	if m.Attach != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Attach.Size()))
		n1, err := m.Attach.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Attach) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attach) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Draw {
		dAtA[i] = 0x8
		i++
		if m.Draw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Power != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Power))
	}
	if m.Faith != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Faith))
	}
	if m.GayPoint != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.GayPoint))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Diamond))
	}
	if len(m.Believer) > 0 {
		for _, msg := range m.Believer {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Uid))
	}
	if m.BeforeTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.BeforeTime))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Count))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *GetMailRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMailRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mail) > 0 {
		for _, msg := range m.Mail {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetAllMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetAllMailRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMailRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mail) > 0 {
		for _, msg := range m.Mail {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DrawMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Uid))
	}
	if m.MailID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.MailID))
	}
	return i, nil
}

func (m *DrawMailRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawMailRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mail != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Mail.Size()))
		n2, err := m.Mail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RemoveMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Uid))
	}
	if len(m.MailID) > 0 {
		dAtA4 := make([]byte, len(m.MailID)*10)
		var j3 int
		for _, num1 := range m.MailID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintMail(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *RemoveMailRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMailRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateMail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Uid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.MailAttach) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.MailAttach)))
		i += copy(dAtA[i:], m.MailAttach)
	}
	return i, nil
}

func (m *CreateMailRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMailRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mail != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Mail.Size()))
		n5, err := m.Mail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Notice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NoticeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.NoticeID))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Start != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.End))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *GetOnNotices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOnNotices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *GetOnNoticesRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOnNoticesRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Notices) > 0 {
		for _, msg := range m.Notices {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Mail) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMail(uint64(m.Id))
	}
	if m.Owner != 0 {
		n += 1 + sovMail(uint64(m.Owner))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMail(uint64(m.CreateTime))
	}
	if m.Attach != nil {
		l = m.Attach.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *Attach) Size() (n int) {
	var l int
	_ = l
	if m.Draw {
		n += 2
	}
	if m.Power != 0 {
		n += 1 + sovMail(uint64(m.Power))
	}
	if m.Faith != 0 {
		n += 1 + sovMail(uint64(m.Faith))
	}
	if m.GayPoint != 0 {
		n += 1 + sovMail(uint64(m.GayPoint))
	}
	if m.Diamond != 0 {
		n += 1 + sovMail(uint64(m.Diamond))
	}
	if len(m.Believer) > 0 {
		for _, e := range m.Believer {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *GetMail) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMail(uint64(m.Uid))
	}
	if m.BeforeTime != 0 {
		n += 1 + sovMail(uint64(m.BeforeTime))
	}
	if m.Count != 0 {
		n += 1 + sovMail(uint64(m.Count))
	}
	if m.Offset != 0 {
		n += 1 + sovMail(uint64(m.Offset))
	}
	return n
}

func (m *GetMailRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Mail) > 0 {
		for _, e := range m.Mail {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *GetAllMail) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMail(uint64(m.Uid))
	}
	return n
}

func (m *GetAllMailRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Mail) > 0 {
		for _, e := range m.Mail {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *DrawMail) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMail(uint64(m.Uid))
	}
	if m.MailID != 0 {
		n += 1 + sovMail(uint64(m.MailID))
	}
	return n
}

func (m *DrawMailRet) Size() (n int) {
	var l int
	_ = l
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *RemoveMail) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMail(uint64(m.Uid))
	}
	if len(m.MailID) > 0 {
		l = 0
		for _, e := range m.MailID {
			l += sovMail(uint64(e))
		}
		n += 1 + sovMail(uint64(l)) + l
	}
	return n
}

func (m *RemoveMailRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *CreateMail) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMail(uint64(m.Uid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.MailAttach)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *CreateMailRet) Size() (n int) {
	var l int
	_ = l
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *Notice) Size() (n int) {
	var l int
	_ = l
	if m.NoticeID != 0 {
		n += 1 + sovMail(uint64(m.NoticeID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovMail(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovMail(uint64(m.End))
	}
	if m.Status != 0 {
		n += 1 + sovMail(uint64(m.Status))
	}
	return n
}

func (m *GetOnNotices) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovMail(uint64(m.Status))
	}
	return n
}

func (m *GetOnNoticesRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Notices) > 0 {
		for _, e := range m.Notices {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func sovMail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMail(x uint64) (n int) {
	return sovMail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attach", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attach == nil {
				m.Attach = &Attach{}
			}
			if err := m.Attach.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attach) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attach: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attach: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Draw = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GayPoint", wireType)
			}
			m.GayPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GayPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believer = append(m.Believer, &BelieverInfo{})
			if err := m.Believer[len(m.Believer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &BagItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeTime", wireType)
			}
			m.BeforeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMailRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_mail_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_mail_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = append(m.Mail, &Mail{})
			if err := m.Mail[len(m.Mail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_all_mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_all_mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMailRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_all_mail_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_all_mail_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = append(m.Mail, &Mail{})
			if err := m.Mail[len(m.Mail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: draw_mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: draw_mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailID", wireType)
			}
			m.MailID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawMailRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: draw_mail_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: draw_mail_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &Mail{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MailID = append(m.MailID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMail
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MailID = append(m.MailID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MailID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMailRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_mail_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_mail_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: create_mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: create_mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailAttach", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailAttach = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMailRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: create_mail_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: create_mail_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &Mail{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Notice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeID", wireType)
			}
			m.NoticeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOnNotices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_on_notices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_on_notices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOnNoticesRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_on_notices_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_on_notices_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notices = append(m.Notices, &Notice{})
			if err := m.Notices[len(m.Notices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMail   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mail.proto", fileDescriptorMail) }

var fileDescriptorMail = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xd6, 0xc6, 0xb1, 0x9b, 0x4e, 0x4a, 0x1a, 0xad, 0xaa, 0x62, 0xf5, 0x10, 0x59, 0x7b, 0x40,
	0x86, 0x43, 0x0e, 0x89, 0x0a, 0x57, 0x08, 0xbd, 0xe4, 0xc0, 0x8f, 0x56, 0x70, 0x8e, 0xb6, 0xf6,
	0x26, 0x5d, 0x64, 0x7b, 0x2b, 0x7b, 0xd3, 0x88, 0xf7, 0xe0, 0x19, 0x78, 0x16, 0x8e, 0xdc, 0xb9,
	0xa0, 0x3c, 0x09, 0xda, 0x1f, 0xff, 0x14, 0x14, 0x29, 0x9c, 0x3c, 0xdf, 0xfc, 0x7e, 0x33, 0x3b,
	0x63, 0x80, 0x9c, 0x89, 0x6c, 0x7a, 0x5f, 0x4a, 0x25, 0xf1, 0xc0, 0x7c, 0x12, 0x99, 0x5d, 0x8d,
	0x18, 0x4b, 0x64, 0x9e, 0xcb, 0xc2, 0x5a, 0xc8, 0x77, 0x04, 0xfd, 0x77, 0x4c, 0x64, 0x78, 0x04,
	0x3d, 0x91, 0x86, 0x28, 0x42, 0xb1, 0x47, 0x7b, 0x22, 0xc5, 0x17, 0xe0, 0xcb, 0x5d, 0xc1, 0xcb,
	0xb0, 0x17, 0xa1, 0xd8, 0xa7, 0x16, 0x68, 0xad, 0x12, 0x2a, 0xe3, 0xa1, 0x17, 0xa1, 0xf8, 0x94,
	0x5a, 0x80, 0x43, 0x38, 0x49, 0x64, 0xa1, 0x78, 0xa1, 0xc2, 0xbe, 0xd1, 0xd7, 0x10, 0x4f, 0x00,
	0x92, 0x92, 0x33, 0xc5, 0x3f, 0x89, 0x9c, 0x87, 0xbe, 0xc9, 0xde, 0xd1, 0xe0, 0x18, 0x02, 0xa6,
	0x14, 0x4b, 0xee, 0xc2, 0x20, 0x42, 0xf1, 0x70, 0x36, 0x9e, 0xd6, 0x4c, 0xa7, 0x6f, 0x8c, 0x9e,
	0x3a, 0x3b, 0xf9, 0x85, 0x20, 0xb0, 0x2a, 0x8c, 0xa1, 0x9f, 0x96, 0x6c, 0x67, 0xc8, 0x0e, 0xa8,
	0x91, 0x35, 0xb1, 0x7b, 0xb9, 0x6b, 0xe9, 0x1a, 0xa0, 0xb5, 0x6b, 0x26, 0xd4, 0x9d, 0xa1, 0xeb,
	0x53, 0x0b, 0xf0, 0x15, 0x0c, 0x36, 0xec, 0xeb, 0x47, 0x29, 0x1c, 0x5f, 0x9f, 0x36, 0x58, 0xb7,
	0x92, 0x0a, 0x96, 0xcb, 0x22, 0x35, 0x6c, 0x7d, 0x5a, 0x43, 0x3c, 0x87, 0xc1, 0x82, 0x67, 0x82,
	0x3f, 0xf0, 0x32, 0x0c, 0x22, 0x2f, 0x1e, 0xce, 0x9e, 0xb6, 0x64, 0x6f, 0x9d, 0x65, 0x25, 0x8a,
	0xb5, 0xa4, 0x8d, 0x23, 0x7e, 0x06, 0xfd, 0xa5, 0xe2, 0x79, 0x78, 0x62, 0x02, 0x70, 0x27, 0x80,
	0x6d, 0x56, 0x42, 0xf1, 0x9c, 0x1a, 0x3b, 0xf9, 0x02, 0x83, 0x0d, 0x57, 0x2b, 0xfd, 0x64, 0x78,
	0x0c, 0xde, 0x67, 0xf7, 0x14, 0x3e, 0xd5, 0xa2, 0x9e, 0xe2, 0x82, 0xaf, 0x65, 0x69, 0xa7, 0xd8,
	0xb3, 0x53, 0x6c, 0x35, 0xba, 0xcd, 0xb7, 0x72, 0x5b, 0xa8, 0xba, 0x4d, 0x03, 0xf0, 0x25, 0x04,
	0x1f, 0xd6, 0xeb, 0x8a, 0xdb, 0x26, 0x3d, 0xea, 0x10, 0x99, 0xc1, 0x59, 0x5d, 0x6b, 0x55, 0x72,
	0x85, 0x09, 0xf4, 0xb5, 0x1c, 0x22, 0xc3, 0x71, 0xd4, 0x72, 0xd4, 0x7b, 0x41, 0x8d, 0x8d, 0x44,
	0x36, 0x86, 0x65, 0x59, 0xc3, 0x71, 0xdb, 0x72, 0xdc, 0x8a, 0x94, 0xbc, 0x84, 0x71, 0xd7, 0xe3,
	0xe8, 0xcc, 0xd7, 0x70, 0xaa, 0x1f, 0xf0, 0x40, 0x5a, 0xdd, 0x84, 0xb6, 0x2c, 0x6f, 0x5c, 0xdb,
	0x0e, 0x91, 0x39, 0x3c, 0x69, 0xc2, 0xfe, 0xaa, 0x85, 0x0e, 0xd6, 0x7a, 0x05, 0xc3, 0x92, 0xe7,
	0xf2, 0x81, 0x1f, 0x53, 0xcd, 0xeb, 0x54, 0x7b, 0x0e, 0xe7, 0x9d, 0x40, 0x53, 0xef, 0x12, 0x82,
	0x92, 0x57, 0xdb, 0x4c, 0xb9, 0x35, 0x74, 0x88, 0x48, 0x18, 0xda, 0xfd, 0x3e, 0x54, 0xa3, 0x39,
	0xa1, 0xde, 0x81, 0x13, 0xf2, 0xfe, 0x39, 0x21, 0x9d, 0xc9, 0xee, 0xbe, 0xbb, 0xaf, 0x8e, 0x86,
	0x5c, 0xc3, 0x79, 0xa7, 0xe0, 0xd1, 0xb3, 0xf8, 0x86, 0x20, 0x78, 0x2f, 0x95, 0x48, 0xb8, 0xbe,
	0x87, 0xc2, 0x48, 0xcb, 0x1b, 0x47, 0xb4, 0xc1, 0xff, 0xcd, 0xf6, 0x02, 0xfc, 0x4a, 0xb1, 0xb2,
	0xde, 0x39, 0x0b, 0xf4, 0x14, 0xb8, 0xbb, 0x28, 0x8f, 0x6a, 0x51, 0x8f, 0xaf, 0x52, 0x4c, 0x6d,
	0x2b, 0x73, 0xf8, 0x3e, 0x75, 0x88, 0xc4, 0x30, 0xd2, 0x6b, 0x24, 0x8b, 0x95, 0xa5, 0x50, 0x75,
	0x3c, 0xd1, 0x23, 0xcf, 0xd7, 0x80, 0x1f, 0x7b, 0x9a, 0xd6, 0x5f, 0xc0, 0x89, 0x83, 0x6e, 0xeb,
	0x3a, 0x7f, 0x14, 0xdb, 0x2e, 0xad, 0x1d, 0x16, 0x67, 0x3f, 0xf6, 0x13, 0xf4, 0x73, 0x3f, 0x41,
	0xbf, 0xf7, 0x13, 0x74, 0x1b, 0x18, 0xbf, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0xc9,
	0x06, 0x10, 0x38, 0x05, 0x00, 0x00,
}
