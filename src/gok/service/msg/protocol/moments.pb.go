// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: moments.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 朋友圈信息
type MomentInfo struct {
	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// string nickname = 3;     //昵称
	// string avatar = 4;       //头像地址
	CreateTime int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Data       string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MomentInfo) Reset()                    { *m = MomentInfo{} }
func (m *MomentInfo) String() string            { return proto.CompactTextString(m) }
func (*MomentInfo) ProtoMessage()               {}
func (*MomentInfo) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{0} }

func (m *MomentInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MomentInfo) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MomentInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *MomentInfo) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 获取用户详细信息
type GetUserDetail struct {
	Uid []int32 `protobuf:"varint,1,rep,packed,name=uid" json:"uid,omitempty"`
}

func (m *GetUserDetail) Reset()                    { *m = GetUserDetail{} }
func (m *GetUserDetail) String() string            { return proto.CompactTextString(m) }
func (*GetUserDetail) ProtoMessage()               {}
func (*GetUserDetail) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{1} }

func (m *GetUserDetail) GetUid() []int32 {
	if m != nil {
		return m.Uid
	}
	return nil
}

type GetUserDetailRet struct {
	UserDetail []*UserDetail `protobuf:"bytes,1,rep,name=userDetail" json:"userDetail,omitempty"`
}

func (m *GetUserDetailRet) Reset()                    { *m = GetUserDetailRet{} }
func (m *GetUserDetailRet) String() string            { return proto.CompactTextString(m) }
func (*GetUserDetailRet) ProtoMessage()               {}
func (*GetUserDetailRet) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{2} }

func (m *GetUserDetailRet) GetUserDetail() []*UserDetail {
	if m != nil {
		return m.UserDetail
	}
	return nil
}

type UserDetail struct {
	Uid      int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *UserDetail) Reset()                    { *m = UserDetail{} }
func (m *UserDetail) String() string            { return proto.CompactTextString(m) }
func (*UserDetail) ProtoMessage()               {}
func (*UserDetail) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{3} }

func (m *UserDetail) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserDetail) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserDetail) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

// 发布朋友圈消息
type PublicMoment struct {
	Uid   int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type  int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	RefID int32 `protobuf:"varint,3,opt,name=refID,proto3" json:"refID,omitempty"`
}

func (m *PublicMoment) Reset()                    { *m = PublicMoment{} }
func (m *PublicMoment) String() string            { return proto.CompactTextString(m) }
func (*PublicMoment) ProtoMessage()               {}
func (*PublicMoment) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{4} }

func (m *PublicMoment) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PublicMoment) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PublicMoment) GetRefID() int32 {
	if m != nil {
		return m.RefID
	}
	return 0
}

// 发布朋友圈消息结果
type PublicMomentRet struct {
	MomentInfo *MomentInfo `protobuf:"bytes,1,opt,name=momentInfo" json:"momentInfo,omitempty"`
}

func (m *PublicMomentRet) Reset()                    { *m = PublicMomentRet{} }
func (m *PublicMomentRet) String() string            { return proto.CompactTextString(m) }
func (*PublicMomentRet) ProtoMessage()               {}
func (*PublicMomentRet) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{5} }

func (m *PublicMomentRet) GetMomentInfo() *MomentInfo {
	if m != nil {
		return m.MomentInfo
	}
	return nil
}

type RemoveMoments struct {
	Uid       int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	MomentsID []string `protobuf:"bytes,2,rep,name=momentsID" json:"momentsID,omitempty"`
	SaleID    int32    `protobuf:"varint,3,opt,name=saleID,proto3" json:"saleID,omitempty"`
}

func (m *RemoveMoments) Reset()                    { *m = RemoveMoments{} }
func (m *RemoveMoments) String() string            { return proto.CompactTextString(m) }
func (*RemoveMoments) ProtoMessage()               {}
func (*RemoveMoments) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{6} }

func (m *RemoveMoments) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RemoveMoments) GetMomentsID() []string {
	if m != nil {
		return m.MomentsID
	}
	return nil
}

func (m *RemoveMoments) GetSaleID() int32 {
	if m != nil {
		return m.SaleID
	}
	return 0
}

type RemoveMomentsRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *RemoveMomentsRet) Reset()                    { *m = RemoveMomentsRet{} }
func (m *RemoveMomentsRet) String() string            { return proto.CompactTextString(m) }
func (*RemoveMomentsRet) ProtoMessage()               {}
func (*RemoveMomentsRet) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{7} }

func (m *RemoveMomentsRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 获取用户收到的朋友圈消息
type GetReceiveMoments struct {
	Uid        int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BeforeTime int64 `protobuf:"varint,2,opt,name=beforeTime,proto3" json:"beforeTime,omitempty"`
	Count      int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Offset     int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *GetReceiveMoments) Reset()                    { *m = GetReceiveMoments{} }
func (m *GetReceiveMoments) String() string            { return proto.CompactTextString(m) }
func (*GetReceiveMoments) ProtoMessage()               {}
func (*GetReceiveMoments) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{8} }

func (m *GetReceiveMoments) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetReceiveMoments) GetBeforeTime() int64 {
	if m != nil {
		return m.BeforeTime
	}
	return 0
}

func (m *GetReceiveMoments) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetReceiveMoments) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetReceiveMomentsRet struct {
	Moments []*MomentInfo `protobuf:"bytes,1,rep,name=moments" json:"moments,omitempty"`
}

func (m *GetReceiveMomentsRet) Reset()                    { *m = GetReceiveMomentsRet{} }
func (m *GetReceiveMomentsRet) String() string            { return proto.CompactTextString(m) }
func (*GetReceiveMomentsRet) ProtoMessage()               {}
func (*GetReceiveMomentsRet) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{9} }

func (m *GetReceiveMomentsRet) GetMoments() []*MomentInfo {
	if m != nil {
		return m.Moments
	}
	return nil
}

// 获取指定用户发布的朋友圈信息
type GetPublicMoments struct {
	Uid        int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BeforeTime int64 `protobuf:"varint,2,opt,name=beforeTime,proto3" json:"beforeTime,omitempty"`
	Count      int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Offset     int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *GetPublicMoments) Reset()                    { *m = GetPublicMoments{} }
func (m *GetPublicMoments) String() string            { return proto.CompactTextString(m) }
func (*GetPublicMoments) ProtoMessage()               {}
func (*GetPublicMoments) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{10} }

func (m *GetPublicMoments) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetPublicMoments) GetBeforeTime() int64 {
	if m != nil {
		return m.BeforeTime
	}
	return 0
}

func (m *GetPublicMoments) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetPublicMoments) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetPublicMomentsRet struct {
	Moments []*MomentInfo `protobuf:"bytes,1,rep,name=moments" json:"moments,omitempty"`
}

func (m *GetPublicMomentsRet) Reset()                    { *m = GetPublicMomentsRet{} }
func (m *GetPublicMomentsRet) String() string            { return proto.CompactTextString(m) }
func (*GetPublicMomentsRet) ProtoMessage()               {}
func (*GetPublicMomentsRet) Descriptor() ([]byte, []int) { return fileDescriptorMoments, []int{11} }

func (m *GetPublicMomentsRet) GetMoments() []*MomentInfo {
	if m != nil {
		return m.Moments
	}
	return nil
}

func init() {
	proto.RegisterType((*MomentInfo)(nil), "protocol.moment_info")
	proto.RegisterType((*GetUserDetail)(nil), "protocol.get_user_detail")
	proto.RegisterType((*GetUserDetailRet)(nil), "protocol.get_user_detail_ret")
	proto.RegisterType((*UserDetail)(nil), "protocol.user_detail")
	proto.RegisterType((*PublicMoment)(nil), "protocol.public_moment")
	proto.RegisterType((*PublicMomentRet)(nil), "protocol.public_moment_ret")
	proto.RegisterType((*RemoveMoments)(nil), "protocol.remove_moments")
	proto.RegisterType((*RemoveMomentsRet)(nil), "protocol.remove_moments_ret")
	proto.RegisterType((*GetReceiveMoments)(nil), "protocol.get_receive_moments")
	proto.RegisterType((*GetReceiveMomentsRet)(nil), "protocol.get_receive_moments_ret")
	proto.RegisterType((*GetPublicMoments)(nil), "protocol.get_public_moments")
	proto.RegisterType((*GetPublicMomentsRet)(nil), "protocol.get_public_moments_ret")
}
func (m *MomentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MomentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMoments(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Uid))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.CreateTime))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMoments(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *GetUserDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA2 := make([]byte, len(m.Uid)*10)
		var j1 int
		for _, num1 := range m.Uid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMoments(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GetUserDetailRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserDetailRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserDetail) > 0 {
		for _, msg := range m.UserDetail {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMoments(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UserDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Uid))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMoments(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMoments(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	return i, nil
}

func (m *PublicMoment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicMoment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Uid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Type))
	}
	if m.RefID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.RefID))
	}
	return i, nil
}

func (m *PublicMomentRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicMomentRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MomentInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.MomentInfo.Size()))
		n3, err := m.MomentInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *RemoveMoments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMoments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Uid))
	}
	if len(m.MomentsID) > 0 {
		for _, s := range m.MomentsID {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SaleID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.SaleID))
	}
	return i, nil
}

func (m *RemoveMomentsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMomentsRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetReceiveMoments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReceiveMoments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Uid))
	}
	if m.BeforeTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.BeforeTime))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Count))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *GetReceiveMomentsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReceiveMomentsRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Moments) > 0 {
		for _, msg := range m.Moments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMoments(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetPublicMoments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPublicMoments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Uid))
	}
	if m.BeforeTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.BeforeTime))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Count))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMoments(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *GetPublicMomentsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPublicMomentsRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Moments) > 0 {
		for _, msg := range m.Moments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMoments(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMoments(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MomentInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMoments(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovMoments(uint64(m.Uid))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMoments(uint64(m.CreateTime))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMoments(uint64(l))
	}
	return n
}

func (m *GetUserDetail) Size() (n int) {
	var l int
	_ = l
	if len(m.Uid) > 0 {
		l = 0
		for _, e := range m.Uid {
			l += sovMoments(uint64(e))
		}
		n += 1 + sovMoments(uint64(l)) + l
	}
	return n
}

func (m *GetUserDetailRet) Size() (n int) {
	var l int
	_ = l
	if len(m.UserDetail) > 0 {
		for _, e := range m.UserDetail {
			l = e.Size()
			n += 1 + l + sovMoments(uint64(l))
		}
	}
	return n
}

func (m *UserDetail) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMoments(uint64(m.Uid))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovMoments(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovMoments(uint64(l))
	}
	return n
}

func (m *PublicMoment) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMoments(uint64(m.Uid))
	}
	if m.Type != 0 {
		n += 1 + sovMoments(uint64(m.Type))
	}
	if m.RefID != 0 {
		n += 1 + sovMoments(uint64(m.RefID))
	}
	return n
}

func (m *PublicMomentRet) Size() (n int) {
	var l int
	_ = l
	if m.MomentInfo != nil {
		l = m.MomentInfo.Size()
		n += 1 + l + sovMoments(uint64(l))
	}
	return n
}

func (m *RemoveMoments) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMoments(uint64(m.Uid))
	}
	if len(m.MomentsID) > 0 {
		for _, s := range m.MomentsID {
			l = len(s)
			n += 1 + l + sovMoments(uint64(l))
		}
	}
	if m.SaleID != 0 {
		n += 1 + sovMoments(uint64(m.SaleID))
	}
	return n
}

func (m *RemoveMomentsRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *GetReceiveMoments) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMoments(uint64(m.Uid))
	}
	if m.BeforeTime != 0 {
		n += 1 + sovMoments(uint64(m.BeforeTime))
	}
	if m.Count != 0 {
		n += 1 + sovMoments(uint64(m.Count))
	}
	if m.Offset != 0 {
		n += 1 + sovMoments(uint64(m.Offset))
	}
	return n
}

func (m *GetReceiveMomentsRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Moments) > 0 {
		for _, e := range m.Moments {
			l = e.Size()
			n += 1 + l + sovMoments(uint64(l))
		}
	}
	return n
}

func (m *GetPublicMoments) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMoments(uint64(m.Uid))
	}
	if m.BeforeTime != 0 {
		n += 1 + sovMoments(uint64(m.BeforeTime))
	}
	if m.Count != 0 {
		n += 1 + sovMoments(uint64(m.Count))
	}
	if m.Offset != 0 {
		n += 1 + sovMoments(uint64(m.Offset))
	}
	return n
}

func (m *GetPublicMomentsRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Moments) > 0 {
		for _, e := range m.Moments {
			l = e.Size()
			n += 1 + l + sovMoments(uint64(l))
		}
	}
	return n
}

func sovMoments(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMoments(x uint64) (n int) {
	return sovMoments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MomentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: moment_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: moment_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_user_detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_user_detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMoments
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMoments
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMoments
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMoments
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserDetailRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_user_detail_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_user_detail_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDetail = append(m.UserDetail, &UserDetail{})
			if err := m.UserDetail[len(m.UserDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: user_detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: user_detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicMoment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_moment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_moment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefID", wireType)
			}
			m.RefID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicMomentRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_moment_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_moment_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MomentInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MomentInfo == nil {
				m.MomentInfo = &MomentInfo{}
			}
			if err := m.MomentInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMoments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_moments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_moments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MomentsID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MomentsID = append(m.MomentsID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleID", wireType)
			}
			m.SaleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMomentsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_moments_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_moments_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReceiveMoments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_receive_moments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_receive_moments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeTime", wireType)
			}
			m.BeforeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReceiveMomentsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_receive_moments_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_receive_moments_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moments = append(m.Moments, &MomentInfo{})
			if err := m.Moments[len(m.Moments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPublicMoments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_public_moments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_public_moments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeTime", wireType)
			}
			m.BeforeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPublicMomentsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_public_moments_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_public_moments_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMoments
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moments = append(m.Moments, &MomentInfo{})
			if err := m.Moments[len(m.Moments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMoments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMoments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMoments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMoments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMoments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMoments
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMoments
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMoments(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMoments = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMoments   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("moments.proto", fileDescriptorMoments) }

var fileDescriptorMoments = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x25, 0x49, 0x5b, 0x9b, 0x5b, 0xdf, 0x53, 0x47, 0xad, 0x41, 0x24, 0x84, 0x71, 0xd3, 0x85,
	0x54, 0x50, 0xfc, 0x01, 0xe9, 0xa6, 0x4f, 0x57, 0xa3, 0x0b, 0x77, 0x61, 0x9a, 0xdc, 0xc8, 0x60,
	0x92, 0x29, 0x93, 0xc9, 0x03, 0xff, 0xd0, 0xa5, 0x9f, 0x20, 0xfd, 0x12, 0xc9, 0xcd, 0xa4, 0x2f,
	0xb5, 0xc5, 0x85, 0xe0, 0x2a, 0x73, 0x6e, 0x0e, 0xe7, 0x9e, 0x73, 0xef, 0x85, 0xab, 0x4a, 0x57,
	0x58, 0xdb, 0x66, 0xbd, 0x37, 0xda, 0x6a, 0x36, 0xa7, 0x4f, 0xa6, 0x4b, 0x9e, 0xc1, 0xa2, 0xff,
	0x95, 0xaa, 0xba, 0xd0, 0xec, 0x1a, 0x7c, 0x95, 0x47, 0x5e, 0xe2, 0xad, 0x42, 0xe1, 0xab, 0x9c,
	0x3d, 0x84, 0xa0, 0x55, 0x79, 0xe4, 0x27, 0xde, 0x6a, 0x2a, 0xba, 0x27, 0x8b, 0x01, 0x32, 0x83,
	0xd2, 0xe2, 0x67, 0x55, 0x61, 0x14, 0x24, 0xde, 0x2a, 0x10, 0xa3, 0x0a, 0x63, 0x30, 0xc9, 0xa5,
	0x95, 0xd1, 0x84, 0x34, 0xe8, 0xcd, 0x5f, 0xc2, 0x83, 0xaf, 0x68, 0xd3, 0xb6, 0x41, 0x93, 0xe6,
	0x68, 0xa5, 0x2a, 0x07, 0x61, 0x2f, 0x09, 0x9c, 0x30, 0xff, 0x08, 0x8f, 0xff, 0x20, 0xa5, 0x06,
	0x2d, 0x7b, 0x07, 0xd0, 0x95, 0x36, 0x54, 0x21, 0xfe, 0xe2, 0xcd, 0xd3, 0xf5, 0xe0, 0x7f, 0x3d,
	0xa2, 0x8b, 0x11, 0x91, 0x7f, 0x82, 0xc5, 0xc5, 0x76, 0xc7, 0x1c, 0xcf, 0x61, 0x5e, 0xab, 0xec,
	0x5b, 0x2d, 0x2b, 0xa4, 0x78, 0xa1, 0x38, 0x62, 0xb6, 0x84, 0x99, 0xbc, 0x95, 0x56, 0x1a, 0xca,
	0x17, 0x0a, 0x87, 0xf8, 0x07, 0xb8, 0xda, 0xb7, 0xbb, 0x52, 0x65, 0x69, 0x3f, 0xb3, 0x0b, 0xb2,
	0x0c, 0x26, 0xf6, 0xfb, 0x1e, 0xdd, 0xc4, 0xe8, 0xcd, 0x9e, 0xc0, 0xd4, 0x60, 0xb1, 0xdd, 0x90,
	0xda, 0x54, 0xf4, 0x80, 0xdf, 0xc0, 0xa3, 0x13, 0xb1, 0x21, 0x6d, 0x8f, 0xb6, 0x75, 0xa1, 0x49,
	0xf7, 0x24, 0xed, 0x68, 0x55, 0x62, 0x44, 0xe4, 0x5f, 0xe0, 0xda, 0x60, 0xa5, 0x6f, 0xd1, 0x69,
	0x35, 0x17, 0x9c, 0xbd, 0x80, 0xd0, 0xfd, 0xdc, 0x6e, 0x22, 0x3f, 0x09, 0x56, 0xa1, 0xb8, 0x2b,
	0x74, 0x91, 0x1b, 0x59, 0xe2, 0xd1, 0xa4, 0x43, 0xfc, 0x15, 0xb0, 0x53, 0x65, 0xb2, 0xb9, 0x84,
	0x99, 0xc1, 0xa6, 0x2d, 0x2d, 0x35, 0x98, 0x0b, 0x87, 0x78, 0xdb, 0xef, 0xd0, 0x60, 0x86, 0xea,
	0xaf, 0x66, 0x62, 0x80, 0x1d, 0x16, 0xda, 0xf4, 0x57, 0xe4, 0xf7, 0x57, 0x74, 0x57, 0xe9, 0x46,
	0x96, 0xe9, 0xb6, 0xb6, 0xc3, 0xc8, 0x08, 0x74, 0x6d, 0x75, 0x51, 0x34, 0x68, 0xe9, 0xba, 0xa6,
	0xc2, 0x21, 0x7e, 0x03, 0xcf, 0x2e, 0xb4, 0x25, 0xa7, 0xaf, 0xe1, 0x9e, 0x83, 0xe7, 0xb7, 0x33,
	0x9e, 0xe6, 0xc0, 0xe2, 0x16, 0x58, 0xa7, 0x75, 0xb2, 0x9a, 0xff, 0x9f, 0x60, 0x0b, 0xcb, 0xf3,
	0xae, 0xff, 0x14, 0xe0, 0xfd, 0xfd, 0x1f, 0x87, 0xd8, 0xfb, 0x79, 0x88, 0xbd, 0x5f, 0x87, 0xd8,
	0xdb, 0xcd, 0x88, 0xfc, 0xf6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x8f, 0x3c, 0x54, 0x01,
	0x04, 0x00, 0x00,
}
