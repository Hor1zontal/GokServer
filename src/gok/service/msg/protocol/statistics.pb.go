// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: statistics.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetStarStatistics struct {
	Uid    int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	StarID int32 `protobuf:"varint,2,opt,name=starID,proto3" json:"starID,omitempty"`
}

func (m *GetStarStatistics) Reset()                    { *m = GetStarStatistics{} }
func (m *GetStarStatistics) String() string            { return proto.CompactTextString(m) }
func (*GetStarStatistics) ProtoMessage()               {}
func (*GetStarStatistics) Descriptor() ([]byte, []int) { return fileDescriptorStatistics, []int{0} }

func (m *GetStarStatistics) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetStarStatistics) GetStarID() int32 {
	if m != nil {
		return m.StarID
	}
	return 0
}

type GetStarStatisticsRet struct {
	Uid        int32         `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	StarID     int32         `protobuf:"varint,2,opt,name=starID,proto3" json:"starID,omitempty"`
	Statistics []*Statistics `protobuf:"bytes,3,rep,name=statistics" json:"statistics,omitempty"`
}

func (m *GetStarStatisticsRet) Reset()                    { *m = GetStarStatisticsRet{} }
func (m *GetStarStatisticsRet) String() string            { return proto.CompactTextString(m) }
func (*GetStarStatisticsRet) ProtoMessage()               {}
func (*GetStarStatisticsRet) Descriptor() ([]byte, []int) { return fileDescriptorStatistics, []int{1} }

func (m *GetStarStatisticsRet) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetStarStatisticsRet) GetStarID() int32 {
	if m != nil {
		return m.StarID
	}
	return 0
}

func (m *GetStarStatisticsRet) GetStatistics() []*Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type UpdateStarStatistics struct {
	Uid    int32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Id     int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Change float64 `protobuf:"fixed64,3,opt,name=change,proto3" json:"change,omitempty"`
	Param  int32   `protobuf:"varint,4,opt,name=param,proto3" json:"param,omitempty"`
}

func (m *UpdateStarStatistics) Reset()                    { *m = UpdateStarStatistics{} }
func (m *UpdateStarStatistics) String() string            { return proto.CompactTextString(m) }
func (*UpdateStarStatistics) ProtoMessage()               {}
func (*UpdateStarStatistics) Descriptor() ([]byte, []int) { return fileDescriptorStatistics, []int{2} }

func (m *UpdateStarStatistics) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateStarStatistics) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateStarStatistics) GetChange() float64 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *UpdateStarStatistics) GetParam() int32 {
	if m != nil {
		return m.Param
	}
	return 0
}

type UpdateStarStatisticsRet struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UpdateStarStatisticsRet) Reset()         { *m = UpdateStarStatisticsRet{} }
func (m *UpdateStarStatisticsRet) String() string { return proto.CompactTextString(m) }
func (*UpdateStarStatisticsRet) ProtoMessage()    {}
func (*UpdateStarStatisticsRet) Descriptor() ([]byte, []int) {
	return fileDescriptorStatistics, []int{3}
}

func (m *UpdateStarStatisticsRet) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GetStarHistory struct {
	StarID int32 `protobuf:"varint,1,opt,name=starID,proto3" json:"starID,omitempty"`
	Uid    int32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetStarHistory) Reset()                    { *m = GetStarHistory{} }
func (m *GetStarHistory) String() string            { return proto.CompactTextString(m) }
func (*GetStarHistory) ProtoMessage()               {}
func (*GetStarHistory) Descriptor() ([]byte, []int) { return fileDescriptorStatistics, []int{4} }

func (m *GetStarHistory) GetStarID() int32 {
	if m != nil {
		return m.StarID
	}
	return 0
}

func (m *GetStarHistory) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetStarHistoryRet struct {
	StarID  int32      `protobuf:"varint,1,opt,name=starID,proto3" json:"starID,omitempty"`
	Uid     int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	History []*History `protobuf:"bytes,3,rep,name=history" json:"history,omitempty"`
	Time    []int64    `protobuf:"varint,4,rep,packed,name=time" json:"time,omitempty"`
}

func (m *GetStarHistoryRet) Reset()                    { *m = GetStarHistoryRet{} }
func (m *GetStarHistoryRet) String() string            { return proto.CompactTextString(m) }
func (*GetStarHistoryRet) ProtoMessage()               {}
func (*GetStarHistoryRet) Descriptor() ([]byte, []int) { return fileDescriptorStatistics, []int{5} }

func (m *GetStarHistoryRet) GetStarID() int32 {
	if m != nil {
		return m.StarID
	}
	return 0
}

func (m *GetStarHistoryRet) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetStarHistoryRet) GetHistory() []*History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *GetStarHistoryRet) GetTime() []int64 {
	if m != nil {
		return m.Time
	}
	return nil
}

type History struct {
	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Param1 int32  `protobuf:"varint,2,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2 int32  `protobuf:"varint,3,opt,name=param2,proto3" json:"param2,omitempty"`
	Param3 string `protobuf:"bytes,4,opt,name=param3,proto3" json:"param3,omitempty"`
	Time   int64  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *History) Reset()                    { *m = History{} }
func (m *History) String() string            { return proto.CompactTextString(m) }
func (*History) ProtoMessage()               {}
func (*History) Descriptor() ([]byte, []int) { return fileDescriptorStatistics, []int{6} }

func (m *History) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *History) GetParam1() int32 {
	if m != nil {
		return m.Param1
	}
	return 0
}

func (m *History) GetParam2() int32 {
	if m != nil {
		return m.Param2
	}
	return 0
}

func (m *History) GetParam3() string {
	if m != nil {
		return m.Param3
	}
	return ""
}

func (m *History) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*GetStarStatistics)(nil), "protocol.get_star_statistics")
	proto.RegisterType((*GetStarStatisticsRet)(nil), "protocol.get_star_statistics_ret")
	proto.RegisterType((*UpdateStarStatistics)(nil), "protocol.update_star_statistics")
	proto.RegisterType((*UpdateStarStatisticsRet)(nil), "protocol.update_star_statistics_ret")
	proto.RegisterType((*GetStarHistory)(nil), "protocol.get_star_history")
	proto.RegisterType((*GetStarHistoryRet)(nil), "protocol.get_star_history_ret")
	proto.RegisterType((*History)(nil), "protocol.History")
}
func (m *GetStarStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStarStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Uid))
	}
	if m.StarID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.StarID))
	}
	return i, nil
}

func (m *GetStarStatisticsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStarStatisticsRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Uid))
	}
	if m.StarID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.StarID))
	}
	if len(m.Statistics) > 0 {
		for _, msg := range m.Statistics {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStatistics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateStarStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStarStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Uid))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Id))
	}
	if m.Change != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Change))))
		i += 8
	}
	if m.Param != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Param))
	}
	return i, nil
}

func (m *UpdateStarStatisticsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStarStatisticsRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	return i, nil
}

func (m *GetStarHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStarHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.StarID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetStarHistoryRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStarHistoryRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.StarID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Uid))
	}
	if len(m.History) > 0 {
		for _, msg := range m.History {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStatistics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Time) > 0 {
		dAtA2 := make([]byte, len(m.Time)*10)
		var j1 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *History) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *History) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Id))
	}
	if m.Param1 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Param1))
	}
	if m.Param2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Param2))
	}
	if len(m.Param3) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(len(m.Param3)))
		i += copy(dAtA[i:], m.Param3)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStatistics(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func encodeVarintStatistics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetStarStatistics) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovStatistics(uint64(m.Uid))
	}
	if m.StarID != 0 {
		n += 1 + sovStatistics(uint64(m.StarID))
	}
	return n
}

func (m *GetStarStatisticsRet) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovStatistics(uint64(m.Uid))
	}
	if m.StarID != 0 {
		n += 1 + sovStatistics(uint64(m.StarID))
	}
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.Size()
			n += 1 + l + sovStatistics(uint64(l))
		}
	}
	return n
}

func (m *UpdateStarStatistics) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovStatistics(uint64(m.Uid))
	}
	if m.Id != 0 {
		n += 1 + sovStatistics(uint64(m.Id))
	}
	if m.Change != 0 {
		n += 9
	}
	if m.Param != 0 {
		n += 1 + sovStatistics(uint64(m.Param))
	}
	return n
}

func (m *UpdateStarStatisticsRet) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *GetStarHistory) Size() (n int) {
	var l int
	_ = l
	if m.StarID != 0 {
		n += 1 + sovStatistics(uint64(m.StarID))
	}
	if m.Uid != 0 {
		n += 1 + sovStatistics(uint64(m.Uid))
	}
	return n
}

func (m *GetStarHistoryRet) Size() (n int) {
	var l int
	_ = l
	if m.StarID != 0 {
		n += 1 + sovStatistics(uint64(m.StarID))
	}
	if m.Uid != 0 {
		n += 1 + sovStatistics(uint64(m.Uid))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovStatistics(uint64(l))
		}
	}
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovStatistics(uint64(e))
		}
		n += 1 + sovStatistics(uint64(l)) + l
	}
	return n
}

func (m *History) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStatistics(uint64(m.Id))
	}
	if m.Param1 != 0 {
		n += 1 + sovStatistics(uint64(m.Param1))
	}
	if m.Param2 != 0 {
		n += 1 + sovStatistics(uint64(m.Param2))
	}
	l = len(m.Param3)
	if l > 0 {
		n += 1 + l + sovStatistics(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovStatistics(uint64(m.Time))
	}
	return n
}

func sovStatistics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStatistics(x uint64) (n int) {
	return sovStatistics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetStarStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_star_statistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_star_statistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarID", wireType)
			}
			m.StarID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStarStatisticsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_star_statistics_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_star_statistics_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarID", wireType)
			}
			m.StarID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, &Statistics{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStarStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_star_statistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_star_statistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Change = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			m.Param = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStarStatisticsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_star_statistics_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_star_statistics_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStarHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_star_history: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_star_history: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarID", wireType)
			}
			m.StarID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStarHistoryRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_star_history_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_star_history_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarID", wireType)
			}
			m.StarID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &History{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatistics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatistics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStatistics
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatistics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *History) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: History: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: History: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param1", wireType)
			}
			m.Param1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param2", wireType)
			}
			m.Param2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatistics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatistics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatistics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatistics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatistics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatistics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStatistics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStatistics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStatistics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStatistics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatistics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("statistics.proto", fileDescriptorStatistics) }

var fileDescriptorStatistics = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x65, 0x92, 0xa6, 0xd5, 0x51, 0x4a, 0x5d, 0x43, 0x0d, 0x3d, 0x94, 0xb0, 0xa7, 0x80, 0x50,
	0x30, 0xf5, 0x28, 0x08, 0xe2, 0x41, 0xaf, 0xf1, 0x03, 0xca, 0x9a, 0x2e, 0xed, 0x42, 0xd3, 0x2d,
	0xc9, 0x46, 0xe8, 0xd1, 0xbf, 0xf3, 0xe8, 0x27, 0x48, 0xbf, 0x44, 0xba, 0xbb, 0xd9, 0x56, 0xe9,
	0x21, 0xa7, 0xec, 0xbc, 0x79, 0x33, 0xef, 0xcd, 0x0b, 0x0e, 0x2a, 0xc5, 0x94, 0xa8, 0x94, 0xc8,
	0xab, 0xc9, 0xa6, 0x94, 0x4a, 0x92, 0x33, 0xfd, 0xc9, 0xe5, 0x6a, 0xd4, 0x67, 0x2c, 0x97, 0x45,
	0x21, 0xd7, 0xa6, 0x43, 0x1f, 0xf1, 0x7a, 0xc1, 0xd5, 0xac, 0x52, 0xac, 0x9c, 0x1d, 0xc6, 0xc8,
	0x00, 0xfd, 0x5a, 0xcc, 0x23, 0x88, 0x21, 0x09, 0xb2, 0xfd, 0x93, 0x0c, 0xb1, 0xbb, 0x27, 0xbd,
	0x3e, 0x47, 0x9e, 0x06, 0x6d, 0x45, 0xb7, 0x78, 0x73, 0x62, 0xc1, 0xac, 0xe4, 0xaa, 0xfd, 0x12,
	0x72, 0x8f, 0x78, 0x98, 0x8d, 0xfc, 0xd8, 0x4f, 0x2e, 0xd2, 0x70, 0xd2, 0x98, 0x9e, 0xbc, 0xb9,
	0x5e, 0x76, 0xc4, 0xa3, 0x4b, 0x1c, 0xd6, 0x9b, 0x39, 0x53, 0xbc, 0x85, 0xfd, 0x3e, 0x7a, 0x62,
	0x6e, 0x55, 0x3d, 0xe3, 0x24, 0x5f, 0xb2, 0xf5, 0x82, 0x47, 0x7e, 0x0c, 0x09, 0x64, 0xb6, 0x22,
	0x21, 0x06, 0x1b, 0x56, 0xb2, 0x22, 0xea, 0x68, 0xaa, 0x29, 0x68, 0x8a, 0xa3, 0xd3, 0x4a, 0xfa,
	0xce, 0x10, 0x83, 0x0f, 0xb6, 0xaa, 0xb9, 0xd6, 0x83, 0xcc, 0x14, 0xf4, 0x01, 0x07, 0x2e, 0x98,
	0xa5, 0xa8, 0x94, 0x2c, 0xb7, 0x47, 0xf7, 0xc3, 0x9f, 0xfb, 0xad, 0x5f, 0xcf, 0xf9, 0xa5, 0x9f,
	0x80, 0xe1, 0xff, 0x71, 0x2d, 0xd6, 0x7a, 0x05, 0xb9, 0xc5, 0x9e, 0x1d, 0xb4, 0x89, 0x5e, 0x1d,
	0x12, 0x7d, 0x31, 0x8d, 0xac, 0x61, 0x10, 0x82, 0x1d, 0x25, 0x0a, 0x1e, 0x75, 0x62, 0x3f, 0xf1,
	0x33, 0xfd, 0xa6, 0x35, 0xf6, 0x2c, 0xcf, 0xc6, 0x07, 0xc7, 0xf1, 0xe9, 0x64, 0xee, 0x9a, 0x1f,
	0x69, 0x2a, 0x87, 0xa7, 0x3a, 0xd6, 0x06, 0x4f, 0x1d, 0x3e, 0xd5, 0xb9, 0x9e, 0x5b, 0x7c, 0xea,
	0x64, 0x83, 0x18, 0x1a, 0xd9, 0xa7, 0xcb, 0xaf, 0xdd, 0x18, 0xbe, 0x77, 0x63, 0xf8, 0xd9, 0x8d,
	0xe1, 0xbd, 0xab, 0x3d, 0x4f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x09, 0x02, 0x76, 0xda, 0xd5,
	0x02, 0x00, 0x00,
}
