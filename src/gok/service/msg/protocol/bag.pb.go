// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bag.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 获取临时背包物品
type GetTempItem struct {
}

func (m *GetTempItem) Reset()                    { *m = GetTempItem{} }
func (m *GetTempItem) String() string            { return proto.CompactTextString(m) }
func (*GetTempItem) ProtoMessage()               {}
func (*GetTempItem) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{0} }

type GetTempItemRet struct {
	ItemID []int32 `protobuf:"varint,1,rep,packed,name=itemID" json:"itemID,omitempty"`
}

func (m *GetTempItemRet) Reset()                    { *m = GetTempItemRet{} }
func (m *GetTempItemRet) String() string            { return proto.CompactTextString(m) }
func (*GetTempItemRet) ProtoMessage()               {}
func (*GetTempItemRet) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{1} }

func (m *GetTempItemRet) GetItemID() []int32 {
	if m != nil {
		return m.ItemID
	}
	return nil
}

// 临时背包物品放入主背包
type TakeinBag struct {
}

func (m *TakeinBag) Reset()                    { *m = TakeinBag{} }
func (m *TakeinBag) String() string            { return proto.CompactTextString(m) }
func (*TakeinBag) ProtoMessage()               {}
func (*TakeinBag) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{2} }

type TakeinBagRet struct {
	// bool result = 1;
	ItemID []int32 `protobuf:"varint,2,rep,packed,name=itemID" json:"itemID,omitempty"`
}

func (m *TakeinBagRet) Reset()                    { *m = TakeinBagRet{} }
func (m *TakeinBagRet) String() string            { return proto.CompactTextString(m) }
func (*TakeinBagRet) ProtoMessage()               {}
func (*TakeinBagRet) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{3} }

func (m *TakeinBagRet) GetItemID() []int32 {
	if m != nil {
		return m.ItemID
	}
	return nil
}

// 获取背包道具列表
type GetBagItem struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetBagItem) Reset()                    { *m = GetBagItem{} }
func (m *GetBagItem) String() string            { return proto.CompactTextString(m) }
func (*GetBagItem) ProtoMessage()               {}
func (*GetBagItem) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{4} }

func (m *GetBagItem) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetBagItemRet struct {
	ItemList []*BagItem `protobuf:"bytes,1,rep,name=itemList" json:"itemList,omitempty"`
}

func (m *GetBagItemRet) Reset()                    { *m = GetBagItemRet{} }
func (m *GetBagItemRet) String() string            { return proto.CompactTextString(m) }
func (*GetBagItemRet) ProtoMessage()               {}
func (*GetBagItemRet) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{5} }

func (m *GetBagItemRet) GetItemList() []*BagItem {
	if m != nil {
		return m.ItemList
	}
	return nil
}

// 激活图鉴
type ActiveGroup struct {
	Uid     int32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GroupID int32   `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ItemID  []int32 `protobuf:"varint,3,rep,packed,name=itemID" json:"itemID,omitempty"`
}

func (m *ActiveGroup) Reset()                    { *m = ActiveGroup{} }
func (m *ActiveGroup) String() string            { return proto.CompactTextString(m) }
func (*ActiveGroup) ProtoMessage()               {}
func (*ActiveGroup) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{6} }

func (m *ActiveGroup) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ActiveGroup) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ActiveGroup) GetItemID() []int32 {
	if m != nil {
		return m.ItemID
	}
	return nil
}

type ActiveGroupRet struct {
	// int32 groupID = 1;  //成功的组合id
	Result           bool              `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	CivilizationInfo *CivilizationInfo `protobuf:"bytes,2,opt,name=civilizationInfo" json:"civilizationInfo,omitempty"`
	SatifyNum        int32             `protobuf:"varint,3,opt,name=satifyNum,proto3" json:"satifyNum,omitempty"`
}

func (m *ActiveGroupRet) Reset()                    { *m = ActiveGroupRet{} }
func (m *ActiveGroupRet) String() string            { return proto.CompactTextString(m) }
func (*ActiveGroupRet) ProtoMessage()               {}
func (*ActiveGroupRet) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{7} }

func (m *ActiveGroupRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *ActiveGroupRet) GetCivilizationInfo() *CivilizationInfo {
	if m != nil {
		return m.CivilizationInfo
	}
	return nil
}

func (m *ActiveGroupRet) GetSatifyNum() int32 {
	if m != nil {
		return m.SatifyNum
	}
	return 0
}

type ItemGroupOpenPush struct {
	GroupID int32 `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (m *ItemGroupOpenPush) Reset()                    { *m = ItemGroupOpenPush{} }
func (m *ItemGroupOpenPush) String() string            { return proto.CompactTextString(m) }
func (*ItemGroupOpenPush) ProtoMessage()               {}
func (*ItemGroupOpenPush) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{8} }

func (m *ItemGroupOpenPush) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

// 物品图鉴组合
type ItemGroup struct {
	GroupID int32 `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	// repeated int32  itemID = 2; //当前已解锁的物品id
	// bool getReward = 3;   //奖励是否已领取
	//    int64 time = 4; //组合的完成时间
	Done            bool               `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`
	ItemGroupRecord []*ItemGroupRecord `protobuf:"bytes,6,rep,name=itemGroupRecord" json:"itemGroupRecord,omitempty"`
	Active          bool               `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *ItemGroup) Reset()                    { *m = ItemGroup{} }
func (m *ItemGroup) String() string            { return proto.CompactTextString(m) }
func (*ItemGroup) ProtoMessage()               {}
func (*ItemGroup) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{9} }

func (m *ItemGroup) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ItemGroup) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *ItemGroup) GetItemGroupRecord() []*ItemGroupRecord {
	if m != nil {
		return m.ItemGroupRecord
	}
	return nil
}

func (m *ItemGroup) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type ItemGroupRecord struct {
	ItemID []int32 `protobuf:"varint,1,rep,packed,name=itemID" json:"itemID,omitempty"`
	Num    int32   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *ItemGroupRecord) Reset()                    { *m = ItemGroupRecord{} }
func (m *ItemGroupRecord) String() string            { return proto.CompactTextString(m) }
func (*ItemGroupRecord) ProtoMessage()               {}
func (*ItemGroupRecord) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{10} }

func (m *ItemGroupRecord) GetItemID() []int32 {
	if m != nil {
		return m.ItemID
	}
	return nil
}

func (m *ItemGroupRecord) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 获取组合列表
type GetItemGroup struct {
	Uid      int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	StarType int32 `protobuf:"varint,2,opt,name=starType,proto3" json:"starType,omitempty"`
}

func (m *GetItemGroup) Reset()                    { *m = GetItemGroup{} }
func (m *GetItemGroup) String() string            { return proto.CompactTextString(m) }
func (*GetItemGroup) ProtoMessage()               {}
func (*GetItemGroup) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{11} }

func (m *GetItemGroup) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetItemGroup) GetStarType() int32 {
	if m != nil {
		return m.StarType
	}
	return 0
}

type GetItemGroupRet struct {
	ItemGroup []*ItemGroup `protobuf:"bytes,1,rep,name=itemGroup" json:"itemGroup,omitempty"`
}

func (m *GetItemGroupRet) Reset()                    { *m = GetItemGroupRet{} }
func (m *GetItemGroupRet) String() string            { return proto.CompactTextString(m) }
func (*GetItemGroupRet) ProtoMessage()               {}
func (*GetItemGroupRet) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{12} }

func (m *GetItemGroupRet) GetItemGroup() []*ItemGroup {
	if m != nil {
		return m.ItemGroup
	}
	return nil
}

// 领取组合奖励
type GetGroupReward struct {
	GroupID int32 `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (m *GetGroupReward) Reset()                    { *m = GetGroupReward{} }
func (m *GetGroupReward) String() string            { return proto.CompactTextString(m) }
func (*GetGroupReward) ProtoMessage()               {}
func (*GetGroupReward) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{13} }

func (m *GetGroupReward) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type GetGroupRewardRet struct {
	GroupID int32 `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (m *GetGroupRewardRet) Reset()                    { *m = GetGroupRewardRet{} }
func (m *GetGroupRewardRet) String() string            { return proto.CompactTextString(m) }
func (*GetGroupRewardRet) ProtoMessage()               {}
func (*GetGroupRewardRet) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{14} }

func (m *GetGroupRewardRet) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type GetCurrentGroup struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetCurrentGroup) Reset()                    { *m = GetCurrentGroup{} }
func (m *GetCurrentGroup) String() string            { return proto.CompactTextString(m) }
func (*GetCurrentGroup) ProtoMessage()               {}
func (*GetCurrentGroup) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{15} }

func (m *GetCurrentGroup) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetCurrentGroupRet struct {
	GroupID int32 `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (m *GetCurrentGroupRet) Reset()                    { *m = GetCurrentGroupRet{} }
func (m *GetCurrentGroupRet) String() string            { return proto.CompactTextString(m) }
func (*GetCurrentGroupRet) ProtoMessage()               {}
func (*GetCurrentGroupRet) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{16} }

func (m *GetCurrentGroupRet) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func init() {
	proto.RegisterType((*GetTempItem)(nil), "protocol.get_temp_item")
	proto.RegisterType((*GetTempItemRet)(nil), "protocol.get_temp_item_ret")
	proto.RegisterType((*TakeinBag)(nil), "protocol.takein_bag")
	proto.RegisterType((*TakeinBagRet)(nil), "protocol.takein_bag_ret")
	proto.RegisterType((*GetBagItem)(nil), "protocol.get_bag_item")
	proto.RegisterType((*GetBagItemRet)(nil), "protocol.get_bag_item_ret")
	proto.RegisterType((*ActiveGroup)(nil), "protocol.active_group")
	proto.RegisterType((*ActiveGroupRet)(nil), "protocol.active_group_ret")
	proto.RegisterType((*ItemGroupOpenPush)(nil), "protocol.item_group_open_push")
	proto.RegisterType((*ItemGroup)(nil), "protocol.item_group")
	proto.RegisterType((*ItemGroupRecord)(nil), "protocol.item_group_record")
	proto.RegisterType((*GetItemGroup)(nil), "protocol.get_item_group")
	proto.RegisterType((*GetItemGroupRet)(nil), "protocol.get_item_group_ret")
	proto.RegisterType((*GetGroupReward)(nil), "protocol.get_group_reward")
	proto.RegisterType((*GetGroupRewardRet)(nil), "protocol.get_group_reward_ret")
	proto.RegisterType((*GetCurrentGroup)(nil), "protocol.get_current_group")
	proto.RegisterType((*GetCurrentGroupRet)(nil), "protocol.get_current_group_ret")
}
func (m *GetTempItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTempItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetTempItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTempItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		dAtA2 := make([]byte, len(m.ItemID)*10)
		var j1 int
		for _, num1 := range m.ItemID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *TakeinBag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeinBag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TakeinBagRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeinBagRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		dAtA4 := make([]byte, len(m.ItemID)*10)
		var j3 int
		for _, num1 := range m.ItemID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintBag(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *GetBagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBagItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetBagItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBagItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemList) > 0 {
		for _, msg := range m.ItemList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ActiveGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Uid))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.GroupID))
	}
	if len(m.ItemID) > 0 {
		dAtA6 := make([]byte, len(m.ItemID)*10)
		var j5 int
		for _, num1 := range m.ItemID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBag(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *ActiveGroupRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveGroupRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CivilizationInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.CivilizationInfo.Size()))
		n7, err := m.CivilizationInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.SatifyNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.SatifyNum))
	}
	return i, nil
}

func (m *ItemGroupOpenPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemGroupOpenPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *ItemGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.GroupID))
	}
	if m.Done {
		dAtA[i] = 0x28
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ItemGroupRecord) > 0 {
		for _, msg := range m.ItemGroupRecord {
			dAtA[i] = 0x32
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Active {
		dAtA[i] = 0x38
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ItemGroupRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemGroupRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		dAtA9 := make([]byte, len(m.ItemID)*10)
		var j8 int
		for _, num1 := range m.ItemID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *GetItemGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetItemGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Uid))
	}
	if m.StarType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.StarType))
	}
	return i, nil
}

func (m *GetItemGroupRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetItemGroupRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemGroup) > 0 {
		for _, msg := range m.ItemGroup {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetGroupReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GetGroupRewardRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupRewardRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GetCurrentGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetCurrentGroupRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentGroupRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func encodeVarintBag(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetTempItem) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetTempItemRet) Size() (n int) {
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		l = 0
		for _, e := range m.ItemID {
			l += sovBag(uint64(e))
		}
		n += 1 + sovBag(uint64(l)) + l
	}
	return n
}

func (m *TakeinBag) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TakeinBagRet) Size() (n int) {
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		l = 0
		for _, e := range m.ItemID {
			l += sovBag(uint64(e))
		}
		n += 1 + sovBag(uint64(l)) + l
	}
	return n
}

func (m *GetBagItem) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBag(uint64(m.Uid))
	}
	return n
}

func (m *GetBagItemRet) Size() (n int) {
	var l int
	_ = l
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *ActiveGroup) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBag(uint64(m.Uid))
	}
	if m.GroupID != 0 {
		n += 1 + sovBag(uint64(m.GroupID))
	}
	if len(m.ItemID) > 0 {
		l = 0
		for _, e := range m.ItemID {
			l += sovBag(uint64(e))
		}
		n += 1 + sovBag(uint64(l)) + l
	}
	return n
}

func (m *ActiveGroupRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.CivilizationInfo != nil {
		l = m.CivilizationInfo.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	if m.SatifyNum != 0 {
		n += 1 + sovBag(uint64(m.SatifyNum))
	}
	return n
}

func (m *ItemGroupOpenPush) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovBag(uint64(m.GroupID))
	}
	return n
}

func (m *ItemGroup) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovBag(uint64(m.GroupID))
	}
	if m.Done {
		n += 2
	}
	if len(m.ItemGroupRecord) > 0 {
		for _, e := range m.ItemGroupRecord {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *ItemGroupRecord) Size() (n int) {
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		l = 0
		for _, e := range m.ItemID {
			l += sovBag(uint64(e))
		}
		n += 1 + sovBag(uint64(l)) + l
	}
	if m.Num != 0 {
		n += 1 + sovBag(uint64(m.Num))
	}
	return n
}

func (m *GetItemGroup) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBag(uint64(m.Uid))
	}
	if m.StarType != 0 {
		n += 1 + sovBag(uint64(m.StarType))
	}
	return n
}

func (m *GetItemGroupRet) Size() (n int) {
	var l int
	_ = l
	if len(m.ItemGroup) > 0 {
		for _, e := range m.ItemGroup {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *GetGroupReward) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovBag(uint64(m.GroupID))
	}
	return n
}

func (m *GetGroupRewardRet) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovBag(uint64(m.GroupID))
	}
	return n
}

func (m *GetCurrentGroup) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBag(uint64(m.Uid))
	}
	return n
}

func (m *GetCurrentGroupRet) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovBag(uint64(m.GroupID))
	}
	return n
}

func sovBag(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBag(x uint64) (n int) {
	return sovBag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetTempItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_temp_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_temp_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTempItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_temp_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_temp_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemID = append(m.ItemID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBag
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemID = append(m.ItemID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeinBag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: takein_bag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: takein_bag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeinBagRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: takein_bag_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: takein_bag_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemID = append(m.ItemID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBag
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemID = append(m.ItemID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBagItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_bag_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_bag_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBagItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_bag_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_bag_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &BagItem{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: active_group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: active_group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemID = append(m.ItemID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBag
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemID = append(m.ItemID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveGroupRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: active_group_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: active_group_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CivilizationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CivilizationInfo == nil {
				m.CivilizationInfo = &CivilizationInfo{}
			}
			if err := m.CivilizationInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SatifyNum", wireType)
			}
			m.SatifyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SatifyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemGroupOpenPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: item_group_open_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: item_group_open_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: item_group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: item_group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemGroupRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemGroupRecord = append(m.ItemGroupRecord, &ItemGroupRecord{})
			if err := m.ItemGroupRecord[len(m.ItemGroupRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemGroupRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: item_group_record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: item_group_record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemID = append(m.ItemID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBag
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemID = append(m.ItemID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetItemGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_item_group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_item_group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarType", wireType)
			}
			m.StarType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetItemGroupRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_item_group_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_item_group_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemGroup = append(m.ItemGroup, &ItemGroup{})
			if err := m.ItemGroup[len(m.ItemGroup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_group_reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_group_reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupRewardRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_group_reward_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_group_reward_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_current_group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_current_group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentGroupRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_current_group_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_current_group_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBag
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBag
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBag(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBag = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBag   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bag.proto", fileDescriptorBag) }

var fileDescriptorBag = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x95, 0x29, 0xed, 0xb6, 0xb3, 0xa5, 0xdb, 0xb5, 0x0a, 0x8a, 0x16, 0x54, 0x55, 0x96, 0x90,
	0x2a, 0x81, 0xaa, 0xa5, 0x9c, 0xe1, 0xb0, 0x02, 0x2d, 0x2b, 0x21, 0x0e, 0x16, 0xf7, 0xc8, 0x4d,
	0xdd, 0x62, 0xd1, 0xd8, 0x91, 0xe3, 0x2c, 0x5a, 0xfe, 0x82, 0x23, 0x7f, 0xc4, 0x91, 0x4f, 0x40,
	0xfd, 0x12, 0x64, 0x27, 0x69, 0x9c, 0x66, 0xb3, 0xa7, 0xce, 0x38, 0xef, 0xcd, 0xbc, 0x37, 0x33,
	0x85, 0xc1, 0x8a, 0x6d, 0x17, 0x89, 0x56, 0x46, 0xe1, 0xbe, 0xfb, 0x89, 0xd4, 0xee, 0x62, 0xc4,
	0x58, 0xa4, 0xe2, 0x58, 0xc9, 0xfc, 0x0b, 0x39, 0x83, 0x27, 0x5b, 0x6e, 0x42, 0xc3, 0xe3, 0x24,
	0x14, 0x86, 0xc7, 0xe4, 0x15, 0x9c, 0xd7, 0x1e, 0x42, 0xcd, 0x0d, 0x7e, 0x06, 0x3d, 0x1b, 0xdf,
	0x7c, 0x08, 0xd0, 0xac, 0x33, 0xef, 0xd2, 0x22, 0x23, 0x43, 0x00, 0xc3, 0xbe, 0x73, 0x21, 0xc3,
	0x15, 0xdb, 0x92, 0x39, 0x8c, 0xaa, 0xec, 0x88, 0xf7, 0xa8, 0xc6, 0x9b, 0xc1, 0xd0, 0x36, 0xb1,
	0x30, 0xfb, 0x82, 0xc7, 0xd0, 0xc9, 0xc4, 0x3a, 0x40, 0x33, 0x34, 0xef, 0x52, 0x1b, 0x92, 0x2b,
	0x18, 0xfb, 0x08, 0x57, 0x6d, 0x01, 0x7d, 0x1b, 0x7f, 0x16, 0xa9, 0x71, 0x3a, 0x4e, 0x97, 0x78,
	0x51, 0x1a, 0x5b, 0x94, 0x48, 0x7a, 0xc0, 0x10, 0x0a, 0x43, 0x16, 0x19, 0x71, 0xcb, 0xc3, 0xad,
	0x56, 0x59, 0xd2, 0xec, 0x82, 0x03, 0x38, 0x71, 0x9f, 0x9c, 0x40, 0xfb, 0x5a, 0xa6, 0x9e, 0xf2,
	0x4e, 0x4d, 0xf9, 0x2f, 0x04, 0x63, 0xbf, 0x68, 0x69, 0x53, 0xf3, 0x34, 0xdb, 0x19, 0x57, 0xbb,
	0x4f, 0x8b, 0x0c, 0x5f, 0xc3, 0x38, 0x12, 0xb7, 0x62, 0x27, 0x7e, 0x32, 0x23, 0x94, 0xbc, 0x91,
	0x1b, 0xe5, 0xfa, 0x9c, 0x2e, 0x9f, 0x57, 0xc2, 0x7d, 0x44, 0x28, 0xe4, 0x46, 0xd1, 0x06, 0x09,
	0xbf, 0x80, 0x41, 0xca, 0x8c, 0xd8, 0xdc, 0x7d, 0xc9, 0xe2, 0xa0, 0xe3, 0x94, 0x56, 0x0f, 0xe4,
	0x12, 0x26, 0x6e, 0x46, 0xb9, 0x20, 0x95, 0x70, 0x19, 0x26, 0x59, 0xfa, 0xcd, 0x77, 0x87, 0x6a,
	0xee, 0xc8, 0x6f, 0x04, 0x50, 0x51, 0xda, 0x81, 0x18, 0xc3, 0xe3, 0xb5, 0x92, 0x3c, 0xe8, 0x3a,
	0x5f, 0x2e, 0xc6, 0x1f, 0xe1, 0xcc, 0x72, 0xaf, 0x2d, 0x84, 0xf2, 0x48, 0xe9, 0x75, 0xd0, 0x73,
	0xdb, 0xf0, 0x4c, 0x79, 0x7a, 0xb4, 0x83, 0xd0, 0x63, 0x8e, 0x1d, 0x5a, 0x3e, 0xc8, 0xe0, 0x24,
	0x1f, 0x5a, 0x9e, 0x91, 0x77, 0x70, 0xde, 0x60, 0xb7, 0x1d, 0xa0, 0x5d, 0xa9, 0xcc, 0xe2, 0x62,
	0x79, 0x36, 0x24, 0xef, 0x61, 0x64, 0x0f, 0xc7, 0x73, 0xd7, 0x5c, 0xfb, 0x05, 0xf4, 0x53, 0xc3,
	0xf4, 0xd7, 0xbb, 0x84, 0x17, 0xd4, 0x43, 0x4e, 0x3e, 0x01, 0xae, 0xf3, 0xdd, 0x86, 0x97, 0x30,
	0x38, 0xe8, 0x2f, 0x6e, 0x6f, 0x72, 0x9f, 0x5b, 0x5a, 0xc1, 0xc8, 0xeb, 0xfc, 0x84, 0xcb, 0x22,
	0x3f, 0x98, 0x5e, 0x3f, 0xb0, 0x92, 0x4b, 0x98, 0x1c, 0xa3, 0x5d, 0xe7, 0x76, 0xc6, 0xcb, 0xfc,
	0x9f, 0x1a, 0x65, 0x5a, 0x73, 0x69, 0xda, 0xcc, 0x92, 0x37, 0xf0, 0xb4, 0x01, 0x7b, 0xb8, 0xf2,
	0xd5, 0xf0, 0xcf, 0x7e, 0x8a, 0xfe, 0xee, 0xa7, 0xe8, 0xdf, 0x7e, 0x8a, 0x56, 0x3d, 0xe7, 0xf3,
	0xed, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xc8, 0xf7, 0xfa, 0x50, 0x04, 0x00, 0x00,
}
