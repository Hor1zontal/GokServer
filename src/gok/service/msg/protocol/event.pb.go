// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 事件加入成员
type EventMember struct {
	Uid      int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Msg      string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Icon     int32  `protobuf:"varint,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *EventMember) Reset()                    { *m = EventMember{} }
func (m *EventMember) String() string            { return proto.CompactTextString(m) }
func (*EventMember) ProtoMessage()               {}
func (*EventMember) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{0} }

func (m *EventMember) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *EventMember) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *EventMember) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *EventMember) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

type Event struct {
	EventID        int32         `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	BaseID         int32         `protobuf:"varint,2,opt,name=baseID,proto3" json:"baseID,omitempty"`
	Step           int32         `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	StepModule     *Event_Module `protobuf:"bytes,4,opt,name=stepModule" json:"stepModule,omitempty"`
	DisplayStarUid int32         `protobuf:"varint,5,opt,name=displayStarUid,proto3" json:"displayStarUid,omitempty"`
	CallMember     *EventMember  `protobuf:"bytes,6,opt,name=callMember" json:"callMember,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{1} }

func (m *Event) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *Event) GetBaseID() int32 {
	if m != nil {
		return m.BaseID
	}
	return 0
}

func (m *Event) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Event) GetStepModule() *Event_Module {
	if m != nil {
		return m.StepModule
	}
	return nil
}

func (m *Event) GetDisplayStarUid() int32 {
	if m != nil {
		return m.DisplayStarUid
	}
	return 0
}

func (m *Event) GetCallMember() *EventMember {
	if m != nil {
		return m.CallMember
	}
	return nil
}

type Event_Module struct {
	ModuleID       int32  `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	StartTimestamp int64  `protobuf:"varint,2,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	EndTimestamp   int64  `protobuf:"varint,3,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
	Data           string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Event_Module) Reset()                    { *m = Event_Module{} }
func (m *Event_Module) String() string            { return proto.CompactTextString(m) }
func (*Event_Module) ProtoMessage()               {}
func (*Event_Module) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{2} }

func (m *Event_Module) GetModuleID() int32 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *Event_Module) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *Event_Module) GetEndTimestamp() int64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

func (m *Event_Module) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type DisplayStarUidPush struct {
	DisplayStarUid int32 `protobuf:"varint,1,opt,name=displayStarUid,proto3" json:"displayStarUid,omitempty"`
}

func (m *DisplayStarUidPush) Reset()                    { *m = DisplayStarUidPush{} }
func (m *DisplayStarUidPush) String() string            { return proto.CompactTextString(m) }
func (*DisplayStarUidPush) ProtoMessage()               {}
func (*DisplayStarUidPush) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{3} }

func (m *DisplayStarUidPush) GetDisplayStarUid() int32 {
	if m != nil {
		return m.DisplayStarUid
	}
	return 0
}

// 获取事件步骤模块数据
type GetEventModule struct {
	EventID  int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	ModuleID int32 `protobuf:"varint,2,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
}

func (m *GetEventModule) Reset()                    { *m = GetEventModule{} }
func (m *GetEventModule) String() string            { return proto.CompactTextString(m) }
func (*GetEventModule) ProtoMessage()               {}
func (*GetEventModule) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{4} }

func (m *GetEventModule) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *GetEventModule) GetModuleID() int32 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

// 获取事件步骤模块数据 编号
type GetEventModuleRet struct {
	EventID    int32         `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	StepModule *Event_Module `protobuf:"bytes,2,opt,name=stepModule" json:"stepModule,omitempty"`
}

func (m *GetEventModuleRet) Reset()                    { *m = GetEventModuleRet{} }
func (m *GetEventModuleRet) String() string            { return proto.CompactTextString(m) }
func (*GetEventModuleRet) ProtoMessage()               {}
func (*GetEventModuleRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{5} }

func (m *GetEventModuleRet) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *GetEventModuleRet) GetStepModule() *Event_Module {
	if m != nil {
		return m.StepModule
	}
	return nil
}

// 完成事件步骤
type DoneEventStep struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Step    int32 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *DoneEventStep) Reset()                    { *m = DoneEventStep{} }
func (m *DoneEventStep) String() string            { return proto.CompactTextString(m) }
func (*DoneEventStep) ProtoMessage()               {}
func (*DoneEventStep) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{6} }

func (m *DoneEventStep) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *DoneEventStep) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

type DoneEventStepRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *DoneEventStepRet) Reset()                    { *m = DoneEventStepRet{} }
func (m *DoneEventStepRet) String() string            { return proto.CompactTextString(m) }
func (*DoneEventStepRet) ProtoMessage()               {}
func (*DoneEventStepRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{7} }

func (m *DoneEventStepRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 事件步骤信息变更推送
type EventStepPush struct {
	EventID    int32         `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	BaseID     int32         `protobuf:"varint,2,opt,name=baseID,proto3" json:"baseID,omitempty"`
	Step       int32         `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	StepModule *Event_Module `protobuf:"bytes,4,opt,name=stepModule" json:"stepModule,omitempty"`
}

func (m *EventStepPush) Reset()                    { *m = EventStepPush{} }
func (m *EventStepPush) String() string            { return proto.CompactTextString(m) }
func (*EventStepPush) ProtoMessage()               {}
func (*EventStepPush) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{8} }

func (m *EventStepPush) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *EventStepPush) GetBaseID() int32 {
	if m != nil {
		return m.BaseID
	}
	return 0
}

func (m *EventStepPush) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *EventStepPush) GetStepModule() *Event_Module {
	if m != nil {
		return m.StepModule
	}
	return nil
}

// 获取事件摘要信息
type GetEvent struct {
	EventID []int32 `protobuf:"varint,1,rep,packed,name=eventID" json:"eventID,omitempty"`
}

func (m *GetEvent) Reset()                    { *m = GetEvent{} }
func (m *GetEvent) String() string            { return proto.CompactTextString(m) }
func (*GetEvent) ProtoMessage()               {}
func (*GetEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{9} }

func (m *GetEvent) GetEventID() []int32 {
	if m != nil {
		return m.EventID
	}
	return nil
}

type GetEventRet struct {
	Event []*Event `protobuf:"bytes,1,rep,name=event" json:"event,omitempty"`
}

func (m *GetEventRet) Reset()                    { *m = GetEventRet{} }
func (m *GetEventRet) String() string            { return proto.CompactTextString(m) }
func (*GetEventRet) ProtoMessage()               {}
func (*GetEventRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{10} }

func (m *GetEventRet) GetEvent() []*Event {
	if m != nil {
		return m.Event
	}
	return nil
}

// ------------------------------display模块------------------------------------------
type Module_Display struct {
}

func (m *Module_Display) Reset()                    { *m = Module_Display{} }
func (m *Module_Display) String() string            { return proto.CompactTextString(m) }
func (*Module_Display) ProtoMessage()               {}
func (*Module_Display) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{11} }

// ------------------------------分镜模块---------------------------------------------
type Module_Storyboard struct {
}

func (m *Module_Storyboard) Reset()                    { *m = Module_Storyboard{} }
func (m *Module_Storyboard) String() string            { return proto.CompactTextString(m) }
func (*Module_Storyboard) ProtoMessage()               {}
func (*Module_Storyboard) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{12} }

// -------------------------------选择目标模块----------------------------------------
type Module_Random_Target struct {
	Target *EventMember `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
}

func (m *Module_Random_Target) Reset()                    { *m = Module_Random_Target{} }
func (m *Module_Random_Target) String() string            { return proto.CompactTextString(m) }
func (*Module_Random_Target) ProtoMessage()               {}
func (*Module_Random_Target) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{13} }

func (m *Module_Random_Target) GetTarget() *EventMember {
	if m != nil {
		return m.Target
	}
	return nil
}

// 随机获取事件目标
type RandomTarget struct {
	EventID int32   `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Uid     int32   `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Filter  []int32 `protobuf:"varint,3,rep,packed,name=filter" json:"filter,omitempty"`
	//    int32 building = 4;  //建筑过滤条件          由服务端传入
	//    int32 repair = 5;    //建筑修理状态过滤条件    由服务端传入
	//    int32 broken = 6;    //建筑损坏过滤条件        由服务端传入
	//    int32 believer = 7;  //信徒过滤条件          由服务端内部传入
	Guide        bool  `protobuf:"varint,8,opt,name=guide,proto3" json:"guide,omitempty"`
	MutualID     int32 `protobuf:"varint,9,opt,name=mutualID,proto3" json:"mutualID,omitempty"`
	FriendID     int32 `protobuf:"varint,10,opt,name=friendID,proto3" json:"friendID,omitempty"`
	EventType    int32 `protobuf:"varint,11,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Num          int32 `protobuf:"varint,12,opt,name=num,proto3" json:"num,omitempty"`
	RobotFilter  bool  `protobuf:"varint,13,opt,name=robotFilter,proto3" json:"robotFilter,omitempty"`
	AlwaysTarget bool  `protobuf:"varint,14,opt,name=alwaysTarget,proto3" json:"alwaysTarget,omitempty"`
}

func (m *RandomTarget) Reset()                    { *m = RandomTarget{} }
func (m *RandomTarget) String() string            { return proto.CompactTextString(m) }
func (*RandomTarget) ProtoMessage()               {}
func (*RandomTarget) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{14} }

func (m *RandomTarget) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *RandomTarget) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RandomTarget) GetFilter() []int32 {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *RandomTarget) GetGuide() bool {
	if m != nil {
		return m.Guide
	}
	return false
}

func (m *RandomTarget) GetMutualID() int32 {
	if m != nil {
		return m.MutualID
	}
	return 0
}

func (m *RandomTarget) GetFriendID() int32 {
	if m != nil {
		return m.FriendID
	}
	return 0
}

func (m *RandomTarget) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *RandomTarget) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *RandomTarget) GetRobotFilter() bool {
	if m != nil {
		return m.RobotFilter
	}
	return false
}

func (m *RandomTarget) GetAlwaysTarget() bool {
	if m != nil {
		return m.AlwaysTarget
	}
	return false
}

type RandomTargetRet struct {
	EventID int32     `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Targets []*Target `protobuf:"bytes,2,rep,name=targets" json:"targets,omitempty"`
}

func (m *RandomTargetRet) Reset()                    { *m = RandomTargetRet{} }
func (m *RandomTargetRet) String() string            { return proto.CompactTextString(m) }
func (*RandomTargetRet) ProtoMessage()               {}
func (*RandomTargetRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{15} }

func (m *RandomTargetRet) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *RandomTargetRet) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

type OpenCard struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Uid     int32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *OpenCard) Reset()                    { *m = OpenCard{} }
func (m *OpenCard) String() string            { return proto.CompactTextString(m) }
func (*OpenCard) ProtoMessage()               {}
func (*OpenCard) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{16} }

func (m *OpenCard) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *OpenCard) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type OpenCardRet struct {
	Result  int32       `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Reward1 *CardReward `protobuf:"bytes,2,opt,name=reward1" json:"reward1,omitempty"`
	Reward2 *CardReward `protobuf:"bytes,3,opt,name=reward2" json:"reward2,omitempty"`
	Reward3 *CardReward `protobuf:"bytes,4,opt,name=reward3" json:"reward3,omitempty"`
}

func (m *OpenCardRet) Reset()                    { *m = OpenCardRet{} }
func (m *OpenCardRet) String() string            { return proto.CompactTextString(m) }
func (*OpenCardRet) ProtoMessage()               {}
func (*OpenCardRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{17} }

func (m *OpenCardRet) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *OpenCardRet) GetReward1() *CardReward {
	if m != nil {
		return m.Reward1
	}
	return nil
}

func (m *OpenCardRet) GetReward2() *CardReward {
	if m != nil {
		return m.Reward2
	}
	return nil
}

func (m *OpenCardRet) GetReward3() *CardReward {
	if m != nil {
		return m.Reward3
	}
	return nil
}

type CardReward struct {
	Type     int32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value    int32           `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Target   *Target         `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	StarInfo *StarInfoDetail `protobuf:"bytes,4,opt,name=starInfo" json:"starInfo,omitempty"`
}

func (m *CardReward) Reset()                    { *m = CardReward{} }
func (m *CardReward) String() string            { return proto.CompactTextString(m) }
func (*CardReward) ProtoMessage()               {}
func (*CardReward) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{18} }

func (m *CardReward) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CardReward) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CardReward) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CardReward) GetStarInfo() *StarInfoDetail {
	if m != nil {
		return m.StarInfo
	}
	return nil
}

type RandomGuideRobot struct {
	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *RandomGuideRobot) Reset()                    { *m = RandomGuideRobot{} }
func (m *RandomGuideRobot) String() string            { return proto.CompactTextString(m) }
func (*RandomGuideRobot) ProtoMessage()               {}
func (*RandomGuideRobot) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{19} }

func (m *RandomGuideRobot) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 随机引导机器人
type RandomGuideRobotRet struct {
	Targets []*Target `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
}

func (m *RandomGuideRobotRet) Reset()                    { *m = RandomGuideRobotRet{} }
func (m *RandomGuideRobotRet) String() string            { return proto.CompactTextString(m) }
func (*RandomGuideRobotRet) ProtoMessage()               {}
func (*RandomGuideRobotRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{20} }

func (m *RandomGuideRobotRet) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

// 随机事件机器人
type RandomEventRobot struct {
	EventType int32   `protobuf:"varint,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Level     []int32 `protobuf:"varint,2,rep,packed,name=level" json:"level,omitempty"`
}

func (m *RandomEventRobot) Reset()                    { *m = RandomEventRobot{} }
func (m *RandomEventRobot) String() string            { return proto.CompactTextString(m) }
func (*RandomEventRobot) ProtoMessage()               {}
func (*RandomEventRobot) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{21} }

func (m *RandomEventRobot) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *RandomEventRobot) GetLevel() []int32 {
	if m != nil {
		return m.Level
	}
	return nil
}

type RandomEventRobotRet struct {
	Targets []*Target `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
}

func (m *RandomEventRobotRet) Reset()                    { *m = RandomEventRobotRet{} }
func (m *RandomEventRobotRet) String() string            { return proto.CompactTextString(m) }
func (*RandomEventRobotRet) ProtoMessage()               {}
func (*RandomEventRobotRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{22} }

func (m *RandomEventRobotRet) GetTargets() []*Target {
	if m != nil {
		return m.Targets
	}
	return nil
}

type GetEventRobot struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetEventRobot) Reset()                    { *m = GetEventRobot{} }
func (m *GetEventRobot) String() string            { return proto.CompactTextString(m) }
func (*GetEventRobot) ProtoMessage()               {}
func (*GetEventRobot) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{23} }

func (m *GetEventRobot) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetEventRobotRet struct {
	Target *Target `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
}

func (m *GetEventRobotRet) Reset()                    { *m = GetEventRobotRet{} }
func (m *GetEventRobotRet) String() string            { return proto.CompactTextString(m) }
func (*GetEventRobotRet) ProtoMessage()               {}
func (*GetEventRobotRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{24} }

func (m *GetEventRobotRet) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type Target struct {
	Id                 int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Avatar             string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname           string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	StarType           int32  `protobuf:"varint,4,opt,name=starType,proto3" json:"starType,omitempty"`
	Friend             bool   `protobuf:"varint,5,opt,name=friend,proto3" json:"friend,omitempty"`
	Mutual             bool   `protobuf:"varint,6,opt,name=mutual,proto3" json:"mutual,omitempty"`
	BelieverTotalLevel int32  `protobuf:"varint,7,opt,name=believerTotalLevel,proto3" json:"believerTotalLevel,omitempty"`
	BuildingTotalLevel int32  `protobuf:"varint,8,opt,name=buildingTotalLevel,proto3" json:"buildingTotalLevel,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{25} }

func (m *Target) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Target) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Target) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Target) GetStarType() int32 {
	if m != nil {
		return m.StarType
	}
	return 0
}

func (m *Target) GetFriend() bool {
	if m != nil {
		return m.Friend
	}
	return false
}

func (m *Target) GetMutual() bool {
	if m != nil {
		return m.Mutual
	}
	return false
}

func (m *Target) GetBelieverTotalLevel() int32 {
	if m != nil {
		return m.BelieverTotalLevel
	}
	return 0
}

func (m *Target) GetBuildingTotalLevel() int32 {
	if m != nil {
		return m.BuildingTotalLevel
	}
	return 0
}

// 选取事件目标
type SelectEventTarget struct {
	EventID  int32  `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	TargetId int32  `protobuf:"varint,2,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *SelectEventTarget) Reset()                    { *m = SelectEventTarget{} }
func (m *SelectEventTarget) String() string            { return proto.CompactTextString(m) }
func (*SelectEventTarget) ProtoMessage()               {}
func (*SelectEventTarget) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{26} }

func (m *SelectEventTarget) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *SelectEventTarget) GetTargetId() int32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *SelectEventTarget) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// 选取事件目标结果
type SelectEventTargetRet struct {
	Result   bool            `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	StarInfo *StarInfoDetail `protobuf:"bytes,2,opt,name=starInfo" json:"starInfo,omitempty"`
	Shield   *Shield         `protobuf:"bytes,3,opt,name=shield" json:"shield,omitempty"`
}

func (m *SelectEventTargetRet) Reset()                    { *m = SelectEventTargetRet{} }
func (m *SelectEventTargetRet) String() string            { return proto.CompactTextString(m) }
func (*SelectEventTargetRet) ProtoMessage()               {}
func (*SelectEventTargetRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{27} }

func (m *SelectEventTargetRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *SelectEventTargetRet) GetStarInfo() *StarInfoDetail {
	if m != nil {
		return m.StarInfo
	}
	return nil
}

func (m *SelectEventTargetRet) GetShield() *Shield {
	if m != nil {
		return m.Shield
	}
	return nil
}

// -------------------------------招募模块----------------------------------------
type Module_Recruit struct {
	JoinMember []*EventMember `protobuf:"bytes,1,rep,name=joinMember" json:"joinMember,omitempty"`
}

func (m *Module_Recruit) Reset()                    { *m = Module_Recruit{} }
func (m *Module_Recruit) String() string            { return proto.CompactTextString(m) }
func (*Module_Recruit) ProtoMessage()               {}
func (*Module_Recruit) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{28} }

func (m *Module_Recruit) GetJoinMember() []*EventMember {
	if m != nil {
		return m.JoinMember
	}
	return nil
}

// 事件发布招募
type PublicEvent struct {
	EventID int32   `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Msg     string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Channel []int32 `protobuf:"varint,3,rep,packed,name=channel" json:"channel,omitempty"`
	Uid     []int32 `protobuf:"varint,4,rep,packed,name=uid" json:"uid,omitempty"`
}

func (m *PublicEvent) Reset()                    { *m = PublicEvent{} }
func (m *PublicEvent) String() string            { return proto.CompactTextString(m) }
func (*PublicEvent) ProtoMessage()               {}
func (*PublicEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{29} }

func (m *PublicEvent) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *PublicEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PublicEvent) GetChannel() []int32 {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *PublicEvent) GetUid() []int32 {
	if m != nil {
		return m.Uid
	}
	return nil
}

// 发布事件事件招募返回
type PublicEventRet struct {
	EventID      int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	EndTimestamp int64 `protobuf:"varint,2,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
}

func (m *PublicEventRet) Reset()                    { *m = PublicEventRet{} }
func (m *PublicEventRet) String() string            { return proto.CompactTextString(m) }
func (*PublicEventRet) ProtoMessage()               {}
func (*PublicEventRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{30} }

func (m *PublicEventRet) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *PublicEventRet) GetEndTimestamp() int64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

// 用户招募请求
type AssistEventRequest struct {
	EventID   int32  `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Uid       int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Msg       string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *AssistEventRequest) Reset()                    { *m = AssistEventRequest{} }
func (m *AssistEventRequest) String() string            { return proto.CompactTextString(m) }
func (*AssistEventRequest) ProtoMessage()               {}
func (*AssistEventRequest) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{31} }

func (m *AssistEventRequest) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *AssistEventRequest) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AssistEventRequest) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AssistEventRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AssistEventRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type AssistEventRequestRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AssistEventRequestRet) Reset()                    { *m = AssistEventRequestRet{} }
func (m *AssistEventRequestRet) String() string            { return proto.CompactTextString(m) }
func (*AssistEventRequestRet) ProtoMessage()               {}
func (*AssistEventRequestRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{32} }

func (m *AssistEventRequestRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 招募请求
type AssistEventRequestList struct {
}

func (m *AssistEventRequestList) Reset()                    { *m = AssistEventRequestList{} }
func (m *AssistEventRequestList) String() string            { return proto.CompactTextString(m) }
func (*AssistEventRequestList) ProtoMessage()               {}
func (*AssistEventRequestList) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{33} }

// 招募请求列表
type AssistEventRequestListRet struct {
	Request []*AssistEventRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AssistEventRequestListRet) Reset()                    { *m = AssistEventRequestListRet{} }
func (m *AssistEventRequestListRet) String() string            { return proto.CompactTextString(m) }
func (*AssistEventRequestListRet) ProtoMessage()               {}
func (*AssistEventRequestListRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{34} }

func (m *AssistEventRequestListRet) GetRequest() []*AssistEventRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// 招募请求信息推送
type AssistEventRequestPush struct {
	Request *AssistEventRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *AssistEventRequestPush) Reset()                    { *m = AssistEventRequestPush{} }
func (m *AssistEventRequestPush) String() string            { return proto.CompactTextString(m) }
func (*AssistEventRequestPush) ProtoMessage()               {}
func (*AssistEventRequestPush) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{35} }

func (m *AssistEventRequestPush) GetRequest() *AssistEventRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// 拒绝事件招募
type RejectAssistEvent struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (m *RejectAssistEvent) Reset()                    { *m = RejectAssistEvent{} }
func (m *RejectAssistEvent) String() string            { return proto.CompactTextString(m) }
func (*RejectAssistEvent) ProtoMessage()               {}
func (*RejectAssistEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{36} }

func (m *RejectAssistEvent) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

type RejectAssistEventRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *RejectAssistEventRet) Reset()                    { *m = RejectAssistEventRet{} }
func (m *RejectAssistEventRet) String() string            { return proto.CompactTextString(m) }
func (*RejectAssistEventRet) ProtoMessage()               {}
func (*RejectAssistEventRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{37} }

func (m *RejectAssistEventRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 加入招募
type AcceptAssistEvent struct {
	EventID  int32  `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Uid      int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Msg      string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *AcceptAssistEvent) Reset()                    { *m = AcceptAssistEvent{} }
func (m *AcceptAssistEvent) String() string            { return proto.CompactTextString(m) }
func (*AcceptAssistEvent) ProtoMessage()               {}
func (*AcceptAssistEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{38} }

func (m *AcceptAssistEvent) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *AcceptAssistEvent) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AcceptAssistEvent) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AcceptAssistEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//
type AcceptAssistEventRet struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *AcceptAssistEventRet) Reset()                    { *m = AcceptAssistEventRet{} }
func (m *AcceptAssistEventRet) String() string            { return proto.CompactTextString(m) }
func (*AcceptAssistEventRet) ProtoMessage()               {}
func (*AcceptAssistEventRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{39} }

func (m *AcceptAssistEventRet) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

// 玩家加入招募推送
type AssistResultPush struct {
	EventID    int32        `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	JoinMember *EventMember `protobuf:"bytes,2,opt,name=joinMember" json:"joinMember,omitempty"`
}

func (m *AssistResultPush) Reset()                    { *m = AssistResultPush{} }
func (m *AssistResultPush) String() string            { return proto.CompactTextString(m) }
func (*AssistResultPush) ProtoMessage()               {}
func (*AssistResultPush) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{40} }

func (m *AssistResultPush) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *AssistResultPush) GetJoinMember() *EventMember {
	if m != nil {
		return m.JoinMember
	}
	return nil
}

type Module_Buff struct {
	Fields []*EventField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (m *Module_Buff) Reset()                    { *m = Module_Buff{} }
func (m *Module_Buff) String() string            { return proto.CompactTextString(m) }
func (*Module_Buff) ProtoMessage()               {}
func (*Module_Buff) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{41} }

func (m *Module_Buff) GetFields() []*EventField {
	if m != nil {
		return m.Fields
	}
	return nil
}

// 事件属性
type EventField struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EventField) Reset()                    { *m = EventField{} }
func (m *EventField) String() string            { return proto.CompactTextString(m) }
func (*EventField) ProtoMessage()               {}
func (*EventField) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{42} }

func (m *EventField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventField) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 更新事件字段信息
type UpdateEventField struct {
	EventID int32  `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value   int32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UpdateEventField) Reset()                    { *m = UpdateEventField{} }
func (m *UpdateEventField) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventField) ProtoMessage()               {}
func (*UpdateEventField) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{43} }

func (m *UpdateEventField) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *UpdateEventField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateEventField) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type UpdateEventFieldRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UpdateEventFieldRet) Reset()                    { *m = UpdateEventFieldRet{} }
func (m *UpdateEventFieldRet) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventFieldRet) ProtoMessage()               {}
func (*UpdateEventFieldRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{44} }

func (m *UpdateEventFieldRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 事件扩展字段变更推送
type EventFieldPush struct {
	EventID int32       `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Field   *EventField `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
}

func (m *EventFieldPush) Reset()                    { *m = EventFieldPush{} }
func (m *EventFieldPush) String() string            { return proto.CompactTextString(m) }
func (*EventFieldPush) ProtoMessage()               {}
func (*EventFieldPush) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{45} }

func (m *EventFieldPush) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *EventFieldPush) GetField() *EventField {
	if m != nil {
		return m.Field
	}
	return nil
}

// -------------------------------切换星球模块--------------------------------------
type Module_Switch_Star struct {
}

func (m *Module_Switch_Star) Reset()                    { *m = Module_Switch_Star{} }
func (m *Module_Switch_Star) String() string            { return proto.CompactTextString(m) }
func (*Module_Switch_Star) ProtoMessage()               {}
func (*Module_Switch_Star) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{46} }

// --------------101 刷信仰模块---------
type GetFaith struct {
	EventID    int32    `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	BelieverID []string `protobuf:"bytes,2,rep,name=believerID" json:"believerID,omitempty"`
}

func (m *GetFaith) Reset()                    { *m = GetFaith{} }
func (m *GetFaith) String() string            { return proto.CompactTextString(m) }
func (*GetFaith) ProtoMessage()               {}
func (*GetFaith) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{47} }

func (m *GetFaith) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *GetFaith) GetBelieverID() []string {
	if m != nil {
		return m.BelieverID
	}
	return nil
}

type GetFaithRet struct {
	Faith      int32  `protobuf:"varint,1,opt,name=faith,proto3" json:"faith,omitempty"`
	BelieverID string `protobuf:"bytes,2,opt,name=believerID,proto3" json:"believerID,omitempty"`
}

func (m *GetFaithRet) Reset()                    { *m = GetFaithRet{} }
func (m *GetFaithRet) String() string            { return proto.CompactTextString(m) }
func (*GetFaithRet) ProtoMessage()               {}
func (*GetFaithRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{48} }

func (m *GetFaithRet) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *GetFaithRet) GetBelieverID() string {
	if m != nil {
		return m.BelieverID
	}
	return ""
}

// -------------102 刷信徒模块-----------
type GetBeliever struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (m *GetBeliever) Reset()                    { *m = GetBeliever{} }
func (m *GetBeliever) String() string            { return proto.CompactTextString(m) }
func (*GetBeliever) ProtoMessage()               {}
func (*GetBeliever) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{49} }

func (m *GetBeliever) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

type GetBelieverRet struct {
	Believer []*BelieverInfo `protobuf:"bytes,1,rep,name=believer" json:"believer,omitempty"`
}

func (m *GetBelieverRet) Reset()                    { *m = GetBelieverRet{} }
func (m *GetBelieverRet) String() string            { return proto.CompactTextString(m) }
func (*GetBelieverRet) ProtoMessage()               {}
func (*GetBelieverRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{50} }

func (m *GetBelieverRet) GetBeliever() []*BelieverInfo {
	if m != nil {
		return m.Believer
	}
	return nil
}

// -------------103 抢信仰-----------
type LootFaith struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Faith   int32 `protobuf:"varint,2,opt,name=faith,proto3" json:"faith,omitempty"`
	// repeated string believerID = 2;             //选择区域内的信徒
	Mutual bool `protobuf:"varint,3,opt,name=mutual,proto3" json:"mutual,omitempty"`
}

func (m *LootFaith) Reset()                    { *m = LootFaith{} }
func (m *LootFaith) String() string            { return proto.CompactTextString(m) }
func (*LootFaith) ProtoMessage()               {}
func (*LootFaith) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{51} }

func (m *LootFaith) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *LootFaith) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *LootFaith) GetMutual() bool {
	if m != nil {
		return m.Mutual
	}
	return false
}

type LootFaithRet struct {
	Faith int32 `protobuf:"varint,1,opt,name=faith,proto3" json:"faith,omitempty"`
	// string believerID = 2; //选中的信徒
	TargetID    int32 `protobuf:"varint,2,opt,name=targetID,proto3" json:"targetID,omitempty"`
	Shield      bool  `protobuf:"varint,3,opt,name=shield,proto3" json:"shield,omitempty"`
	HasBuilding bool  `protobuf:"varint,4,opt,name=hasBuilding,proto3" json:"hasBuilding,omitempty"`
	IsMax       bool  `protobuf:"varint,5,opt,name=isMax,proto3" json:"isMax,omitempty"`
}

func (m *LootFaithRet) Reset()                    { *m = LootFaithRet{} }
func (m *LootFaithRet) String() string            { return proto.CompactTextString(m) }
func (*LootFaithRet) ProtoMessage()               {}
func (*LootFaithRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{52} }

func (m *LootFaithRet) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *LootFaithRet) GetTargetID() int32 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

func (m *LootFaithRet) GetShield() bool {
	if m != nil {
		return m.Shield
	}
	return false
}

func (m *LootFaithRet) GetHasBuilding() bool {
	if m != nil {
		return m.HasBuilding
	}
	return false
}

func (m *LootFaithRet) GetIsMax() bool {
	if m != nil {
		return m.IsMax
	}
	return false
}

// -------------104 抢信仰-----------
type AtkStarBuilding struct {
	EventID       int32   `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	BuildingID    int32   `protobuf:"varint,2,opt,name=buildingID,proto3" json:"buildingID,omitempty"`
	AttackUid     int32   `protobuf:"varint,3,opt,name=attackUid,proto3" json:"attackUid,omitempty"`
	DestUid       int32   `protobuf:"varint,4,opt,name=destUid,proto3" json:"destUid,omitempty"`
	FaithRatio    float32 `protobuf:"fixed32,5,opt,name=faithRatio,proto3" json:"faithRatio,omitempty"`
	BuildingLevel int32   `protobuf:"varint,6,opt,name=buildingLevel,proto3" json:"buildingLevel,omitempty"`
	Success       bool    `protobuf:"varint,7,opt,name=success,proto3" json:"success,omitempty"`
	BuildingHurt  int32   `protobuf:"varint,8,opt,name=buildingHurt,proto3" json:"buildingHurt,omitempty"`
	Mutual        bool    `protobuf:"varint,9,opt,name=mutual,proto3" json:"mutual,omitempty"`
}

func (m *AtkStarBuilding) Reset()                    { *m = AtkStarBuilding{} }
func (m *AtkStarBuilding) String() string            { return proto.CompactTextString(m) }
func (*AtkStarBuilding) ProtoMessage()               {}
func (*AtkStarBuilding) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{53} }

func (m *AtkStarBuilding) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *AtkStarBuilding) GetBuildingID() int32 {
	if m != nil {
		return m.BuildingID
	}
	return 0
}

func (m *AtkStarBuilding) GetAttackUid() int32 {
	if m != nil {
		return m.AttackUid
	}
	return 0
}

func (m *AtkStarBuilding) GetDestUid() int32 {
	if m != nil {
		return m.DestUid
	}
	return 0
}

func (m *AtkStarBuilding) GetFaithRatio() float32 {
	if m != nil {
		return m.FaithRatio
	}
	return 0
}

func (m *AtkStarBuilding) GetBuildingLevel() int32 {
	if m != nil {
		return m.BuildingLevel
	}
	return 0
}

func (m *AtkStarBuilding) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AtkStarBuilding) GetBuildingHurt() int32 {
	if m != nil {
		return m.BuildingHurt
	}
	return 0
}

func (m *AtkStarBuilding) GetMutual() bool {
	if m != nil {
		return m.Mutual
	}
	return false
}

type AtkStarBuildingRet struct {
	Success  bool  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Faith    int32 `protobuf:"varint,2,opt,name=faith,proto3" json:"faith,omitempty"`
	ItemID   int32 `protobuf:"varint,3,opt,name=itemID,proto3" json:"itemID,omitempty"`
	TargetID int32 `protobuf:"varint,4,opt,name=targetID,proto3" json:"targetID,omitempty"`
	Shield   bool  `protobuf:"varint,5,opt,name=shield,proto3" json:"shield,omitempty"`
	IsMax    bool  `protobuf:"varint,6,opt,name=isMax,proto3" json:"isMax,omitempty"`
}

func (m *AtkStarBuildingRet) Reset()                    { *m = AtkStarBuildingRet{} }
func (m *AtkStarBuildingRet) String() string            { return proto.CompactTextString(m) }
func (*AtkStarBuildingRet) ProtoMessage()               {}
func (*AtkStarBuildingRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{54} }

func (m *AtkStarBuildingRet) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AtkStarBuildingRet) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *AtkStarBuildingRet) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *AtkStarBuildingRet) GetTargetID() int32 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

func (m *AtkStarBuildingRet) GetShield() bool {
	if m != nil {
		return m.Shield
	}
	return false
}

func (m *AtkStarBuildingRet) GetIsMax() bool {
	if m != nil {
		return m.IsMax
	}
	return false
}

// -------------105 抢信徒-----------
type LootBeliever struct {
	EventID    int32    `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	BelieverID []string `protobuf:"bytes,2,rep,name=believerID" json:"believerID,omitempty"`
	Mutual     bool     `protobuf:"varint,3,opt,name=mutual,proto3" json:"mutual,omitempty"`
}

func (m *LootBeliever) Reset()                    { *m = LootBeliever{} }
func (m *LootBeliever) String() string            { return proto.CompactTextString(m) }
func (*LootBeliever) ProtoMessage()               {}
func (*LootBeliever) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{55} }

func (m *LootBeliever) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *LootBeliever) GetBelieverID() []string {
	if m != nil {
		return m.BelieverID
	}
	return nil
}

func (m *LootBeliever) GetMutual() bool {
	if m != nil {
		return m.Mutual
	}
	return false
}

type LootBelieverRet struct {
	BelieverID []string `protobuf:"bytes,1,rep,name=believerID" json:"believerID,omitempty"`
	TargetID   int32    `protobuf:"varint,2,opt,name=targetID,proto3" json:"targetID,omitempty"`
	Shield     bool     `protobuf:"varint,3,opt,name=shield,proto3" json:"shield,omitempty"`
	IsMax      bool     `protobuf:"varint,4,opt,name=isMax,proto3" json:"isMax,omitempty"`
}

func (m *LootBelieverRet) Reset()                    { *m = LootBelieverRet{} }
func (m *LootBelieverRet) String() string            { return proto.CompactTextString(m) }
func (*LootBelieverRet) ProtoMessage()               {}
func (*LootBelieverRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{56} }

func (m *LootBelieverRet) GetBelieverID() []string {
	if m != nil {
		return m.BelieverID
	}
	return nil
}

func (m *LootBelieverRet) GetTargetID() int32 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

func (m *LootBelieverRet) GetShield() bool {
	if m != nil {
		return m.Shield
	}
	return false
}

func (m *LootBelieverRet) GetIsMax() bool {
	if m != nil {
		return m.IsMax
	}
	return false
}

// 进入查看事件
type IntoEvent struct {
	Uid     int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	EventID int32 `protobuf:"varint,2,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (m *IntoEvent) Reset()                    { *m = IntoEvent{} }
func (m *IntoEvent) String() string            { return proto.CompactTextString(m) }
func (*IntoEvent) ProtoMessage()               {}
func (*IntoEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{57} }

func (m *IntoEvent) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *IntoEvent) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

// 进入查看事件结果
type IntoEventRet struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *IntoEventRet) Reset()                    { *m = IntoEventRet{} }
func (m *IntoEventRet) String() string            { return proto.CompactTextString(m) }
func (*IntoEventRet) ProtoMessage()               {}
func (*IntoEventRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{58} }

func (m *IntoEventRet) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

// 离开事件  离开事件就不会接收到事件信息的推送
type LeaveEvent struct {
	Uid     int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	EventID int32 `protobuf:"varint,2,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (m *LeaveEvent) Reset()                    { *m = LeaveEvent{} }
func (m *LeaveEvent) String() string            { return proto.CompactTextString(m) }
func (*LeaveEvent) ProtoMessage()               {}
func (*LeaveEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{59} }

func (m *LeaveEvent) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LeaveEvent) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

type LeaveEventRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *LeaveEventRet) Reset()                    { *m = LeaveEventRet{} }
func (m *LeaveEventRet) String() string            { return proto.CompactTextString(m) }
func (*LeaveEventRet) ProtoMessage()               {}
func (*LeaveEventRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{60} }

func (m *LeaveEventRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 发布投票
type PublicVote struct {
	EventID int32   `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Channel []int32 `protobuf:"varint,2,rep,packed,name=channel" json:"channel,omitempty"`
	Uid     []int32 `protobuf:"varint,3,rep,packed,name=uid" json:"uid,omitempty"`
}

func (m *PublicVote) Reset()                    { *m = PublicVote{} }
func (m *PublicVote) String() string            { return proto.CompactTextString(m) }
func (*PublicVote) ProtoMessage()               {}
func (*PublicVote) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{61} }

func (m *PublicVote) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *PublicVote) GetChannel() []int32 {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *PublicVote) GetUid() []int32 {
	if m != nil {
		return m.Uid
	}
	return nil
}

type PublicVoteRet struct {
	EventID      int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	EndTimestamp int64 `protobuf:"varint,2,opt,name=endTimestamp,proto3" json:"endTimestamp,omitempty"`
}

func (m *PublicVoteRet) Reset()                    { *m = PublicVoteRet{} }
func (m *PublicVoteRet) String() string            { return proto.CompactTextString(m) }
func (*PublicVoteRet) ProtoMessage()               {}
func (*PublicVoteRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{62} }

func (m *PublicVoteRet) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *PublicVoteRet) GetEndTimestamp() int64 {
	if m != nil {
		return m.EndTimestamp
	}
	return 0
}

// 事件投票,固定一票，不用传票数
type AddEventVote struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Option  int32 `protobuf:"varint,2,opt,name=option,proto3" json:"option,omitempty"`
	Uid     int32 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *AddEventVote) Reset()                    { *m = AddEventVote{} }
func (m *AddEventVote) String() string            { return proto.CompactTextString(m) }
func (*AddEventVote) ProtoMessage()               {}
func (*AddEventVote) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{63} }

func (m *AddEventVote) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *AddEventVote) GetOption() int32 {
	if m != nil {
		return m.Option
	}
	return 0
}

func (m *AddEventVote) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type AddEventVoteRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AddEventVoteRet) Reset()                    { *m = AddEventVoteRet{} }
func (m *AddEventVoteRet) String() string            { return proto.CompactTextString(m) }
func (*AddEventVoteRet) ProtoMessage()               {}
func (*AddEventVoteRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{64} }

func (m *AddEventVoteRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 投票完成推送
type VoteFinishPush struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Result  *Vote `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *VoteFinishPush) Reset()                    { *m = VoteFinishPush{} }
func (m *VoteFinishPush) String() string            { return proto.CompactTextString(m) }
func (*VoteFinishPush) ProtoMessage()               {}
func (*VoteFinishPush) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{65} }

func (m *VoteFinishPush) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *VoteFinishPush) GetResult() *Vote {
	if m != nil {
		return m.Result
	}
	return nil
}

type VotePush struct {
	EventID int32   `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Vote    []*Vote `protobuf:"bytes,2,rep,name=vote" json:"vote,omitempty"`
}

func (m *VotePush) Reset()                    { *m = VotePush{} }
func (m *VotePush) String() string            { return proto.CompactTextString(m) }
func (*VotePush) ProtoMessage()               {}
func (*VotePush) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{66} }

func (m *VotePush) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *VotePush) GetVote() []*Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type Vote struct {
	No      int32 `protobuf:"varint,1,opt,name=no,proto3" json:"no,omitempty"`
	VoteNum int32 `protobuf:"varint,2,opt,name=voteNum,proto3" json:"voteNum,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{67} }

func (m *Vote) GetNo() int32 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *Vote) GetVoteNum() int32 {
	if m != nil {
		return m.VoteNum
	}
	return 0
}

type DataFlag struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DataFlag) Reset()                    { *m = DataFlag{} }
func (m *DataFlag) String() string            { return proto.CompactTextString(m) }
func (*DataFlag) ProtoMessage()               {}
func (*DataFlag) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{68} }

func (m *DataFlag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DataFlag) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SaveData struct {
	EventID int32       `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Data    []*DataFlag `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *SaveData) Reset()                    { *m = SaveData{} }
func (m *SaveData) String() string            { return proto.CompactTextString(m) }
func (*SaveData) ProtoMessage()               {}
func (*SaveData) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{69} }

func (m *SaveData) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *SaveData) GetData() []*DataFlag {
	if m != nil {
		return m.Data
	}
	return nil
}

type SaveDataRet struct {
	Resule bool `protobuf:"varint,1,opt,name=resule,proto3" json:"resule,omitempty"`
}

func (m *SaveDataRet) Reset()                    { *m = SaveDataRet{} }
func (m *SaveDataRet) String() string            { return proto.CompactTextString(m) }
func (*SaveDataRet) ProtoMessage()               {}
func (*SaveDataRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{70} }

func (m *SaveDataRet) GetResule() bool {
	if m != nil {
		return m.Resule
	}
	return false
}

// -------------------------------------------rpc事件模块内部处理的消息--------------------------------------
// 生成新事件
type GenEvent struct {
	EventType int32  `protobuf:"varint,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Uid       int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Guide     bool   `protobuf:"varint,4,opt,name=guide,proto3" json:"guide,omitempty"`
}

func (m *GenEvent) Reset()                    { *m = GenEvent{} }
func (m *GenEvent) String() string            { return proto.CompactTextString(m) }
func (*GenEvent) ProtoMessage()               {}
func (*GenEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{71} }

func (m *GenEvent) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *GenEvent) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GenEvent) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *GenEvent) GetGuide() bool {
	if m != nil {
		return m.Guide
	}
	return false
}

// 生成新事件结果
type GenEventRet struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *GenEventRet) Reset()                    { *m = GenEventRet{} }
func (m *GenEventRet) String() string            { return proto.CompactTextString(m) }
func (*GenEventRet) ProtoMessage()               {}
func (*GenEventRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{72} }

func (m *GenEventRet) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

// 事件字段变更推送
type EventFieldChange struct {
	EventID int32  `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value   int32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EventFieldChange) Reset()                    { *m = EventFieldChange{} }
func (m *EventFieldChange) String() string            { return proto.CompactTextString(m) }
func (*EventFieldChange) ProtoMessage()               {}
func (*EventFieldChange) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{73} }

func (m *EventFieldChange) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *EventFieldChange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventFieldChange) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RemoveEvent struct {
	EventID int32 `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Uid     int32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *RemoveEvent) Reset()                    { *m = RemoveEvent{} }
func (m *RemoveEvent) String() string            { return proto.CompactTextString(m) }
func (*RemoveEvent) ProtoMessage()               {}
func (*RemoveEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{74} }

func (m *RemoveEvent) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *RemoveEvent) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 事件完成,发送给用户模块做结算
type EventDone struct {
	EventID  int32   `protobuf:"varint,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Reward   *Reward `protobuf:"bytes,2,opt,name=reward" json:"reward,omitempty"`
	Guide    bool    `protobuf:"varint,3,opt,name=guide,proto3" json:"guide,omitempty"`
	TargetID int32   `protobuf:"varint,4,opt,name=targetID,proto3" json:"targetID,omitempty"`
}

func (m *EventDone) Reset()                    { *m = EventDone{} }
func (m *EventDone) String() string            { return proto.CompactTextString(m) }
func (*EventDone) ProtoMessage()               {}
func (*EventDone) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{75} }

func (m *EventDone) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *EventDone) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *EventDone) GetGuide() bool {
	if m != nil {
		return m.Guide
	}
	return false
}

func (m *EventDone) GetTargetID() int32 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

type EventDoneRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *EventDoneRet) Reset()                    { *m = EventDoneRet{} }
func (m *EventDoneRet) String() string            { return proto.CompactTextString(m) }
func (*EventDoneRet) ProtoMessage()               {}
func (*EventDoneRet) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{76} }

func (m *EventDoneRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*EventMember)(nil), "protocol.EventMember")
	proto.RegisterType((*Event)(nil), "protocol.Event")
	proto.RegisterType((*Event_Module)(nil), "protocol.Event_Module")
	proto.RegisterType((*DisplayStarUidPush)(nil), "protocol.displayStarUid_push")
	proto.RegisterType((*GetEventModule)(nil), "protocol.get_event_module")
	proto.RegisterType((*GetEventModuleRet)(nil), "protocol.get_event_module_ret")
	proto.RegisterType((*DoneEventStep)(nil), "protocol.done_event_step")
	proto.RegisterType((*DoneEventStepRet)(nil), "protocol.done_event_step_ret")
	proto.RegisterType((*EventStepPush)(nil), "protocol.event_step_push")
	proto.RegisterType((*GetEvent)(nil), "protocol.get_event")
	proto.RegisterType((*GetEventRet)(nil), "protocol.get_event_ret")
	proto.RegisterType((*Module_Display)(nil), "protocol.Module_Display")
	proto.RegisterType((*Module_Storyboard)(nil), "protocol.Module_Storyboard")
	proto.RegisterType((*Module_Random_Target)(nil), "protocol.Module_Random_Target")
	proto.RegisterType((*RandomTarget)(nil), "protocol.random_target")
	proto.RegisterType((*RandomTargetRet)(nil), "protocol.random_target_ret")
	proto.RegisterType((*OpenCard)(nil), "protocol.open_card")
	proto.RegisterType((*OpenCardRet)(nil), "protocol.open_card_ret")
	proto.RegisterType((*CardReward)(nil), "protocol.CardReward")
	proto.RegisterType((*RandomGuideRobot)(nil), "protocol.random_guide_robot")
	proto.RegisterType((*RandomGuideRobotRet)(nil), "protocol.random_guide_robot_ret")
	proto.RegisterType((*RandomEventRobot)(nil), "protocol.random_event_robot")
	proto.RegisterType((*RandomEventRobotRet)(nil), "protocol.random_event_robot_ret")
	proto.RegisterType((*GetEventRobot)(nil), "protocol.get_event_robot")
	proto.RegisterType((*GetEventRobotRet)(nil), "protocol.get_event_robot_ret")
	proto.RegisterType((*Target)(nil), "protocol.Target")
	proto.RegisterType((*SelectEventTarget)(nil), "protocol.select_event_target")
	proto.RegisterType((*SelectEventTargetRet)(nil), "protocol.select_event_target_ret")
	proto.RegisterType((*Module_Recruit)(nil), "protocol.Module_Recruit")
	proto.RegisterType((*PublicEvent)(nil), "protocol.public_event")
	proto.RegisterType((*PublicEventRet)(nil), "protocol.public_event_ret")
	proto.RegisterType((*AssistEventRequest)(nil), "protocol.assist_event_request")
	proto.RegisterType((*AssistEventRequestRet)(nil), "protocol.assist_event_request_ret")
	proto.RegisterType((*AssistEventRequestList)(nil), "protocol.assist_event_request_list")
	proto.RegisterType((*AssistEventRequestListRet)(nil), "protocol.assist_event_request_list_ret")
	proto.RegisterType((*AssistEventRequestPush)(nil), "protocol.assist_event_request_push")
	proto.RegisterType((*RejectAssistEvent)(nil), "protocol.reject_assist_event")
	proto.RegisterType((*RejectAssistEventRet)(nil), "protocol.reject_assist_event_ret")
	proto.RegisterType((*AcceptAssistEvent)(nil), "protocol.accept_assist_event")
	proto.RegisterType((*AcceptAssistEventRet)(nil), "protocol.accept_assist_event_ret")
	proto.RegisterType((*AssistResultPush)(nil), "protocol.assist_result_push")
	proto.RegisterType((*Module_Buff)(nil), "protocol.Module_Buff")
	proto.RegisterType((*EventField)(nil), "protocol.EventField")
	proto.RegisterType((*UpdateEventField)(nil), "protocol.update_event_field")
	proto.RegisterType((*UpdateEventFieldRet)(nil), "protocol.update_event_field_ret")
	proto.RegisterType((*EventFieldPush)(nil), "protocol.event_field_push")
	proto.RegisterType((*Module_Switch_Star)(nil), "protocol.Module_Switch_Star")
	proto.RegisterType((*GetFaith)(nil), "protocol.get_faith")
	proto.RegisterType((*GetFaithRet)(nil), "protocol.get_faith_ret")
	proto.RegisterType((*GetBeliever)(nil), "protocol.get_believer")
	proto.RegisterType((*GetBelieverRet)(nil), "protocol.get_believer_ret")
	proto.RegisterType((*LootFaith)(nil), "protocol.loot_faith")
	proto.RegisterType((*LootFaithRet)(nil), "protocol.loot_faith_ret")
	proto.RegisterType((*AtkStarBuilding)(nil), "protocol.atk_star_building")
	proto.RegisterType((*AtkStarBuildingRet)(nil), "protocol.atk_star_building_ret")
	proto.RegisterType((*LootBeliever)(nil), "protocol.loot_believer")
	proto.RegisterType((*LootBelieverRet)(nil), "protocol.loot_believer_ret")
	proto.RegisterType((*IntoEvent)(nil), "protocol.into_event")
	proto.RegisterType((*IntoEventRet)(nil), "protocol.into_event_ret")
	proto.RegisterType((*LeaveEvent)(nil), "protocol.leave_event")
	proto.RegisterType((*LeaveEventRet)(nil), "protocol.leave_event_ret")
	proto.RegisterType((*PublicVote)(nil), "protocol.public_vote")
	proto.RegisterType((*PublicVoteRet)(nil), "protocol.public_vote_ret")
	proto.RegisterType((*AddEventVote)(nil), "protocol.add_event_vote")
	proto.RegisterType((*AddEventVoteRet)(nil), "protocol.add_event_vote_ret")
	proto.RegisterType((*VoteFinishPush)(nil), "protocol.vote_finish_push")
	proto.RegisterType((*VotePush)(nil), "protocol.vote_push")
	proto.RegisterType((*Vote)(nil), "protocol.Vote")
	proto.RegisterType((*DataFlag)(nil), "protocol.data_flag")
	proto.RegisterType((*SaveData)(nil), "protocol.save_data")
	proto.RegisterType((*SaveDataRet)(nil), "protocol.save_data_ret")
	proto.RegisterType((*GenEvent)(nil), "protocol.gen_event")
	proto.RegisterType((*GenEventRet)(nil), "protocol.gen_event_ret")
	proto.RegisterType((*EventFieldChange)(nil), "protocol.event_field_change")
	proto.RegisterType((*RemoveEvent)(nil), "protocol.remove_event")
	proto.RegisterType((*EventDone)(nil), "protocol.event_done")
	proto.RegisterType((*EventDoneRet)(nil), "protocol.event_done_ret")
}
func (m *EventMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Icon != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Icon))
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.BaseID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.BaseID))
	}
	if m.Step != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Step))
	}
	if m.StepModule != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.StepModule.Size()))
		n1, err := m.StepModule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DisplayStarUid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.DisplayStarUid))
	}
	if m.CallMember != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.CallMember.Size()))
		n2, err := m.CallMember.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Event_Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Module) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.ModuleID))
	}
	if m.StartTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.StartTimestamp))
	}
	if m.EndTimestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EndTimestamp))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DisplayStarUidPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisplayStarUidPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DisplayStarUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.DisplayStarUid))
	}
	return i, nil
}

func (m *GetEventModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventModule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.ModuleID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.ModuleID))
	}
	return i, nil
}

func (m *GetEventModuleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventModuleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.StepModule != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.StepModule.Size()))
		n3, err := m.StepModule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *DoneEventStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoneEventStep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Step != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Step))
	}
	return i, nil
}

func (m *DoneEventStepRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoneEventStepRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EventStepPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStepPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.BaseID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.BaseID))
	}
	if m.Step != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Step))
	}
	if m.StepModule != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.StepModule.Size()))
		n4, err := m.StepModule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GetEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventID) > 0 {
		dAtA6 := make([]byte, len(m.EventID)*10)
		var j5 int
		for _, num1 := range m.EventID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *GetEventRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		for _, msg := range m.Event {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Module_Display) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module_Display) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Module_Storyboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module_Storyboard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Module_Random_Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module_Random_Target) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Target.Size()))
		n7, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *RandomTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	if len(m.Filter) > 0 {
		dAtA9 := make([]byte, len(m.Filter)*10)
		var j8 int
		for _, num1 := range m.Filter {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.Guide {
		dAtA[i] = 0x40
		i++
		if m.Guide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MutualID != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.MutualID))
	}
	if m.FriendID != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.FriendID))
	}
	if m.EventType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventType))
	}
	if m.Num != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Num))
	}
	if m.RobotFilter {
		dAtA[i] = 0x68
		i++
		if m.RobotFilter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AlwaysTarget {
		dAtA[i] = 0x70
		i++
		if m.AlwaysTarget {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RandomTargetRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomTargetRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OpenCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *OpenCardRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenCardRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Result))
	}
	if m.Reward1 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Reward1.Size()))
		n10, err := m.Reward1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Reward2 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Reward2.Size()))
		n11, err := m.Reward2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Reward3 != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Reward3.Size()))
		n12, err := m.Reward3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *CardReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Type))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Value))
	}
	if m.Target != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Target.Size()))
		n13, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.StarInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.StarInfo.Size()))
		n14, err := m.StarInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *RandomGuideRobot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomGuideRobot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *RandomGuideRobotRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomGuideRobotRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RandomEventRobot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomEventRobot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventType))
	}
	if len(m.Level) > 0 {
		dAtA16 := make([]byte, len(m.Level)*10)
		var j15 int
		for _, num1 := range m.Level {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	return i, nil
}

func (m *RandomEventRobotRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomEventRobotRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, msg := range m.Targets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetEventRobot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventRobot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetEventRobotRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventRobotRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Target.Size()))
		n17, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.StarType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.StarType))
	}
	if m.Friend {
		dAtA[i] = 0x28
		i++
		if m.Friend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mutual {
		dAtA[i] = 0x30
		i++
		if m.Mutual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BelieverTotalLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.BelieverTotalLevel))
	}
	if m.BuildingTotalLevel != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.BuildingTotalLevel))
	}
	return i, nil
}

func (m *SelectEventTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectEventTarget) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TargetId))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	return i, nil
}

func (m *SelectEventTargetRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectEventTargetRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StarInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.StarInfo.Size()))
		n18, err := m.StarInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Shield != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Shield.Size()))
		n19, err := m.Shield.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *Module_Recruit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module_Recruit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JoinMember) > 0 {
		for _, msg := range m.JoinMember {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PublicEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Channel) > 0 {
		dAtA21 := make([]byte, len(m.Channel)*10)
		var j20 int
		for _, num1 := range m.Channel {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	if len(m.Uid) > 0 {
		dAtA23 := make([]byte, len(m.Uid)*10)
		var j22 int
		for _, num1 := range m.Uid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	return i, nil
}

func (m *PublicEventRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicEventRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.EndTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EndTimestamp))
	}
	return i, nil
}

func (m *AssistEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistEventRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *AssistEventRequestRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistEventRequestRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AssistEventRequestList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistEventRequestList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AssistEventRequestListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistEventRequestListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AssistEventRequestPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistEventRequestPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Request.Size()))
		n24, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *RejectAssistEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectAssistEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	return i, nil
}

func (m *RejectAssistEventRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectAssistEventRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AcceptAssistEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptAssistEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *AcceptAssistEventRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptAssistEventRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Event.Size()))
		n25, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *AssistResultPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssistResultPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.JoinMember != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.JoinMember.Size()))
		n26, err := m.JoinMember.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *Module_Buff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module_Buff) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventField) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *UpdateEventField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventField) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *UpdateEventFieldRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventFieldRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EventFieldPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFieldPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Field != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Field.Size()))
		n27, err := m.Field.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *Module_Switch_Star) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module_Switch_Star) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetFaith) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFaith) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetFaithRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFaithRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Faith != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Faith))
	}
	if len(m.BelieverID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BelieverID)))
		i += copy(dAtA[i:], m.BelieverID)
	}
	return i, nil
}

func (m *GetBeliever) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBeliever) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	return i, nil
}

func (m *GetBelieverRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBelieverRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, msg := range m.Believer {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LootFaith) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootFaith) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Faith != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Faith))
	}
	if m.Mutual {
		dAtA[i] = 0x18
		i++
		if m.Mutual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LootFaithRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootFaithRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Faith != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Faith))
	}
	if m.TargetID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TargetID))
	}
	if m.Shield {
		dAtA[i] = 0x18
		i++
		if m.Shield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasBuilding {
		dAtA[i] = 0x20
		i++
		if m.HasBuilding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMax {
		dAtA[i] = 0x28
		i++
		if m.IsMax {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AtkStarBuilding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtkStarBuilding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.BuildingID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.BuildingID))
	}
	if m.AttackUid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.AttackUid))
	}
	if m.DestUid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.DestUid))
	}
	if m.FaithRatio != 0 {
		dAtA[i] = 0x2d
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FaithRatio))))
		i += 4
	}
	if m.BuildingLevel != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.BuildingLevel))
	}
	if m.Success {
		dAtA[i] = 0x38
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BuildingHurt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.BuildingHurt))
	}
	if m.Mutual {
		dAtA[i] = 0x48
		i++
		if m.Mutual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AtkStarBuildingRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtkStarBuildingRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Faith != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Faith))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.ItemID))
	}
	if m.TargetID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TargetID))
	}
	if m.Shield {
		dAtA[i] = 0x28
		i++
		if m.Shield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMax {
		dAtA[i] = 0x30
		i++
		if m.IsMax {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LootBeliever) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootBeliever) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Mutual {
		dAtA[i] = 0x18
		i++
		if m.Mutual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LootBelieverRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootBelieverRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TargetID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TargetID))
	}
	if m.Shield {
		dAtA[i] = 0x18
		i++
		if m.Shield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMax {
		dAtA[i] = 0x20
		i++
		if m.IsMax {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *IntoEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntoEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	if m.EventID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	return i, nil
}

func (m *IntoEventRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntoEventRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Event.Size()))
		n28, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *LeaveEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	if m.EventID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	return i, nil
}

func (m *LeaveEventRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveEventRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PublicVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.Channel) > 0 {
		dAtA30 := make([]byte, len(m.Channel)*10)
		var j29 int
		for _, num1 := range m.Channel {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j29))
		i += copy(dAtA[i:], dAtA30[:j29])
	}
	if len(m.Uid) > 0 {
		dAtA32 := make([]byte, len(m.Uid)*10)
		var j31 int
		for _, num1 := range m.Uid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	return i, nil
}

func (m *PublicVoteRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicVoteRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.EndTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EndTimestamp))
	}
	return i, nil
}

func (m *AddEventVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEventVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Option != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Option))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *AddEventVoteRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEventVoteRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *VoteFinishPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteFinishPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Result.Size()))
		n33, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *VotePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotePush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.Vote) > 0 {
		for _, msg := range m.Vote {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.No != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.No))
	}
	if m.VoteNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.VoteNum))
	}
	return i, nil
}

func (m *DataFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataFlag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SaveData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SaveDataRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDataRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resule {
		dAtA[i] = 0x8
		i++
		if m.Resule {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GenEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventType))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Guide {
		dAtA[i] = 0x20
		i++
		if m.Guide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GenEventRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenEventRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Event.Size()))
		n34, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *EventFieldChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFieldChange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *RemoveEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *EventDone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventID))
	}
	if m.Reward != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Reward.Size()))
		n35, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Guide {
		dAtA[i] = 0x18
		i++
		if m.Guide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TargetID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TargetID))
	}
	return i, nil
}

func (m *EventDoneRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDoneRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventMember) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovEvent(uint64(m.Icon))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.BaseID != 0 {
		n += 1 + sovEvent(uint64(m.BaseID))
	}
	if m.Step != 0 {
		n += 1 + sovEvent(uint64(m.Step))
	}
	if m.StepModule != nil {
		l = m.StepModule.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.DisplayStarUid != 0 {
		n += 1 + sovEvent(uint64(m.DisplayStarUid))
	}
	if m.CallMember != nil {
		l = m.CallMember.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Event_Module) Size() (n int) {
	var l int
	_ = l
	if m.ModuleID != 0 {
		n += 1 + sovEvent(uint64(m.ModuleID))
	}
	if m.StartTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.StartTimestamp))
	}
	if m.EndTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.EndTimestamp))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DisplayStarUidPush) Size() (n int) {
	var l int
	_ = l
	if m.DisplayStarUid != 0 {
		n += 1 + sovEvent(uint64(m.DisplayStarUid))
	}
	return n
}

func (m *GetEventModule) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.ModuleID != 0 {
		n += 1 + sovEvent(uint64(m.ModuleID))
	}
	return n
}

func (m *GetEventModuleRet) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.StepModule != nil {
		l = m.StepModule.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *DoneEventStep) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Step != 0 {
		n += 1 + sovEvent(uint64(m.Step))
	}
	return n
}

func (m *DoneEventStepRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *EventStepPush) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.BaseID != 0 {
		n += 1 + sovEvent(uint64(m.BaseID))
	}
	if m.Step != 0 {
		n += 1 + sovEvent(uint64(m.Step))
	}
	if m.StepModule != nil {
		l = m.StepModule.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *GetEvent) Size() (n int) {
	var l int
	_ = l
	if len(m.EventID) > 0 {
		l = 0
		for _, e := range m.EventID {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *GetEventRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Event) > 0 {
		for _, e := range m.Event {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *Module_Display) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Module_Storyboard) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Module_Random_Target) Size() (n int) {
	var l int
	_ = l
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *RandomTarget) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	if len(m.Filter) > 0 {
		l = 0
		for _, e := range m.Filter {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	if m.Guide {
		n += 2
	}
	if m.MutualID != 0 {
		n += 1 + sovEvent(uint64(m.MutualID))
	}
	if m.FriendID != 0 {
		n += 1 + sovEvent(uint64(m.FriendID))
	}
	if m.EventType != 0 {
		n += 1 + sovEvent(uint64(m.EventType))
	}
	if m.Num != 0 {
		n += 1 + sovEvent(uint64(m.Num))
	}
	if m.RobotFilter {
		n += 2
	}
	if m.AlwaysTarget {
		n += 2
	}
	return n
}

func (m *RandomTargetRet) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *OpenCard) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	return n
}

func (m *OpenCardRet) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovEvent(uint64(m.Result))
	}
	if m.Reward1 != nil {
		l = m.Reward1.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Reward2 != nil {
		l = m.Reward2.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Reward3 != nil {
		l = m.Reward3.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *CardReward) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEvent(uint64(m.Type))
	}
	if m.Value != 0 {
		n += 1 + sovEvent(uint64(m.Value))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.StarInfo != nil {
		l = m.StarInfo.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *RandomGuideRobot) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovEvent(uint64(m.Num))
	}
	return n
}

func (m *RandomGuideRobotRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *RandomEventRobot) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovEvent(uint64(m.EventType))
	}
	if len(m.Level) > 0 {
		l = 0
		for _, e := range m.Level {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *RandomEventRobotRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, e := range m.Targets {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *GetEventRobot) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	return n
}

func (m *GetEventRobotRet) Size() (n int) {
	var l int
	_ = l
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Target) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.StarType != 0 {
		n += 1 + sovEvent(uint64(m.StarType))
	}
	if m.Friend {
		n += 2
	}
	if m.Mutual {
		n += 2
	}
	if m.BelieverTotalLevel != 0 {
		n += 1 + sovEvent(uint64(m.BelieverTotalLevel))
	}
	if m.BuildingTotalLevel != 0 {
		n += 1 + sovEvent(uint64(m.BuildingTotalLevel))
	}
	return n
}

func (m *SelectEventTarget) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.TargetId != 0 {
		n += 1 + sovEvent(uint64(m.TargetId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *SelectEventTargetRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.StarInfo != nil {
		l = m.StarInfo.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Shield != nil {
		l = m.Shield.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Module_Recruit) Size() (n int) {
	var l int
	_ = l
	if len(m.JoinMember) > 0 {
		for _, e := range m.JoinMember {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *PublicEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Channel) > 0 {
		l = 0
		for _, e := range m.Channel {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	if len(m.Uid) > 0 {
		l = 0
		for _, e := range m.Uid {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *PublicEventRet) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.EndTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.EndTimestamp))
	}
	return n
}

func (m *AssistEventRequest) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovEvent(uint64(m.Timestamp))
	}
	return n
}

func (m *AssistEventRequestRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *AssistEventRequestList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AssistEventRequestListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *AssistEventRequestPush) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *RejectAssistEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	return n
}

func (m *RejectAssistEventRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *AcceptAssistEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *AcceptAssistEventRet) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *AssistResultPush) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.JoinMember != nil {
		l = m.JoinMember.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Module_Buff) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventField) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovEvent(uint64(m.Value))
	}
	return n
}

func (m *UpdateEventField) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovEvent(uint64(m.Value))
	}
	return n
}

func (m *UpdateEventFieldRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *EventFieldPush) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Field != nil {
		l = m.Field.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *Module_Switch_Star) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetFaith) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *GetFaithRet) Size() (n int) {
	var l int
	_ = l
	if m.Faith != 0 {
		n += 1 + sovEvent(uint64(m.Faith))
	}
	l = len(m.BelieverID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *GetBeliever) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	return n
}

func (m *GetBelieverRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Believer) > 0 {
		for _, e := range m.Believer {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *LootFaith) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Faith != 0 {
		n += 1 + sovEvent(uint64(m.Faith))
	}
	if m.Mutual {
		n += 2
	}
	return n
}

func (m *LootFaithRet) Size() (n int) {
	var l int
	_ = l
	if m.Faith != 0 {
		n += 1 + sovEvent(uint64(m.Faith))
	}
	if m.TargetID != 0 {
		n += 1 + sovEvent(uint64(m.TargetID))
	}
	if m.Shield {
		n += 2
	}
	if m.HasBuilding {
		n += 2
	}
	if m.IsMax {
		n += 2
	}
	return n
}

func (m *AtkStarBuilding) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.BuildingID != 0 {
		n += 1 + sovEvent(uint64(m.BuildingID))
	}
	if m.AttackUid != 0 {
		n += 1 + sovEvent(uint64(m.AttackUid))
	}
	if m.DestUid != 0 {
		n += 1 + sovEvent(uint64(m.DestUid))
	}
	if m.FaithRatio != 0 {
		n += 5
	}
	if m.BuildingLevel != 0 {
		n += 1 + sovEvent(uint64(m.BuildingLevel))
	}
	if m.Success {
		n += 2
	}
	if m.BuildingHurt != 0 {
		n += 1 + sovEvent(uint64(m.BuildingHurt))
	}
	if m.Mutual {
		n += 2
	}
	return n
}

func (m *AtkStarBuildingRet) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.Faith != 0 {
		n += 1 + sovEvent(uint64(m.Faith))
	}
	if m.ItemID != 0 {
		n += 1 + sovEvent(uint64(m.ItemID))
	}
	if m.TargetID != 0 {
		n += 1 + sovEvent(uint64(m.TargetID))
	}
	if m.Shield {
		n += 2
	}
	if m.IsMax {
		n += 2
	}
	return n
}

func (m *LootBeliever) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.Mutual {
		n += 2
	}
	return n
}

func (m *LootBelieverRet) Size() (n int) {
	var l int
	_ = l
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.TargetID != 0 {
		n += 1 + sovEvent(uint64(m.TargetID))
	}
	if m.Shield {
		n += 2
	}
	if m.IsMax {
		n += 2
	}
	return n
}

func (m *IntoEvent) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	return n
}

func (m *IntoEventRet) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *LeaveEvent) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	return n
}

func (m *LeaveEventRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *PublicVote) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if len(m.Channel) > 0 {
		l = 0
		for _, e := range m.Channel {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	if len(m.Uid) > 0 {
		l = 0
		for _, e := range m.Uid {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *PublicVoteRet) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.EndTimestamp != 0 {
		n += 1 + sovEvent(uint64(m.EndTimestamp))
	}
	return n
}

func (m *AddEventVote) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Option != 0 {
		n += 1 + sovEvent(uint64(m.Option))
	}
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	return n
}

func (m *AddEventVoteRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *VoteFinishPush) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *VotePush) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if len(m.Vote) > 0 {
		for _, e := range m.Vote {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *Vote) Size() (n int) {
	var l int
	_ = l
	if m.No != 0 {
		n += 1 + sovEvent(uint64(m.No))
	}
	if m.VoteNum != 0 {
		n += 1 + sovEvent(uint64(m.VoteNum))
	}
	return n
}

func (m *DataFlag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovEvent(uint64(m.Value))
	}
	return n
}

func (m *SaveData) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *SaveDataRet) Size() (n int) {
	var l int
	_ = l
	if m.Resule {
		n += 2
	}
	return n
}

func (m *GenEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovEvent(uint64(m.EventType))
	}
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Guide {
		n += 2
	}
	return n
}

func (m *GenEventRet) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventFieldChange) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovEvent(uint64(m.Value))
	}
	return n
}

func (m *RemoveEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Uid != 0 {
		n += 1 + sovEvent(uint64(m.Uid))
	}
	return n
}

func (m *EventDone) Size() (n int) {
	var l int
	_ = l
	if m.EventID != 0 {
		n += 1 + sovEvent(uint64(m.EventID))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Guide {
		n += 2
	}
	if m.TargetID != 0 {
		n += 1 + sovEvent(uint64(m.TargetID))
	}
	return n
}

func (m *EventDoneRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseID", wireType)
			}
			m.BaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StepModule == nil {
				m.StepModule = &Event_Module{}
			}
			if err := m.StepModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayStarUid", wireType)
			}
			m.DisplayStarUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayStarUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallMember == nil {
				m.CallMember = &EventMember{}
			}
			if err := m.CallMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event_Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event_Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimestamp", wireType)
			}
			m.StartTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			m.EndTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisplayStarUidPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: displayStarUid_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: displayStarUid_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayStarUid", wireType)
			}
			m.DisplayStarUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayStarUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_event_module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_event_module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleID", wireType)
			}
			m.ModuleID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventModuleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_event_module_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_event_module_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StepModule == nil {
				m.StepModule = &Event_Module{}
			}
			if err := m.StepModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoneEventStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: done_event_step: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: done_event_step: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoneEventStepRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: done_event_step_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: done_event_step_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStepPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: event_step_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: event_step_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseID", wireType)
			}
			m.BaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StepModule == nil {
				m.StepModule = &Event_Module{}
			}
			if err := m.StepModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EventID = append(m.EventID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EventID = append(m.EventID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_event_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_event_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event, &Event{})
			if err := m.Event[len(m.Event)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module_Display) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module_Display: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module_Display: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module_Storyboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module_Storyboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module_Storyboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module_Random_Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module_Random_Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module_Random_Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &EventMember{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Filter = append(m.Filter, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Filter = append(m.Filter, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guide = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutualID", wireType)
			}
			m.MutualID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MutualID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendID", wireType)
			}
			m.FriendID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobotFilter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RobotFilter = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysTarget", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlwaysTarget = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomTargetRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_target_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_target_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &Target{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: open_card: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: open_card: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenCardRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: open_card_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: open_card_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward1 == nil {
				m.Reward1 = &CardReward{}
			}
			if err := m.Reward1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward2 == nil {
				m.Reward2 = &CardReward{}
			}
			if err := m.Reward2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward3 == nil {
				m.Reward3 = &CardReward{}
			}
			if err := m.Reward3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StarInfo == nil {
				m.StarInfo = &StarInfoDetail{}
			}
			if err := m.StarInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomGuideRobot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_guide_robot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_guide_robot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomGuideRobotRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_guide_robot_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_guide_robot_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &Target{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomEventRobot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_event_robot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_event_robot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Level = append(m.Level, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Level = append(m.Level, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomEventRobotRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_event_robot_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_event_robot_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, &Target{})
			if err := m.Targets[len(m.Targets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventRobot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_event_robot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_event_robot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventRobotRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_event_robot_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_event_robot_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarType", wireType)
			}
			m.StarType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Friend = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mutual = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverTotalLevel", wireType)
			}
			m.BelieverTotalLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BelieverTotalLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingTotalLevel", wireType)
			}
			m.BuildingTotalLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingTotalLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectEventTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: select_event_target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: select_event_target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectEventTargetRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: select_event_target_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: select_event_target_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StarInfo == nil {
				m.StarInfo = &StarInfoDetail{}
			}
			if err := m.StarInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shield == nil {
				m.Shield = &Shield{}
			}
			if err := m.Shield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module_Recruit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module_Recruit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module_Recruit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinMember = append(m.JoinMember, &EventMember{})
			if err := m.JoinMember[len(m.JoinMember)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channel = append(m.Channel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channel = append(m.Channel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicEventRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_event_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_event_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			m.EndTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assist_event_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assist_event_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistEventRequestRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assist_event_request_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assist_event_request_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistEventRequestList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assist_event_request_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assist_event_request_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistEventRequestListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assist_event_request_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assist_event_request_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &AssistEventRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistEventRequestPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assist_event_request_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assist_event_request_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &AssistEventRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectAssistEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reject_assist_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reject_assist_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectAssistEventRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reject_assist_event_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reject_assist_event_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptAssistEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accept_assist_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accept_assist_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptAssistEventRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accept_assist_event_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accept_assist_event_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssistResultPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assist_result_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assist_result_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinMember == nil {
				m.JoinMember = &EventMember{}
			}
			if err := m.JoinMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module_Buff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module_Buff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module_Buff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &EventField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_event_field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_event_field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventFieldRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: update_event_field_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: update_event_field_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFieldPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: event_field_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: event_field_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Field == nil {
				m.Field = &EventField{}
			}
			if err := m.Field.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module_Switch_Star) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module_Switch_Star: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module_Switch_Star: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFaith) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_faith: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_faith: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BelieverID = append(m.BelieverID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFaithRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_faith_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_faith_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BelieverID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBeliever) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_believer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_believer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBelieverRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_believer_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_believer_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believer = append(m.Believer, &BelieverInfo{})
			if err := m.Believer[len(m.Believer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootFaith) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_faith: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_faith: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mutual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootFaithRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_faith_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_faith_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shield = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasBuilding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasBuilding = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMax", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMax = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtkStarBuilding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: atk_star_building: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: atk_star_building: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingID", wireType)
			}
			m.BuildingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackUid", wireType)
			}
			m.AttackUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestUid", wireType)
			}
			m.DestUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaithRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FaithRatio = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingLevel", wireType)
			}
			m.BuildingLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingHurt", wireType)
			}
			m.BuildingHurt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingHurt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mutual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtkStarBuildingRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: atk_star_building_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: atk_star_building_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shield = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMax", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMax = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootBeliever) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_believer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_believer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BelieverID = append(m.BelieverID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mutual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mutual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootBelieverRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_believer_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_believer_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BelieverID = append(m.BelieverID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shield = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMax", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMax = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntoEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: into_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: into_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntoEventRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: into_event_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: into_event_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leave_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leave_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveEventRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: leave_event_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: leave_event_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Channel = append(m.Channel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Channel = append(m.Channel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uid = append(m.Uid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uid = append(m.Uid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicVoteRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_vote_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_vote_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimestamp", wireType)
			}
			m.EndTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEventVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_event_vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_event_vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEventVoteRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_event_vote_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_event_vote_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteFinishPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vote_finish_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vote_finish_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Vote{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vote_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vote_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vote = append(m.Vote, &Vote{})
			if err := m.Vote[len(m.Vote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			m.No = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.No |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteNum", wireType)
			}
			m.VoteNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: data_flag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: data_flag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: save_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: save_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DataFlag{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDataRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: save_data_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: save_data_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resule", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resule = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gen_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gen_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guide = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenEventRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gen_event_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gen_event_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFieldChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: event_field_change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: event_field_change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: event_done: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: event_done: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guide = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDoneRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: event_done_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: event_done_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("event.proto", fileDescriptorEvent) }

var fileDescriptorEvent = []byte{
	// 1965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x4f, 0x6f, 0xe4, 0x48,
	0x15, 0x97, 0xdd, 0x7f, 0xd2, 0xfd, 0x3a, 0xe9, 0x64, 0x9c, 0xde, 0x8c, 0x09, 0x4b, 0x34, 0x2a,
	0xd8, 0xd9, 0xb0, 0xda, 0x0d, 0xbb, 0x89, 0x98, 0x5d, 0x40, 0x68, 0xd1, 0x90, 0xd9, 0x9d, 0x48,
	0xcc, 0x82, 0x3c, 0x19, 0x34, 0x9c, 0x5a, 0x15, 0xbb, 0xba, 0xe3, 0x1d, 0xb7, 0xdd, 0xd8, 0xe5,
	0x0c, 0x39, 0x70, 0xe1, 0xc8, 0x01, 0x24, 0x38, 0xc0, 0x95, 0x23, 0x9f, 0x80, 0xaf, 0xc0, 0x91,
	0x8f, 0x80, 0x46, 0x7c, 0x08, 0x8e, 0xa8, 0x5e, 0x55, 0xd9, 0x65, 0x77, 0xb7, 0x7b, 0x7a, 0x19,
	0x69, 0x4f, 0xdd, 0xef, 0xd5, 0xf3, 0x7b, 0xaf, 0xde, 0x9f, 0x7a, 0xbf, 0x2a, 0x18, 0xb0, 0x1b,
	0x16, 0xf3, 0x93, 0x79, 0x9a, 0xf0, 0xc4, 0xe9, 0xe1, 0x8f, 0x9f, 0x44, 0x87, 0x43, 0x4a, 0xfd,
	0x64, 0x36, 0x4b, 0x62, 0xb9, 0x72, 0x08, 0x19, 0xa7, 0xa9, 0xfc, 0x4f, 0x28, 0x0c, 0x1e, 0x89,
	0x8f, 0x9e, 0xb0, 0xd9, 0x15, 0x4b, 0x9d, 0x3d, 0x68, 0xe5, 0x61, 0xe0, 0x5a, 0xf7, 0xac, 0xe3,
	0x8e, 0x27, 0xfe, 0x3a, 0x87, 0xd0, 0x8b, 0x43, 0xff, 0x45, 0x4c, 0x67, 0xcc, 0xb5, 0xef, 0x59,
	0xc7, 0x7d, 0xaf, 0xa0, 0x85, 0xf4, 0x2c, 0x9b, 0xba, 0x2d, 0x64, 0x8b, 0xbf, 0x8e, 0x03, 0xed,
	0xd0, 0x4f, 0x62, 0xb7, 0x8d, 0x0a, 0xf0, 0x3f, 0xf9, 0x8f, 0x05, 0x1d, 0xb4, 0xe1, 0xb8, 0xb0,
	0x85, 0x1e, 0x5e, 0x9c, 0x2b, 0x0b, 0x9a, 0x74, 0x0e, 0xa0, 0x7b, 0x45, 0x33, 0x76, 0x71, 0x8e,
	0x36, 0x3a, 0x9e, 0xa2, 0x84, 0xbe, 0x8c, 0xb3, 0x39, 0x9a, 0xe8, 0x78, 0xf8, 0xdf, 0x79, 0x00,
	0x20, 0x7e, 0x9f, 0x24, 0x41, 0x1e, 0x31, 0xb4, 0x34, 0x38, 0x3d, 0x38, 0xd1, 0xbb, 0x3d, 0x41,
	0x53, 0x63, 0xb9, 0xea, 0x19, 0x92, 0xce, 0x7d, 0x18, 0x06, 0x61, 0x36, 0x8f, 0xe8, 0xed, 0x53,
	0x4e, 0xd3, 0x67, 0x61, 0xe0, 0x76, 0x50, 0x6b, 0x8d, 0xeb, 0x7c, 0x1f, 0xc0, 0xa7, 0x51, 0x24,
	0x23, 0xe2, 0x76, 0x51, 0xff, 0x5b, 0x35, 0xfd, 0x72, 0xd1, 0x33, 0x04, 0xc9, 0xef, 0x2d, 0xd8,
	0x36, 0x6d, 0x8b, 0xc8, 0xcd, 0xf0, 0x5f, 0xb1, 0xdd, 0x82, 0x16, 0xbe, 0x88, 0x24, 0xf0, 0xcb,
	0x70, 0xc6, 0x32, 0x4e, 0x67, 0x73, 0xdc, 0x77, 0xcb, 0xab, 0x71, 0x1d, 0x02, 0xdb, 0x2c, 0x0e,
	0x4a, 0xa9, 0x16, 0x4a, 0x55, 0x78, 0x22, 0x46, 0x01, 0xe5, 0x14, 0x23, 0xd1, 0xf7, 0xf0, 0x3f,
	0xf9, 0x31, 0xec, 0x57, 0x77, 0x35, 0x9e, 0xe7, 0xd9, 0xf5, 0x92, 0x10, 0x58, 0xcb, 0x42, 0x40,
	0x1e, 0xc3, 0xde, 0x94, 0xf1, 0x31, 0x66, 0x67, 0x2c, 0x9d, 0x6e, 0x48, 0x9e, 0xb9, 0x51, 0xbb,
	0xba, 0x51, 0x72, 0x0d, 0xa3, 0xba, 0xa6, 0x71, 0xca, 0x9a, 0x4a, 0xa1, 0x9a, 0x5e, 0xfb, 0x75,
	0xd3, 0x4b, 0x3e, 0x85, 0xdd, 0x20, 0x89, 0x99, 0x32, 0x85, 0x95, 0xb2, 0xda, 0x88, 0xae, 0x2b,
	0xbb, 0xac, 0x2b, 0xf2, 0x01, 0xec, 0xd7, 0x14, 0xa0, 0xa7, 0x07, 0xd0, 0x4d, 0x59, 0x96, 0x47,
	0x1c, 0x75, 0xf4, 0x3c, 0x45, 0x91, 0x3f, 0x5a, 0xb0, 0x6b, 0x88, 0x62, 0x7c, 0xbf, 0xd6, 0x02,
	0x27, 0xef, 0x40, 0xbf, 0x88, 0x75, 0xd5, 0x95, 0x96, 0xe1, 0x0a, 0x79, 0x00, 0x3b, 0x65, 0x4a,
	0xc4, 0x0e, 0xdf, 0x81, 0x0e, 0x12, 0x28, 0x38, 0x38, 0xdd, 0xad, 0x99, 0xf2, 0xe4, 0x2a, 0xd9,
	0x83, 0xa1, 0x34, 0x34, 0x3e, 0x97, 0xd5, 0x42, 0xf6, 0xe1, 0x8e, 0xe2, 0x3c, 0xe5, 0x49, 0x7a,
	0x7b, 0x95, 0xd0, 0x34, 0x20, 0x8f, 0x60, 0xa4, 0x98, 0x1e, 0x8d, 0x83, 0x64, 0x36, 0xbe, 0xa4,
	0xe9, 0x94, 0x71, 0xe7, 0x03, 0xe8, 0x72, 0xfc, 0x87, 0xa1, 0x59, 0xd9, 0x52, 0x4a, 0x88, 0xfc,
	0xc5, 0x86, 0x9d, 0x54, 0x2a, 0x90, 0x9c, 0x86, 0xe0, 0xaa, 0x53, 0xcb, 0x2e, 0x4f, 0xad, 0x03,
	0xe8, 0x4e, 0xc2, 0x88, 0xb3, 0xd4, 0x6d, 0xe1, 0xe6, 0x15, 0xe5, 0x8c, 0xa0, 0x33, 0xcd, 0xc3,
	0x80, 0xb9, 0x3d, 0xcc, 0xa5, 0x24, 0xb0, 0x80, 0x73, 0x9e, 0xd3, 0xe8, 0xe2, 0xdc, 0xed, 0xab,
	0x02, 0x56, 0xb4, 0x58, 0x9b, 0xa4, 0x21, 0x8b, 0x83, 0x8b, 0x73, 0x17, 0xe4, 0x9a, 0xa6, 0x9d,
	0xb7, 0xa1, 0x8f, 0x2e, 0x5c, 0xde, 0xce, 0x99, 0x3b, 0xc0, 0xc5, 0x92, 0x21, 0xbc, 0x8a, 0xf3,
	0x99, 0xbb, 0x2d, 0xbd, 0x8a, 0xf3, 0x99, 0x73, 0x0f, 0x06, 0x69, 0x72, 0x95, 0xf0, 0xcf, 0xa4,
	0x6b, 0x3b, 0xe8, 0x83, 0xc9, 0x12, 0xfd, 0x4e, 0xa3, 0x97, 0xf4, 0x36, 0x93, 0x41, 0x73, 0x87,
	0x28, 0x52, 0xe1, 0x91, 0x5f, 0xc1, 0x9d, 0x4a, 0x60, 0xd6, 0xf4, 0xd3, 0x7b, 0xb0, 0x25, 0xe5,
	0x32, 0xd7, 0xc6, 0xfc, 0xee, 0x95, 0x81, 0x97, 0x1a, 0x3d, 0x2d, 0x40, 0x3e, 0x86, 0x7e, 0x32,
	0x67, 0xf1, 0xd8, 0xa7, 0x69, 0xb0, 0x49, 0xbc, 0xc9, 0x3f, 0x2c, 0xd8, 0x29, 0xbe, 0x5c, 0xd2,
	0x36, 0x1d, 0xdd, 0x36, 0xce, 0x09, 0x6c, 0xa5, 0xec, 0x25, 0x4d, 0x83, 0x8f, 0x54, 0x6f, 0x8f,
	0x4a, 0x77, 0x7e, 0x4a, 0xd3, 0xc0, 0xc3, 0x45, 0x4f, 0x0b, 0x95, 0xf2, 0xa7, 0xd8, 0x23, 0x6b,
	0xe4, 0x4f, 0x4b, 0xf9, 0x33, 0xd5, 0x39, 0x8d, 0xf2, 0x67, 0xe4, 0xaf, 0x16, 0x40, 0xc9, 0x17,
	0xfd, 0xc8, 0x45, 0x36, 0xa5, 0xd3, 0xf8, 0x5f, 0x14, 0xcd, 0x0d, 0x8d, 0x72, 0xa6, 0x36, 0x2c,
	0x09, 0xe7, 0xb8, 0xa8, 0x67, 0xe9, 0xd7, 0x62, 0x58, 0xd5, 0xba, 0xf3, 0x00, 0x7a, 0xe2, 0x58,
	0xbf, 0x88, 0x27, 0x89, 0xf2, 0xe9, 0xb0, 0x94, 0x15, 0x2b, 0xe3, 0x30, 0x9e, 0x24, 0xe3, 0x80,
	0x71, 0x1a, 0x46, 0x5e, 0x21, 0x4b, 0xee, 0x83, 0xa3, 0x12, 0x8d, 0x65, 0x3a, 0xc6, 0x42, 0xd1,
	0x65, 0x65, 0x15, 0x65, 0x45, 0xce, 0xe1, 0x60, 0x51, 0x0e, 0x93, 0x60, 0xe4, 0xde, 0x5a, 0x97,
	0xfb, 0xc7, 0x85, 0x35, 0x75, 0x32, 0xa0, 0xb5, 0x4a, 0x89, 0x5b, 0xf5, 0x12, 0x1f, 0x41, 0x27,
	0x62, 0x37, 0x2c, 0xc2, 0xca, 0xea, 0x78, 0x92, 0x30, 0xfc, 0x31, 0x34, 0x6d, 0xec, 0xcf, 0xb7,
	0x61, 0xd7, 0x38, 0xa6, 0xf4, 0xd6, 0xab, 0xe8, 0x84, 0x7c, 0x0a, 0xfb, 0x35, 0x21, 0xb4, 0x73,
	0x5c, 0x3b, 0x6b, 0x56, 0xe6, 0x86, 0xfc, 0xd7, 0x82, 0xae, 0x3a, 0xa0, 0x86, 0x60, 0x17, 0xca,
	0x6d, 0x79, 0x86, 0xd0, 0x1b, 0xca, 0x69, 0xaa, 0x70, 0x8f, 0xa2, 0x2a, 0x88, 0xa8, 0x55, 0x43,
	0x44, 0x87, 0x32, 0xd5, 0x18, 0x2d, 0x89, 0x81, 0x0a, 0x1a, 0xcf, 0x24, 0x3c, 0x39, 0x10, 0x77,
	0xf4, 0x3c, 0x45, 0x09, 0xbe, 0x3c, 0x6d, 0x10, 0x6b, 0xf4, 0x3c, 0x45, 0x39, 0x27, 0xe0, 0x5c,
	0xb1, 0x28, 0x64, 0x37, 0x2c, 0xbd, 0x4c, 0x38, 0x8d, 0x7e, 0x86, 0x91, 0xde, 0x42, 0xad, 0x4b,
	0x56, 0x50, 0x3e, 0x0f, 0xa3, 0x20, 0x8c, 0xa7, 0x86, 0x7c, 0x4f, 0xc9, 0x2f, 0xac, 0x90, 0x29,
	0xec, 0x67, 0x2c, 0x62, 0xbe, 0x0e, 0xdf, 0xda, 0x63, 0xf6, 0x10, 0x7a, 0x52, 0xe6, 0x42, 0xf7,
	0x7e, 0x41, 0x37, 0x05, 0x85, 0xfc, 0xd9, 0x82, 0xbb, 0x4b, 0x2c, 0x35, 0x4d, 0xd7, 0x4a, 0xcf,
	0xd8, 0xaf, 0xdf, 0x33, 0x22, 0xf3, 0xd9, 0x75, 0xc8, 0xa2, 0x60, 0xb1, 0x2b, 0x25, 0xdf, 0x53,
	0xeb, 0xe4, 0xf3, 0x62, 0x9c, 0x79, 0xcc, 0x4f, 0xf3, 0x90, 0x0b, 0xe0, 0xf7, 0x65, 0x12, 0xc6,
	0x0a, 0xf8, 0xc9, 0x02, 0x5d, 0x05, 0xfc, 0x4a, 0x41, 0x32, 0x81, 0xed, 0x79, 0x7e, 0x15, 0x85,
	0xfe, 0xb2, 0xc9, 0x5b, 0x3f, 0x37, 0x05, 0x5e, 0xb6, 0x4b, 0xbc, 0xec, 0xc2, 0x96, 0x7f, 0x4d,
	0xe3, 0x98, 0x45, 0x6a, 0x50, 0x69, 0x52, 0xd7, 0x7a, 0x1b, 0xb9, 0x58, 0xeb, 0xbf, 0x80, 0x3d,
	0xd3, 0xce, 0x9a, 0x63, 0xbf, 0x8e, 0x1c, 0xed, 0x45, 0xe4, 0x48, 0xfe, 0x60, 0xc1, 0x88, 0x66,
	0x59, 0x98, 0x95, 0x68, 0xe0, 0xd7, 0x39, 0xcb, 0x36, 0x1b, 0xb5, 0x4d, 0xed, 0xa0, 0x36, 0xdc,
	0x2e, 0x37, 0xfc, 0x36, 0xf4, 0x79, 0xe1, 0x53, 0x07, 0x7d, 0x2a, 0x19, 0xe4, 0x14, 0xdc, 0x65,
	0xfe, 0x34, 0xe2, 0xb0, 0x6f, 0xc2, 0x37, 0x96, 0x7e, 0x13, 0x85, 0x99, 0x98, 0x95, 0xdf, 0x5a,
	0xb9, 0x88, 0x5a, 0x3f, 0x11, 0xe3, 0x02, 0x79, 0x2a, 0xe1, 0x47, 0x65, 0xc2, 0x97, 0x7d, 0xe9,
	0x69, 0x71, 0xf2, 0x6c, 0x85, 0x5d, 0x04, 0x82, 0x15, 0xb5, 0xd6, 0x26, 0x6a, 0xbf, 0x07, 0xfb,
	0x29, 0xfb, 0x52, 0xf4, 0x8a, 0x29, 0xb7, 0x3a, 0x23, 0xe4, 0x23, 0xb8, 0xbb, 0xe4, 0x83, 0xc6,
	0x90, 0x25, 0xb0, 0x4f, 0x7d, 0x9f, 0xcd, 0x5f, 0xd7, 0xc6, 0xff, 0x9b, 0x75, 0xf2, 0x13, 0xb8,
	0xbb, 0xc4, 0x60, 0x1d, 0x7c, 0x5a, 0x0d, 0xe0, 0x93, 0x81, 0xa3, 0x3e, 0x95, 0x7b, 0x58, 0x87,
	0xb7, 0xab, 0xbd, 0x6c, 0x37, 0x5e, 0xe2, 0x8c, 0x5e, 0xfe, 0x11, 0x0c, 0xd4, 0xa1, 0xf0, 0x30,
	0x9f, 0x4c, 0x9c, 0xf7, 0x05, 0x8c, 0x64, 0x51, 0xa0, 0xc7, 0xd5, 0xa8, 0xa6, 0xe1, 0x33, 0x79,
	0xa2, 0x48, 0x19, 0xf2, 0x00, 0xa0, 0xe4, 0x0a, 0x24, 0x81, 0xd1, 0xb1, 0xe4, 0xb5, 0x0c, 0x23,
	0xb3, 0x14, 0x49, 0x90, 0xe7, 0xe0, 0xe4, 0xf3, 0x80, 0x72, 0x7d, 0xf5, 0x40, 0x75, 0xcd, 0x97,
	0x17, 0xe3, 0x3a, 0x5e, 0xd3, 0xdc, 0x32, 0x35, 0x7f, 0x08, 0x07, 0x8b, 0x9a, 0x1b, 0x4b, 0xe3,
	0x39, 0xec, 0x99, 0xa2, 0x6b, 0xa2, 0xfc, 0x1e, 0x74, 0x50, 0x6e, 0x11, 0xca, 0x19, 0xe1, 0x91,
	0x22, 0x64, 0x04, 0x8e, 0xbe, 0x2c, 0xbc, 0x0c, 0xb9, 0x7f, 0x3d, 0x16, 0x97, 0x4d, 0xf2, 0x48,
	0xde, 0x59, 0x26, 0x34, 0xe4, 0x4d, 0x86, 0x8e, 0x00, 0xf4, 0xc4, 0xc3, 0x2b, 0x54, 0xeb, 0xb8,
	0xef, 0x19, 0x1c, 0xf2, 0x48, 0xde, 0x69, 0x50, 0x0d, 0xee, 0x6f, 0x04, 0x1d, 0x24, 0x94, 0x22,
	0x49, 0x2c, 0xa8, 0xb1, 0x6a, 0x6a, 0x8e, 0x61, 0x5b, 0xa8, 0xd1, 0x9c, 0x86, 0xae, 0xfb, 0x5c,
	0xde, 0x90, 0xb5, 0x24, 0xda, 0x3c, 0x83, 0x9e, 0xa6, 0x55, 0xbd, 0xdc, 0x2d, 0x03, 0x52, 0x48,
	0x8a, 0xb9, 0xe5, 0x15, 0x82, 0xe4, 0x12, 0x20, 0x4a, 0x92, 0xf5, 0x11, 0x28, 0x36, 0x64, 0x9b,
	0x1b, 0x2a, 0xb1, 0x43, 0xcb, 0xc4, 0x0e, 0xe4, 0x4f, 0x16, 0x0c, 0x4b, 0xb5, 0x0d, 0x11, 0x29,
	0x67, 0xfa, 0x79, 0x6d, 0xa6, 0xe3, 0x9d, 0xd5, 0x98, 0xa5, 0x3d, 0x3d, 0x39, 0xc5, 0x35, 0xe6,
	0x9a, 0x66, 0x0f, 0x15, 0xa2, 0xc0, 0x3e, 0xef, 0x79, 0x26, 0x4b, 0xd8, 0x0a, 0xb3, 0x27, 0xf4,
	0x37, 0x0a, 0xe9, 0x48, 0x82, 0xfc, 0xcd, 0x86, 0x3b, 0x94, 0xbf, 0x18, 0xe3, 0xf8, 0xd6, 0x80,
	0x64, 0x4d, 0xd2, 0x95, 0x54, 0xe1, 0x9d, 0xc1, 0x11, 0xb3, 0x84, 0x72, 0x4e, 0xfd, 0x17, 0xcf,
	0xc2, 0x40, 0xd5, 0x7d, 0xc9, 0x10, 0x7a, 0x03, 0x96, 0xf1, 0x67, 0x38, 0x44, 0x51, 0xaf, 0x22,
	0x85, 0x5e, 0xdc, 0xbc, 0x47, 0x79, 0x98, 0xa0, 0x8b, 0xb6, 0x67, 0x70, 0x9c, 0xef, 0xc0, 0x8e,
	0xb6, 0x22, 0x31, 0x54, 0x17, 0xbf, 0xaf, 0x32, 0x85, 0xfe, 0x2c, 0xf7, 0x7d, 0x96, 0x65, 0x88,
	0xc9, 0x7a, 0x9e, 0x26, 0xc5, 0xe8, 0xd5, 0xa2, 0x8f, 0xf3, 0x94, 0x2b, 0x08, 0x56, 0xe1, 0x19,
	0x89, 0xeb, 0x57, 0x12, 0xf7, 0x77, 0x0b, 0xde, 0x5a, 0x88, 0x91, 0x1e, 0xf5, 0xda, 0x9e, 0x55,
	0xb5, 0xb7, 0xb2, 0x34, 0x42, 0xce, 0x66, 0x17, 0xe7, 0x2a, 0x34, 0x8a, 0xaa, 0x64, 0xbc, 0xbd,
	0x32, 0xe3, 0x9d, 0x4a, 0xc6, 0x8b, 0x7c, 0x76, 0xcd, 0x7c, 0x52, 0xd8, 0xc1, 0x1a, 0x5b, 0xdf,
	0x2e, 0xeb, 0xfa, 0x77, 0x65, 0x1d, 0xff, 0x16, 0xee, 0x54, 0x4c, 0x60, 0x24, 0xaa, 0xca, 0xac,
	0x05, 0x65, 0x5f, 0xa5, 0xa6, 0x8b, 0x1d, 0xb6, 0xcd, 0x1d, 0x7e, 0x02, 0x10, 0xc6, 0x3c, 0x51,
	0xf3, 0x71, 0xf1, 0x71, 0xd4, 0xd8, 0xb0, 0x5d, 0x3d, 0x1f, 0x3e, 0x86, 0x61, 0xf9, 0xe5, 0x26,
	0x83, 0xee, 0x07, 0x30, 0x88, 0x18, 0xbd, 0x61, 0x5f, 0xc1, 0xe6, 0x77, 0x61, 0xd7, 0xf8, 0xb4,
	0xf1, 0x98, 0x7f, 0x0a, 0x03, 0x85, 0x25, 0x6f, 0x12, 0xde, 0xf4, 0xb6, 0x67, 0x00, 0x54, 0x7b,
	0x29, 0x40, 0x6d, 0x95, 0x00, 0xf5, 0xe7, 0xb0, 0x6b, 0x28, 0x7d, 0x03, 0xf8, 0xf4, 0x12, 0x86,
	0x34, 0x08, 0xd4, 0x76, 0xd6, 0x38, 0x7a, 0x00, 0xdd, 0x64, 0xce, 0xc3, 0x24, 0xd6, 0x0f, 0x6c,
	0x92, 0x2a, 0xdd, 0x2c, 0xee, 0x8c, 0xef, 0x83, 0x53, 0xd5, 0xda, 0x18, 0xa9, 0x4b, 0xd8, 0x43,
	0x99, 0x49, 0x18, 0x87, 0xd9, 0xf5, 0xba, 0x81, 0x78, 0xbf, 0xd0, 0x22, 0x27, 0xe2, 0xb0, 0xcc,
	0xf2, 0x2f, 0x13, 0xce, 0x0a, 0xad, 0x17, 0xd0, 0x47, 0xad, 0x6b, 0xd4, 0x11, 0x68, 0x0b, 0x31,
	0xf5, 0x70, 0x53, 0x57, 0x86, 0x6b, 0xe4, 0x43, 0x68, 0x0b, 0x4a, 0x5c, 0x5f, 0xe3, 0x44, 0x5f,
	0x5f, 0xe3, 0x44, 0x68, 0x15, 0xeb, 0x5f, 0xe4, 0x33, 0x5d, 0x27, 0x8a, 0x24, 0x67, 0xd0, 0x0f,
	0x28, 0xa7, 0xe3, 0x49, 0x44, 0xa7, 0x22, 0x3e, 0x2f, 0xd8, 0xad, 0x42, 0x29, 0xe2, 0xef, 0x0a,
	0x90, 0xf2, 0x05, 0xf4, 0x33, 0x51, 0x5b, 0xe2, 0xcb, 0x06, 0x8f, 0xdf, 0x55, 0x8f, 0xd1, 0xd2,
	0xe3, 0xfd, 0xd2, 0xe3, 0xc2, 0xa2, 0x7a, 0xa1, 0x7e, 0x17, 0x76, 0x0a, 0x7d, 0x95, 0x04, 0xb0,
	0x4a, 0x02, 0x18, 0x99, 0x09, 0x84, 0x10, 0xab, 0x76, 0x68, 0x7e, 0x8e, 0xd8, 0x0c, 0xa6, 0x16,
	0x6f, 0x81, 0x6d, 0xe3, 0x2d, 0x50, 0xbe, 0x8e, 0xc6, 0x9b, 0xf7, 0xed, 0x73, 0x70, 0x4c, 0xe0,
	0x24, 0xba, 0x64, 0xca, 0xde, 0x08, 0x88, 0xfb, 0x21, 0x6c, 0xa7, 0x6c, 0x96, 0x14, 0x47, 0xc2,
	0x26, 0xef, 0x72, 0xbf, 0xb3, 0x00, 0xa4, 0x5b, 0x41, 0x12, 0x37, 0xb9, 0x73, 0x2c, 0xa2, 0xff,
	0x92, 0xa6, 0x1a, 0xca, 0x19, 0xf7, 0x66, 0xf5, 0x62, 0xa6, 0xd6, 0xcb, 0xb0, 0xb5, 0x6a, 0x4f,
	0xa8, 0xab, 0xa6, 0x0a, 0x39, 0x86, 0x61, 0xe9, 0x43, 0x53, 0xb3, 0x3d, 0xdc, 0xfe, 0xe7, 0xab,
	0x23, 0xeb, 0x5f, 0xaf, 0x8e, 0xac, 0x7f, 0xbf, 0x3a, 0xb2, 0xae, 0xba, 0xe8, 0xc2, 0xd9, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x03, 0x28, 0x8a, 0xd7, 0x1a, 0x00, 0x00,
}
