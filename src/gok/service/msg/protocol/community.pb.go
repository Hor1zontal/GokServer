// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: community.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 好友信息
type UserInfo struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// string nickname = 2; //用户昵称
	FollowEachOther bool  `protobuf:"varint,3,opt,name=followEachOther,proto3" json:"followEachOther,omitempty"`
	LastOnlineTime  int64 `protobuf:"varint,4,opt,name=lastOnlineTime,proto3" json:"lastOnlineTime,omitempty"`
	FollowTime      int64 `protobuf:"varint,5,opt,name=followTime,proto3" json:"followTime,omitempty"`
	// string avatar = 6; //头像
	Data     *UserDetailInfo `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
	Help     bool            `protobuf:"varint,10,opt,name=help,proto3" json:"help,omitempty"`
	StarType int32           `protobuf:"varint,11,opt,name=starType,proto3" json:"starType,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{0} }

func (m *UserInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetFollowEachOther() bool {
	if m != nil {
		return m.FollowEachOther
	}
	return false
}

func (m *UserInfo) GetLastOnlineTime() int64 {
	if m != nil {
		return m.LastOnlineTime
	}
	return 0
}

func (m *UserInfo) GetFollowTime() int64 {
	if m != nil {
		return m.FollowTime
	}
	return 0
}

func (m *UserInfo) GetData() *UserDetailInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserInfo) GetHelp() bool {
	if m != nil {
		return m.Help
	}
	return false
}

func (m *UserInfo) GetStarType() int32 {
	if m != nil {
		return m.StarType
	}
	return 0
}

type FriendRequestInfo struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	AddTime  int64  `protobuf:"varint,3,opt,name=addTime,proto3" json:"addTime,omitempty"`
}

func (m *FriendRequestInfo) Reset()                    { *m = FriendRequestInfo{} }
func (m *FriendRequestInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendRequestInfo) ProtoMessage()               {}
func (*FriendRequestInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{1} }

func (m *FriendRequestInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FriendRequestInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *FriendRequestInfo) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

// 用户详细信息
type UserDetailInfo struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *UserDetailInfo) Reset()                    { *m = UserDetailInfo{} }
func (m *UserDetailInfo) String() string            { return proto.CompactTextString(m) }
func (*UserDetailInfo) ProtoMessage()               {}
func (*UserDetailInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{2} }

func (m *UserDetailInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserDetailInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// 搜索用户
type SearchUser struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SearchUser) Reset()                    { *m = SearchUser{} }
func (m *SearchUser) String() string            { return proto.CompactTextString(m) }
func (*SearchUser) ProtoMessage()               {}
func (*SearchUser) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{3} }

func (m *SearchUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SearchUserRet struct {
	User *UserInfo `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *SearchUserRet) Reset()                    { *m = SearchUserRet{} }
func (m *SearchUserRet) String() string            { return proto.CompactTextString(m) }
func (*SearchUserRet) ProtoMessage()               {}
func (*SearchUserRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{4} }

func (m *SearchUserRet) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

// 获取好友列表
type GetFriendList struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFriendList) Reset()                    { *m = GetFriendList{} }
func (m *GetFriendList) String() string            { return proto.CompactTextString(m) }
func (*GetFriendList) ProtoMessage()               {}
func (*GetFriendList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{5} }

func (m *GetFriendList) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 获取好友列表结果
type GetFriendListRet struct {
	Friends []*UserInfo `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
}

func (m *GetFriendListRet) Reset()                    { *m = GetFriendListRet{} }
func (m *GetFriendListRet) String() string            { return proto.CompactTextString(m) }
func (*GetFriendListRet) ProtoMessage()               {}
func (*GetFriendListRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{6} }

func (m *GetFriendListRet) GetFriends() []*UserInfo {
	if m != nil {
		return m.Friends
	}
	return nil
}

// 获取好友详细信息
type GetFriendDetailInfo struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFriendDetailInfo) Reset()                    { *m = GetFriendDetailInfo{} }
func (m *GetFriendDetailInfo) String() string            { return proto.CompactTextString(m) }
func (*GetFriendDetailInfo) ProtoMessage()               {}
func (*GetFriendDetailInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{7} }

func (m *GetFriendDetailInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 获取好友详细信息结果
type GetFriendDetailInfoRet struct {
	Detail *UserDetailInfo `protobuf:"bytes,1,opt,name=detail" json:"detail,omitempty"`
}

func (m *GetFriendDetailInfoRet) Reset()                    { *m = GetFriendDetailInfoRet{} }
func (m *GetFriendDetailInfoRet) String() string            { return proto.CompactTextString(m) }
func (*GetFriendDetailInfoRet) ProtoMessage()               {}
func (*GetFriendDetailInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{8} }

func (m *GetFriendDetailInfoRet) GetDetail() *UserDetailInfo {
	if m != nil {
		return m.Detail
	}
	return nil
}

// 删除好友
type DeleteFriend struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FriendID int32 `protobuf:"varint,2,opt,name=friendID,proto3" json:"friendID,omitempty"`
}

func (m *DeleteFriend) Reset()                    { *m = DeleteFriend{} }
func (m *DeleteFriend) String() string            { return proto.CompactTextString(m) }
func (*DeleteFriend) ProtoMessage()               {}
func (*DeleteFriend) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{9} }

func (m *DeleteFriend) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteFriend) GetFriendID() int32 {
	if m != nil {
		return m.FriendID
	}
	return 0
}

// 删除好友结果
type DeleteFriendRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *DeleteFriendRet) Reset()                    { *m = DeleteFriendRet{} }
func (m *DeleteFriendRet) String() string            { return proto.CompactTextString(m) }
func (*DeleteFriendRet) ProtoMessage()               {}
func (*DeleteFriendRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{10} }

func (m *DeleteFriendRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 获取好友申请列表
type GetFriendRequestList struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFriendRequestList) Reset()                    { *m = GetFriendRequestList{} }
func (m *GetFriendRequestList) String() string            { return proto.CompactTextString(m) }
func (*GetFriendRequestList) ProtoMessage()               {}
func (*GetFriendRequestList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{11} }

func (m *GetFriendRequestList) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 获取好友申请列表结果
type GetFriendRequestListRet struct {
	FriendRequests []*FriendRequestInfo `protobuf:"bytes,1,rep,name=friendRequests" json:"friendRequests,omitempty"`
}

func (m *GetFriendRequestListRet) Reset()         { *m = GetFriendRequestListRet{} }
func (m *GetFriendRequestListRet) String() string { return proto.CompactTextString(m) }
func (*GetFriendRequestListRet) ProtoMessage()    {}
func (*GetFriendRequestListRet) Descriptor() ([]byte, []int) {
	return fileDescriptorCommunity, []int{12}
}

func (m *GetFriendRequestListRet) GetFriendRequests() []*FriendRequestInfo {
	if m != nil {
		return m.FriendRequests
	}
	return nil
}

// 添加好友请求
type AddFriendRequest struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestID int32 `protobuf:"varint,2,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (m *AddFriendRequest) Reset()                    { *m = AddFriendRequest{} }
func (m *AddFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFriendRequest) ProtoMessage()               {}
func (*AddFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{13} }

func (m *AddFriendRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddFriendRequest) GetRequestID() int32 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

// 添加好友请求结果
type AddFriendRequestRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AddFriendRequestRet) Reset()                    { *m = AddFriendRequestRet{} }
func (m *AddFriendRequestRet) String() string            { return proto.CompactTextString(m) }
func (*AddFriendRequestRet) ProtoMessage()               {}
func (*AddFriendRequestRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{14} }

func (m *AddFriendRequestRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 接受好友请求
type AcceptFriendRequest struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestID int32 `protobuf:"varint,2,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (m *AcceptFriendRequest) Reset()                    { *m = AcceptFriendRequest{} }
func (m *AcceptFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptFriendRequest) ProtoMessage()               {}
func (*AcceptFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{15} }

func (m *AcceptFriendRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AcceptFriendRequest) GetRequestID() int32 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

type AcceptFriendRequestRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AcceptFriendRequestRet) Reset()                    { *m = AcceptFriendRequestRet{} }
func (m *AcceptFriendRequestRet) String() string            { return proto.CompactTextString(m) }
func (*AcceptFriendRequestRet) ProtoMessage()               {}
func (*AcceptFriendRequestRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{16} }

func (m *AcceptFriendRequestRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 拒绝好友请求
type RefuseFriendRequest struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestID int32 `protobuf:"varint,2,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (m *RefuseFriendRequest) Reset()                    { *m = RefuseFriendRequest{} }
func (m *RefuseFriendRequest) String() string            { return proto.CompactTextString(m) }
func (*RefuseFriendRequest) ProtoMessage()               {}
func (*RefuseFriendRequest) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{17} }

func (m *RefuseFriendRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RefuseFriendRequest) GetRequestID() int32 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

type RefuseFriendRequestRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *RefuseFriendRequestRet) Reset()                    { *m = RefuseFriendRequestRet{} }
func (m *RefuseFriendRequestRet) String() string            { return proto.CompactTextString(m) }
func (*RefuseFriendRequestRet) ProtoMessage()               {}
func (*RefuseFriendRequestRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{18} }

func (m *RefuseFriendRequestRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 添加关注
type Follow struct {
	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FollowerID int32 `protobuf:"varint,2,opt,name=followerID,proto3" json:"followerID,omitempty"`
}

func (m *Follow) Reset()                    { *m = Follow{} }
func (m *Follow) String() string            { return proto.CompactTextString(m) }
func (*Follow) ProtoMessage()               {}
func (*Follow) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{19} }

func (m *Follow) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Follow) GetFollowerID() int32 {
	if m != nil {
		return m.FollowerID
	}
	return 0
}

type FollowRet struct {
	Follower *UserInfo `protobuf:"bytes,1,opt,name=follower" json:"follower,omitempty"`
}

func (m *FollowRet) Reset()                    { *m = FollowRet{} }
func (m *FollowRet) String() string            { return proto.CompactTextString(m) }
func (*FollowRet) ProtoMessage()               {}
func (*FollowRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{20} }

func (m *FollowRet) GetFollower() *UserInfo {
	if m != nil {
		return m.Follower
	}
	return nil
}

// 取消关注
type Unfollow struct {
	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UnfollowerID int32 `protobuf:"varint,2,opt,name=unfollowerID,proto3" json:"unfollowerID,omitempty"`
}

func (m *Unfollow) Reset()                    { *m = Unfollow{} }
func (m *Unfollow) String() string            { return proto.CompactTextString(m) }
func (*Unfollow) ProtoMessage()               {}
func (*Unfollow) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{21} }

func (m *Unfollow) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Unfollow) GetUnfollowerID() int32 {
	if m != nil {
		return m.UnfollowerID
	}
	return 0
}

type UnfollowRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UnfollowRet) Reset()                    { *m = UnfollowRet{} }
func (m *UnfollowRet) String() string            { return proto.CompactTextString(m) }
func (*UnfollowRet) ProtoMessage()               {}
func (*UnfollowRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{22} }

func (m *UnfollowRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 获取关注列表
type GetFollowerList struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFollowerList) Reset()                    { *m = GetFollowerList{} }
func (m *GetFollowerList) String() string            { return proto.CompactTextString(m) }
func (*GetFollowerList) ProtoMessage()               {}
func (*GetFollowerList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{23} }

func (m *GetFollowerList) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetFollowerListRet struct {
	Followers []*UserInfo `protobuf:"bytes,1,rep,name=followers" json:"followers,omitempty"`
}

func (m *GetFollowerListRet) Reset()                    { *m = GetFollowerListRet{} }
func (m *GetFollowerListRet) String() string            { return proto.CompactTextString(m) }
func (*GetFollowerListRet) ProtoMessage()               {}
func (*GetFollowerListRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{24} }

func (m *GetFollowerListRet) GetFollowers() []*UserInfo {
	if m != nil {
		return m.Followers
	}
	return nil
}

// 获取被关注的列表
type GetFollowingList struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFollowingList) Reset()                    { *m = GetFollowingList{} }
func (m *GetFollowingList) String() string            { return proto.CompactTextString(m) }
func (*GetFollowingList) ProtoMessage()               {}
func (*GetFollowingList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{25} }

func (m *GetFollowingList) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetFollowingListRet struct {
	Followings []*UserInfo `protobuf:"bytes,1,rep,name=followings" json:"followings,omitempty"`
}

func (m *GetFollowingListRet) Reset()                    { *m = GetFollowingListRet{} }
func (m *GetFollowingListRet) String() string            { return proto.CompactTextString(m) }
func (*GetFollowingListRet) ProtoMessage()               {}
func (*GetFollowingListRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{26} }

func (m *GetFollowingListRet) GetFollowings() []*UserInfo {
	if m != nil {
		return m.Followings
	}
	return nil
}

type FollowEach struct {
	Uid      int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FollowID int32 `protobuf:"varint,2,opt,name=followID,proto3" json:"followID,omitempty"`
}

func (m *FollowEach) Reset()                    { *m = FollowEach{} }
func (m *FollowEach) String() string            { return proto.CompactTextString(m) }
func (*FollowEach) ProtoMessage()               {}
func (*FollowEach) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{27} }

func (m *FollowEach) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FollowEach) GetFollowID() int32 {
	if m != nil {
		return m.FollowID
	}
	return 0
}

type GetFollowState struct {
	Uid1 int32 `protobuf:"varint,1,opt,name=uid1,proto3" json:"uid1,omitempty"`
	Uid2 int32 `protobuf:"varint,2,opt,name=uid2,proto3" json:"uid2,omitempty"`
}

func (m *GetFollowState) Reset()                    { *m = GetFollowState{} }
func (m *GetFollowState) String() string            { return proto.CompactTextString(m) }
func (*GetFollowState) ProtoMessage()               {}
func (*GetFollowState) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{28} }

func (m *GetFollowState) GetUid1() int32 {
	if m != nil {
		return m.Uid1
	}
	return 0
}

func (m *GetFollowState) GetUid2() int32 {
	if m != nil {
		return m.Uid2
	}
	return 0
}

type GetFollowStateRet struct {
	Follower  bool `protobuf:"varint,1,opt,name=follower,proto3" json:"follower,omitempty"`
	Following bool `protobuf:"varint,2,opt,name=following,proto3" json:"following,omitempty"`
}

func (m *GetFollowStateRet) Reset()                    { *m = GetFollowStateRet{} }
func (m *GetFollowStateRet) String() string            { return proto.CompactTextString(m) }
func (*GetFollowStateRet) ProtoMessage()               {}
func (*GetFollowStateRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{29} }

func (m *GetFollowStateRet) GetFollower() bool {
	if m != nil {
		return m.Follower
	}
	return false
}

func (m *GetFollowStateRet) GetFollowing() bool {
	if m != nil {
		return m.Following
	}
	return false
}

type Sale struct {
	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemID     int32 `protobuf:"varint,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
	PublicTime int64 `protobuf:"varint,3,opt,name=publicTime,proto3" json:"publicTime,omitempty"`
	//    string nickname = 4; //出售人的昵称
	//    string avatar = 6; //头像地址
	RefID string `protobuf:"bytes,4,opt,name=refID,proto3" json:"refID,omitempty"`
}

func (m *Sale) Reset()                    { *m = Sale{} }
func (m *Sale) String() string            { return proto.CompactTextString(m) }
func (*Sale) ProtoMessage()               {}
func (*Sale) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{30} }

func (m *Sale) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sale) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *Sale) GetPublicTime() int64 {
	if m != nil {
		return m.PublicTime
	}
	return 0
}

func (m *Sale) GetRefID() string {
	if m != nil {
		return m.RefID
	}
	return ""
}

// 发布圣物
type PublicSale struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemID int32 `protobuf:"varint,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
}

func (m *PublicSale) Reset()                    { *m = PublicSale{} }
func (m *PublicSale) String() string            { return proto.CompactTextString(m) }
func (*PublicSale) ProtoMessage()               {}
func (*PublicSale) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{31} }

func (m *PublicSale) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PublicSale) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

type PublicSaleRet struct {
	Result     bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	PublicTime int64 `protobuf:"varint,2,opt,name=publicTime,proto3" json:"publicTime,omitempty"`
}

func (m *PublicSaleRet) Reset()                    { *m = PublicSaleRet{} }
func (m *PublicSaleRet) String() string            { return proto.CompactTextString(m) }
func (*PublicSaleRet) ProtoMessage()               {}
func (*PublicSaleRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{32} }

func (m *PublicSaleRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *PublicSaleRet) GetPublicTime() int64 {
	if m != nil {
		return m.PublicTime
	}
	return 0
}

// 撤销发布圣物
type CancelSale struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemID int32 `protobuf:"varint,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
}

func (m *CancelSale) Reset()                    { *m = CancelSale{} }
func (m *CancelSale) String() string            { return proto.CompactTextString(m) }
func (*CancelSale) ProtoMessage()               {}
func (*CancelSale) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{33} }

func (m *CancelSale) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CancelSale) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

type CancelSaleRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *CancelSaleRet) Reset()                    { *m = CancelSaleRet{} }
func (m *CancelSaleRet) String() string            { return proto.CompactTextString(m) }
func (*CancelSaleRet) ProtoMessage()               {}
func (*CancelSaleRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{34} }

func (m *CancelSaleRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 购买圣物
type BuySale struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemID int32 `protobuf:"varint,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
}

func (m *BuySale) Reset()                    { *m = BuySale{} }
func (m *BuySale) String() string            { return proto.CompactTextString(m) }
func (*BuySale) ProtoMessage()               {}
func (*BuySale) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{35} }

func (m *BuySale) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuySale) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

type BuySaleRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *BuySaleRet) Reset()                    { *m = BuySaleRet{} }
func (m *BuySaleRet) String() string            { return proto.CompactTextString(m) }
func (*BuySaleRet) ProtoMessage()               {}
func (*BuySaleRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{36} }

func (m *BuySaleRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 获取别人发布的圣物信息
type GetSaleInfo struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetSaleInfo) Reset()                    { *m = GetSaleInfo{} }
func (m *GetSaleInfo) String() string            { return proto.CompactTextString(m) }
func (*GetSaleInfo) ProtoMessage()               {}
func (*GetSaleInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{37} }

func (m *GetSaleInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetSaleInfoRet struct {
	MySale *Sale `protobuf:"bytes,1,opt,name=mySale" json:"mySale,omitempty"`
	// repeated sale sales = 2; //获取满足的圣物挂物品
	PublicTime int64 `protobuf:"varint,3,opt,name=publicTime,proto3" json:"publicTime,omitempty"`
}

func (m *GetSaleInfoRet) Reset()                    { *m = GetSaleInfoRet{} }
func (m *GetSaleInfoRet) String() string            { return proto.CompactTextString(m) }
func (*GetSaleInfoRet) ProtoMessage()               {}
func (*GetSaleInfoRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{38} }

func (m *GetSaleInfoRet) GetMySale() *Sale {
	if m != nil {
		return m.MySale
	}
	return nil
}

func (m *GetSaleInfoRet) GetPublicTime() int64 {
	if m != nil {
		return m.PublicTime
	}
	return 0
}

type Stranger struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Param    int32  `protobuf:"varint,3,opt,name=param,proto3" json:"param,omitempty"`
	Time     int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Nickname string `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *Stranger) Reset()                    { *m = Stranger{} }
func (m *Stranger) String() string            { return proto.CompactTextString(m) }
func (*Stranger) ProtoMessage()               {}
func (*Stranger) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{39} }

func (m *Stranger) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Stranger) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Stranger) GetParam() int32 {
	if m != nil {
		return m.Param
	}
	return 0
}

func (m *Stranger) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Stranger) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Stranger) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

// 获取最近的一组陌生人交互列表
type GetStrangerList struct {
}

func (m *GetStrangerList) Reset()                    { *m = GetStrangerList{} }
func (m *GetStrangerList) String() string            { return proto.CompactTextString(m) }
func (*GetStrangerList) ProtoMessage()               {}
func (*GetStrangerList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{40} }

type GetStrangerListRet struct {
	Strangers []*Stranger `protobuf:"bytes,1,rep,name=strangers" json:"strangers,omitempty"`
}

func (m *GetStrangerListRet) Reset()                    { *m = GetStrangerListRet{} }
func (m *GetStrangerListRet) String() string            { return proto.CompactTextString(m) }
func (*GetStrangerListRet) ProtoMessage()               {}
func (*GetStrangerListRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{41} }

func (m *GetStrangerListRet) GetStrangers() []*Stranger {
	if m != nil {
		return m.Strangers
	}
	return nil
}

type SearchResult struct {
	SearchID string `protobuf:"bytes,1,opt,name=searchID,proto3" json:"searchID,omitempty"`
	Id       int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ItemID   int32  `protobuf:"varint,4,opt,name=itemID,proto3" json:"itemID,omitempty"`
	Avatar   string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{42} }

func (m *SearchResult) GetSearchID() string {
	if m != nil {
		return m.SearchID
	}
	return ""
}

func (m *SearchResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchResult) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SearchResult) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *SearchResult) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type SearchItem struct {
	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StarType   int32   `protobuf:"varint,2,opt,name=starType,proto3" json:"starType,omitempty"`
	ItemIDs    []int32 `protobuf:"varint,3,rep,packed,name=itemIDs" json:"itemIDs,omitempty"`
	ExistItems []int32 `protobuf:"varint,4,rep,packed,name=existItems" json:"existItems,omitempty"`
	Cost       bool    `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *SearchItem) Reset()                    { *m = SearchItem{} }
func (m *SearchItem) String() string            { return proto.CompactTextString(m) }
func (*SearchItem) ProtoMessage()               {}
func (*SearchItem) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{43} }

func (m *SearchItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchItem) GetStarType() int32 {
	if m != nil {
		return m.StarType
	}
	return 0
}

func (m *SearchItem) GetItemIDs() []int32 {
	if m != nil {
		return m.ItemIDs
	}
	return nil
}

func (m *SearchItem) GetExistItems() []int32 {
	if m != nil {
		return m.ExistItems
	}
	return nil
}

func (m *SearchItem) GetCost() bool {
	if m != nil {
		return m.Cost
	}
	return false
}

type SearchItemRet struct {
	Strangers []*SearchResult `protobuf:"bytes,1,rep,name=strangers" json:"strangers,omitempty"`
}

func (m *SearchItemRet) Reset()                    { *m = SearchItemRet{} }
func (m *SearchItemRet) String() string            { return proto.CompactTextString(m) }
func (*SearchItemRet) ProtoMessage()               {}
func (*SearchItemRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{44} }

func (m *SearchItemRet) GetStrangers() []*SearchResult {
	if m != nil {
		return m.Strangers
	}
	return nil
}

// 动态消息
type NewsFeed struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RelateID int32  `protobuf:"varint,2,opt,name=relateID,proto3" json:"relateID,omitempty"`
	// string relateNickname = 3; //关联动态消息的用户昵称
	// string relateAvatar = 4; //关联动态下次用户头像
	Type   int32 `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Time   int64 `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	Param1 int32 `protobuf:"varint,7,opt,name=param1,proto3" json:"param1,omitempty"`
	Param2 int32 `protobuf:"varint,8,opt,name=param2,proto3" json:"param2,omitempty"`
	Param3 int32 `protobuf:"varint,9,opt,name=param3,proto3" json:"param3,omitempty"`
	// bool isRevenge = 10; //是否通过复仇的方式进行的交互消息
	DoneRevenge bool     `protobuf:"varint,11,opt,name=doneRevenge,proto3" json:"doneRevenge,omitempty"`
	Ext         []string `protobuf:"bytes,12,rep,name=ext" json:"ext,omitempty"`
	Read        bool     `protobuf:"varint,13,opt,name=read,proto3" json:"read,omitempty"`
}

func (m *NewsFeed) Reset()                    { *m = NewsFeed{} }
func (m *NewsFeed) String() string            { return proto.CompactTextString(m) }
func (*NewsFeed) ProtoMessage()               {}
func (*NewsFeed) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{45} }

func (m *NewsFeed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NewsFeed) GetRelateID() int32 {
	if m != nil {
		return m.RelateID
	}
	return 0
}

func (m *NewsFeed) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *NewsFeed) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *NewsFeed) GetParam1() int32 {
	if m != nil {
		return m.Param1
	}
	return 0
}

func (m *NewsFeed) GetParam2() int32 {
	if m != nil {
		return m.Param2
	}
	return 0
}

func (m *NewsFeed) GetParam3() int32 {
	if m != nil {
		return m.Param3
	}
	return 0
}

func (m *NewsFeed) GetDoneRevenge() bool {
	if m != nil {
		return m.DoneRevenge
	}
	return false
}

func (m *NewsFeed) GetExt() []string {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *NewsFeed) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

type NewsFeedDetail struct {
	BelieverInfo     []*BelieverInfo     `protobuf:"bytes,1,rep,name=believerInfo" json:"believerInfo,omitempty"`
	AttackStatistics []*AttackStatistics `protobuf:"bytes,2,rep,name=attackStatistics" json:"attackStatistics,omitempty"`
	Faith            int32               `protobuf:"varint,3,opt,name=faith,proto3" json:"faith,omitempty"`
	ItemNum          int32               `protobuf:"varint,4,opt,name=itemNum,proto3" json:"itemNum,omitempty"`
}

func (m *NewsFeedDetail) Reset()                    { *m = NewsFeedDetail{} }
func (m *NewsFeedDetail) String() string            { return proto.CompactTextString(m) }
func (*NewsFeedDetail) ProtoMessage()               {}
func (*NewsFeedDetail) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{46} }

func (m *NewsFeedDetail) GetBelieverInfo() []*BelieverInfo {
	if m != nil {
		return m.BelieverInfo
	}
	return nil
}

func (m *NewsFeedDetail) GetAttackStatistics() []*AttackStatistics {
	if m != nil {
		return m.AttackStatistics
	}
	return nil
}

func (m *NewsFeedDetail) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *NewsFeedDetail) GetItemNum() int32 {
	if m != nil {
		return m.ItemNum
	}
	return 0
}

type AttackStatistics struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Num   int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *AttackStatistics) Reset()                    { *m = AttackStatistics{} }
func (m *AttackStatistics) String() string            { return proto.CompactTextString(m) }
func (*AttackStatistics) ProtoMessage()               {}
func (*AttackStatistics) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{47} }

func (m *AttackStatistics) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AttackStatistics) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type ReadNewsfeed struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ReadNewsfeed) Reset()                    { *m = ReadNewsfeed{} }
func (m *ReadNewsfeed) String() string            { return proto.CompactTextString(m) }
func (*ReadNewsfeed) ProtoMessage()               {}
func (*ReadNewsfeed) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{48} }

func (m *ReadNewsfeed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadNewsfeedRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ReadNewsfeedRet) Reset()                    { *m = ReadNewsfeedRet{} }
func (m *ReadNewsfeedRet) String() string            { return proto.CompactTextString(m) }
func (*ReadNewsfeedRet) ProtoMessage()               {}
func (*ReadNewsfeedRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{49} }

func (m *ReadNewsfeedRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type GetNewsfeedDetail struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetNewsfeedDetail) Reset()                    { *m = GetNewsfeedDetail{} }
func (m *GetNewsfeedDetail) String() string            { return proto.CompactTextString(m) }
func (*GetNewsfeedDetail) ProtoMessage()               {}
func (*GetNewsfeedDetail) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{50} }

func (m *GetNewsfeedDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetNewsfeedDetailRet struct {
	Self  *NewsFeedDetail `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Other *NewsFeedDetail `protobuf:"bytes,2,opt,name=other" json:"other,omitempty"`
}

func (m *GetNewsfeedDetailRet) Reset()                    { *m = GetNewsfeedDetailRet{} }
func (m *GetNewsfeedDetailRet) String() string            { return proto.CompactTextString(m) }
func (*GetNewsfeedDetailRet) ProtoMessage()               {}
func (*GetNewsfeedDetailRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{51} }

func (m *GetNewsfeedDetailRet) GetSelf() *NewsFeedDetail {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *GetNewsfeedDetailRet) GetOther() *NewsFeedDetail {
	if m != nil {
		return m.Other
	}
	return nil
}

// 获取动态信息
type GetNewsfeedList struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetNewsfeedList) Reset()                    { *m = GetNewsfeedList{} }
func (m *GetNewsfeedList) String() string            { return proto.CompactTextString(m) }
func (*GetNewsfeedList) ProtoMessage()               {}
func (*GetNewsfeedList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{52} }

func (m *GetNewsfeedList) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetNewsfeedListRet struct {
	NewsFeeds []*NewsFeed `protobuf:"bytes,1,rep,name=newsFeeds" json:"newsFeeds,omitempty"`
}

func (m *GetNewsfeedListRet) Reset()                    { *m = GetNewsfeedListRet{} }
func (m *GetNewsfeedListRet) String() string            { return proto.CompactTextString(m) }
func (*GetNewsfeedListRet) ProtoMessage()               {}
func (*GetNewsfeedListRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{53} }

func (m *GetNewsfeedListRet) GetNewsFeeds() []*NewsFeed {
	if m != nil {
		return m.NewsFeeds
	}
	return nil
}

type GetOfflineNewsfeedList struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetOfflineNewsfeedList) Reset()                    { *m = GetOfflineNewsfeedList{} }
func (m *GetOfflineNewsfeedList) String() string            { return proto.CompactTextString(m) }
func (*GetOfflineNewsfeedList) ProtoMessage()               {}
func (*GetOfflineNewsfeedList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{54} }

func (m *GetOfflineNewsfeedList) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetOfflineNewsfeedListRet struct {
	NewsFeeds []*NewsFeed `protobuf:"bytes,1,rep,name=newsFeeds" json:"newsFeeds,omitempty"`
}

func (m *GetOfflineNewsfeedListRet) Reset()         { *m = GetOfflineNewsfeedListRet{} }
func (m *GetOfflineNewsfeedListRet) String() string { return proto.CompactTextString(m) }
func (*GetOfflineNewsfeedListRet) ProtoMessage()    {}
func (*GetOfflineNewsfeedListRet) Descriptor() ([]byte, []int) {
	return fileDescriptorCommunity, []int{55}
}

func (m *GetOfflineNewsfeedListRet) GetNewsFeeds() []*NewsFeed {
	if m != nil {
		return m.NewsFeeds
	}
	return nil
}

// 获取用户索取相关信息
type GetDealList struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetDealList) Reset()                    { *m = GetDealList{} }
func (m *GetDealList) String() string            { return proto.CompactTextString(m) }
func (*GetDealList) ProtoMessage()               {}
func (*GetDealList) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{56} }

func (m *GetDealList) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetDealListRet struct {
	Deals []*NewsFeed `protobuf:"bytes,1,rep,name=deals" json:"deals,omitempty"`
}

func (m *GetDealListRet) Reset()                    { *m = GetDealListRet{} }
func (m *GetDealListRet) String() string            { return proto.CompactTextString(m) }
func (*GetDealListRet) ProtoMessage()               {}
func (*GetDealListRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{57} }

func (m *GetDealListRet) GetDeals() []*NewsFeed {
	if m != nil {
		return m.Deals
	}
	return nil
}

// 索取圣物
type RequestItem struct {
	SearchID string `protobuf:"bytes,1,opt,name=searchID,proto3" json:"searchID,omitempty"`
}

func (m *RequestItem) Reset()                    { *m = RequestItem{} }
func (m *RequestItem) String() string            { return proto.CompactTextString(m) }
func (*RequestItem) ProtoMessage()               {}
func (*RequestItem) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{58} }

func (m *RequestItem) GetSearchID() string {
	if m != nil {
		return m.SearchID
	}
	return ""
}

type RequestItemRet struct {
	Result bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	DealID string `protobuf:"bytes,2,opt,name=dealID,proto3" json:"dealID,omitempty"`
}

func (m *RequestItemRet) Reset()                    { *m = RequestItemRet{} }
func (m *RequestItemRet) String() string            { return proto.CompactTextString(m) }
func (*RequestItemRet) ProtoMessage()               {}
func (*RequestItemRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{59} }

func (m *RequestItemRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *RequestItemRet) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

// 抢夺圣物
type LootItem struct {
	SearchID      string `protobuf:"bytes,1,opt,name=searchID,proto3" json:"searchID,omitempty"`
	LootID        int32  `protobuf:"varint,2,opt,name=lootID,proto3" json:"lootID,omitempty"`
	BuildingID    int32  `protobuf:"varint,3,opt,name=buildingID,proto3" json:"buildingID,omitempty"`
	ItemID        int32  `protobuf:"varint,4,opt,name=itemID,proto3" json:"itemID,omitempty"`
	BuildingLevel int32  `protobuf:"varint,5,opt,name=buildingLevel,proto3" json:"buildingLevel,omitempty"`
}

func (m *LootItem) Reset()                    { *m = LootItem{} }
func (m *LootItem) String() string            { return proto.CompactTextString(m) }
func (*LootItem) ProtoMessage()               {}
func (*LootItem) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{60} }

func (m *LootItem) GetSearchID() string {
	if m != nil {
		return m.SearchID
	}
	return ""
}

func (m *LootItem) GetLootID() int32 {
	if m != nil {
		return m.LootID
	}
	return 0
}

func (m *LootItem) GetBuildingID() int32 {
	if m != nil {
		return m.BuildingID
	}
	return 0
}

func (m *LootItem) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *LootItem) GetBuildingLevel() int32 {
	if m != nil {
		return m.BuildingLevel
	}
	return 0
}

type LootItemRet struct {
	Result   bool  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Building int32 `protobuf:"varint,2,opt,name=building,proto3" json:"building,omitempty"`
}

func (m *LootItemRet) Reset()                    { *m = LootItemRet{} }
func (m *LootItemRet) String() string            { return proto.CompactTextString(m) }
func (*LootItemRet) ProtoMessage()               {}
func (*LootItemRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{61} }

func (m *LootItemRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *LootItemRet) GetBuilding() int32 {
	if m != nil {
		return m.Building
	}
	return 0
}

// 抢夺信徒
type LootStarBeliever struct {
	AttackID   int32    `protobuf:"varint,1,opt,name=attackID,proto3" json:"attackID,omitempty"`
	DestID     int32    `protobuf:"varint,2,opt,name=destID,proto3" json:"destID,omitempty"`
	BelieverID []string `protobuf:"bytes,3,rep,name=believerID" json:"believerID,omitempty"`
}

func (m *LootStarBeliever) Reset()                    { *m = LootStarBeliever{} }
func (m *LootStarBeliever) String() string            { return proto.CompactTextString(m) }
func (*LootStarBeliever) ProtoMessage()               {}
func (*LootStarBeliever) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{62} }

func (m *LootStarBeliever) GetAttackID() int32 {
	if m != nil {
		return m.AttackID
	}
	return 0
}

func (m *LootStarBeliever) GetDestID() int32 {
	if m != nil {
		return m.DestID
	}
	return 0
}

func (m *LootStarBeliever) GetBelieverID() []string {
	if m != nil {
		return m.BelieverID
	}
	return nil
}

type LootStarBelieverRet struct {
	BelieverID []string `protobuf:"bytes,1,rep,name=believerID" json:"believerID,omitempty"`
	Shield     bool     `protobuf:"varint,2,opt,name=shield,proto3" json:"shield,omitempty"`
	IsMax      bool     `protobuf:"varint,3,opt,name=isMax,proto3" json:"isMax,omitempty"`
}

func (m *LootStarBelieverRet) Reset()                    { *m = LootStarBelieverRet{} }
func (m *LootStarBelieverRet) String() string            { return proto.CompactTextString(m) }
func (*LootStarBelieverRet) ProtoMessage()               {}
func (*LootStarBelieverRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{63} }

func (m *LootStarBelieverRet) GetBelieverID() []string {
	if m != nil {
		return m.BelieverID
	}
	return nil
}

func (m *LootStarBelieverRet) GetShield() bool {
	if m != nil {
		return m.Shield
	}
	return false
}

func (m *LootStarBelieverRet) GetIsMax() bool {
	if m != nil {
		return m.IsMax
	}
	return false
}

// 接收玩家的物品索取
type AcceptItemRequest struct {
	DealID string `protobuf:"bytes,1,opt,name=dealID,proto3" json:"dealID,omitempty"`
}

func (m *AcceptItemRequest) Reset()                    { *m = AcceptItemRequest{} }
func (m *AcceptItemRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptItemRequest) ProtoMessage()               {}
func (*AcceptItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{64} }

func (m *AcceptItemRequest) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

type AcceptItemRequestRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AcceptItemRequestRet) Reset()                    { *m = AcceptItemRequestRet{} }
func (m *AcceptItemRequestRet) String() string            { return proto.CompactTextString(m) }
func (*AcceptItemRequestRet) ProtoMessage()               {}
func (*AcceptItemRequestRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{65} }

func (m *AcceptItemRequestRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 拒绝玩家的物品索取
type RejectItemRequest struct {
	DealID string `protobuf:"bytes,1,opt,name=dealID,proto3" json:"dealID,omitempty"`
}

func (m *RejectItemRequest) Reset()                    { *m = RejectItemRequest{} }
func (m *RejectItemRequest) String() string            { return proto.CompactTextString(m) }
func (*RejectItemRequest) ProtoMessage()               {}
func (*RejectItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{66} }

func (m *RejectItemRequest) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

type RejectItemRequestRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *RejectItemRequestRet) Reset()                    { *m = RejectItemRequestRet{} }
func (m *RejectItemRequestRet) String() string            { return proto.CompactTextString(m) }
func (*RejectItemRequestRet) ProtoMessage()               {}
func (*RejectItemRequestRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{67} }

func (m *RejectItemRequestRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 订单过期，客户端通知
type ItemRequestOverdue struct {
	DealID string `protobuf:"bytes,1,opt,name=dealID,proto3" json:"dealID,omitempty"`
}

func (m *ItemRequestOverdue) Reset()                    { *m = ItemRequestOverdue{} }
func (m *ItemRequestOverdue) String() string            { return proto.CompactTextString(m) }
func (*ItemRequestOverdue) ProtoMessage()               {}
func (*ItemRequestOverdue) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{68} }

func (m *ItemRequestOverdue) GetDealID() string {
	if m != nil {
		return m.DealID
	}
	return ""
}

type ItemRequestOverdueRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ItemRequestOverdueRet) Reset()                    { *m = ItemRequestOverdueRet{} }
func (m *ItemRequestOverdueRet) String() string            { return proto.CompactTextString(m) }
func (*ItemRequestOverdueRet) ProtoMessage()               {}
func (*ItemRequestOverdueRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{69} }

func (m *ItemRequestOverdueRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 关注推送
type FollowPush struct {
	FollowID int32 `protobuf:"varint,1,opt,name=followID,proto3" json:"followID,omitempty"`
}

func (m *FollowPush) Reset()                    { *m = FollowPush{} }
func (m *FollowPush) String() string            { return proto.CompactTextString(m) }
func (*FollowPush) ProtoMessage()               {}
func (*FollowPush) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{70} }

func (m *FollowPush) GetFollowID() int32 {
	if m != nil {
		return m.FollowID
	}
	return 0
}

// 拒绝好友推送
type RefuseFriendPush struct {
	Friend *UserInfo `protobuf:"bytes,1,opt,name=friend" json:"friend,omitempty"`
}

func (m *RefuseFriendPush) Reset()                    { *m = RefuseFriendPush{} }
func (m *RefuseFriendPush) String() string            { return proto.CompactTextString(m) }
func (*RefuseFriendPush) ProtoMessage()               {}
func (*RefuseFriendPush) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{71} }

func (m *RefuseFriendPush) GetFriend() *UserInfo {
	if m != nil {
		return m.Friend
	}
	return nil
}

// 删除好友推送
type DeleteFriendPush struct {
	Friend *UserInfo `protobuf:"bytes,1,opt,name=friend" json:"friend,omitempty"`
}

func (m *DeleteFriendPush) Reset()                    { *m = DeleteFriendPush{} }
func (m *DeleteFriendPush) String() string            { return proto.CompactTextString(m) }
func (*DeleteFriendPush) ProtoMessage()               {}
func (*DeleteFriendPush) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{72} }

func (m *DeleteFriendPush) GetFriend() *UserInfo {
	if m != nil {
		return m.Friend
	}
	return nil
}

// 发布销售物品
type AddSale struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemID int32 `protobuf:"varint,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
}

func (m *AddSale) Reset()                    { *m = AddSale{} }
func (m *AddSale) String() string            { return proto.CompactTextString(m) }
func (*AddSale) ProtoMessage()               {}
func (*AddSale) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{73} }

func (m *AddSale) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddSale) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

type AddSaleRet struct {
	Sale *Sale `protobuf:"bytes,1,opt,name=sale" json:"sale,omitempty"`
}

func (m *AddSaleRet) Reset()                    { *m = AddSaleRet{} }
func (m *AddSaleRet) String() string            { return proto.CompactTextString(m) }
func (*AddSaleRet) ProtoMessage()               {}
func (*AddSaleRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{74} }

func (m *AddSaleRet) GetSale() *Sale {
	if m != nil {
		return m.Sale
	}
	return nil
}

// 删除销售物品
type RemoveSale struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemID int32 `protobuf:"varint,2,opt,name=itemID,proto3" json:"itemID,omitempty"`
}

func (m *RemoveSale) Reset()                    { *m = RemoveSale{} }
func (m *RemoveSale) String() string            { return proto.CompactTextString(m) }
func (*RemoveSale) ProtoMessage()               {}
func (*RemoveSale) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{75} }

func (m *RemoveSale) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RemoveSale) GetItemID() int32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

type RemoveSaleRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *RemoveSaleRet) Reset()                    { *m = RemoveSaleRet{} }
func (m *RemoveSaleRet) String() string            { return proto.CompactTextString(m) }
func (*RemoveSaleRet) ProtoMessage()               {}
func (*RemoveSaleRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{76} }

func (m *RemoveSaleRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type GetSale struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetSale) Reset()                    { *m = GetSale{} }
func (m *GetSale) String() string            { return proto.CompactTextString(m) }
func (*GetSale) ProtoMessage()               {}
func (*GetSale) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{77} }

func (m *GetSale) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetSaleRet struct {
	Sale *Sale `protobuf:"bytes,1,opt,name=sale" json:"sale,omitempty"`
}

func (m *GetSaleRet) Reset()                    { *m = GetSaleRet{} }
func (m *GetSaleRet) String() string            { return proto.CompactTextString(m) }
func (*GetSaleRet) ProtoMessage()               {}
func (*GetSaleRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{78} }

func (m *GetSaleRet) GetSale() *Sale {
	if m != nil {
		return m.Sale
	}
	return nil
}

type GetSales struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
}

func (m *GetSales) Reset()                    { *m = GetSales{} }
func (m *GetSales) String() string            { return proto.CompactTextString(m) }
func (*GetSales) ProtoMessage()               {}
func (*GetSales) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{79} }

func (m *GetSales) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetSalesRet struct {
	Sales []*Sale `protobuf:"bytes,1,rep,name=sales" json:"sales,omitempty"`
}

func (m *GetSalesRet) Reset()                    { *m = GetSalesRet{} }
func (m *GetSalesRet) String() string            { return proto.CompactTextString(m) }
func (*GetSalesRet) ProtoMessage()               {}
func (*GetSalesRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{80} }

func (m *GetSalesRet) GetSales() []*Sale {
	if m != nil {
		return m.Sales
	}
	return nil
}

type GlobalMessage struct {
	Sale     *Sale     `protobuf:"bytes,1,opt,name=sale" json:"sale,omitempty"`
	NewsFeed *NewsFeed `protobuf:"bytes,2,opt,name=newsFeed" json:"newsFeed,omitempty"`
}

func (m *GlobalMessage) Reset()                    { *m = GlobalMessage{} }
func (m *GlobalMessage) String() string            { return proto.CompactTextString(m) }
func (*GlobalMessage) ProtoMessage()               {}
func (*GlobalMessage) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{81} }

func (m *GlobalMessage) GetSale() *Sale {
	if m != nil {
		return m.Sale
	}
	return nil
}

func (m *GlobalMessage) GetNewsFeed() *NewsFeed {
	if m != nil {
		return m.NewsFeed
	}
	return nil
}

type LampMessage struct {
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LampMessage) Reset()                    { *m = LampMessage{} }
func (m *LampMessage) String() string            { return proto.CompactTextString(m) }
func (*LampMessage) ProtoMessage()               {}
func (*LampMessage) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{82} }

func (m *LampMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type NoticeMessage struct {
	NoticeID int32 `protobuf:"varint,1,opt,name=noticeID,proto3" json:"noticeID,omitempty"`
}

func (m *NoticeMessage) Reset()                    { *m = NoticeMessage{} }
func (m *NoticeMessage) String() string            { return proto.CompactTextString(m) }
func (*NoticeMessage) ProtoMessage()               {}
func (*NoticeMessage) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{83} }

func (m *NoticeMessage) GetNoticeID() int32 {
	if m != nil {
		return m.NoticeID
	}
	return 0
}

type PublicShare struct {
	Type  int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	RefID string `protobuf:"bytes,2,opt,name=refID,proto3" json:"refID,omitempty"`
}

func (m *PublicShare) Reset()                    { *m = PublicShare{} }
func (m *PublicShare) String() string            { return proto.CompactTextString(m) }
func (*PublicShare) ProtoMessage()               {}
func (*PublicShare) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{84} }

func (m *PublicShare) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PublicShare) GetRefID() string {
	if m != nil {
		return m.RefID
	}
	return ""
}

type PublicShareRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *PublicShareRet) Reset()                    { *m = PublicShareRet{} }
func (m *PublicShareRet) String() string            { return proto.CompactTextString(m) }
func (*PublicShareRet) ProtoMessage()               {}
func (*PublicShareRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{85} }

func (m *PublicShareRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type PublicWechatShare struct {
	Type    int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	RefType int32 `protobuf:"varint,2,opt,name=refType,proto3" json:"refType,omitempty"`
	RefNum  int32 `protobuf:"varint,3,opt,name=refNum,proto3" json:"refNum,omitempty"`
}

func (m *PublicWechatShare) Reset()                    { *m = PublicWechatShare{} }
func (m *PublicWechatShare) String() string            { return proto.CompactTextString(m) }
func (*PublicWechatShare) ProtoMessage()               {}
func (*PublicWechatShare) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{86} }

func (m *PublicWechatShare) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PublicWechatShare) GetRefType() int32 {
	if m != nil {
		return m.RefType
	}
	return 0
}

func (m *PublicWechatShare) GetRefNum() int32 {
	if m != nil {
		return m.RefNum
	}
	return 0
}

type PublicWechatShareRet struct {
	Reward     *Reward `protobuf:"bytes,1,opt,name=reward" json:"reward,omitempty"`
	ShareCount int32   `protobuf:"varint,2,opt,name=shareCount,proto3" json:"shareCount,omitempty"`
	BuildType  int32   `protobuf:"varint,3,opt,name=buildType,proto3" json:"buildType,omitempty"`
}

func (m *PublicWechatShareRet) Reset()                    { *m = PublicWechatShareRet{} }
func (m *PublicWechatShareRet) String() string            { return proto.CompactTextString(m) }
func (*PublicWechatShareRet) ProtoMessage()               {}
func (*PublicWechatShareRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{87} }

func (m *PublicWechatShareRet) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *PublicWechatShareRet) GetShareCount() int32 {
	if m != nil {
		return m.ShareCount
	}
	return 0
}

func (m *PublicWechatShareRet) GetBuildType() int32 {
	if m != nil {
		return m.BuildType
	}
	return 0
}

type DrawWechatShareReward struct {
	NewsfeedType int32 `protobuf:"varint,1,opt,name=newsfeedType,proto3" json:"newsfeedType,omitempty"`
}

func (m *DrawWechatShareReward) Reset()                    { *m = DrawWechatShareReward{} }
func (m *DrawWechatShareReward) String() string            { return proto.CompactTextString(m) }
func (*DrawWechatShareReward) ProtoMessage()               {}
func (*DrawWechatShareReward) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{88} }

func (m *DrawWechatShareReward) GetNewsfeedType() int32 {
	if m != nil {
		return m.NewsfeedType
	}
	return 0
}

type DrawWechatShareRewardRet struct {
	Reward     *Reward `protobuf:"bytes,1,opt,name=reward" json:"reward,omitempty"`
	ShareCount int32   `protobuf:"varint,2,opt,name=shareCount,proto3" json:"shareCount,omitempty"`
}

func (m *DrawWechatShareRewardRet) Reset()         { *m = DrawWechatShareRewardRet{} }
func (m *DrawWechatShareRewardRet) String() string { return proto.CompactTextString(m) }
func (*DrawWechatShareRewardRet) ProtoMessage()    {}
func (*DrawWechatShareRewardRet) Descriptor() ([]byte, []int) {
	return fileDescriptorCommunity, []int{89}
}

func (m *DrawWechatShareRewardRet) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *DrawWechatShareRewardRet) GetShareCount() int32 {
	if m != nil {
		return m.ShareCount
	}
	return 0
}

type GetWechatShareTime struct {
}

func (m *GetWechatShareTime) Reset()                    { *m = GetWechatShareTime{} }
func (m *GetWechatShareTime) String() string            { return proto.CompactTextString(m) }
func (*GetWechatShareTime) ProtoMessage()               {}
func (*GetWechatShareTime) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{90} }

type GetWechatShareTimeRet struct {
	NextDraw int64 `protobuf:"varint,1,opt,name=nextDraw,proto3" json:"nextDraw,omitempty"`
}

func (m *GetWechatShareTimeRet) Reset()                    { *m = GetWechatShareTimeRet{} }
func (m *GetWechatShareTimeRet) String() string            { return proto.CompactTextString(m) }
func (*GetWechatShareTimeRet) ProtoMessage()               {}
func (*GetWechatShareTimeRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{91} }

func (m *GetWechatShareTimeRet) GetNextDraw() int64 {
	if m != nil {
		return m.NextDraw
	}
	return 0
}

type WatchAdSuccess struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *WatchAdSuccess) Reset()                    { *m = WatchAdSuccess{} }
func (m *WatchAdSuccess) String() string            { return proto.CompactTextString(m) }
func (*WatchAdSuccess) ProtoMessage()               {}
func (*WatchAdSuccess) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{92} }

func (m *WatchAdSuccess) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type WatchAdSuccessRet struct {
	Reward *Reward `protobuf:"bytes,1,opt,name=reward" json:"reward,omitempty"`
}

func (m *WatchAdSuccessRet) Reset()                    { *m = WatchAdSuccessRet{} }
func (m *WatchAdSuccessRet) String() string            { return proto.CompactTextString(m) }
func (*WatchAdSuccessRet) ProtoMessage()               {}
func (*WatchAdSuccessRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{93} }

func (m *WatchAdSuccessRet) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

type GuideRevengeRet struct {
	NewsFeed *NewsFeed `protobuf:"bytes,1,opt,name=newsFeed" json:"newsFeed,omitempty"`
}

func (m *GuideRevengeRet) Reset()                    { *m = GuideRevengeRet{} }
func (m *GuideRevengeRet) String() string            { return proto.CompactTextString(m) }
func (*GuideRevengeRet) ProtoMessage()               {}
func (*GuideRevengeRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{94} }

func (m *GuideRevengeRet) GetNewsFeed() *NewsFeed {
	if m != nil {
		return m.NewsFeed
	}
	return nil
}

type GetGlobalMessageRet struct {
	Message []*GlobalMessage `protobuf:"bytes,1,rep,name=message" json:"message,omitempty"`
}

func (m *GetGlobalMessageRet) Reset()                    { *m = GetGlobalMessageRet{} }
func (m *GetGlobalMessageRet) String() string            { return proto.CompactTextString(m) }
func (*GetGlobalMessageRet) ProtoMessage()               {}
func (*GetGlobalMessageRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{95} }

func (m *GetGlobalMessageRet) GetMessage() []*GlobalMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type DrawDayGift struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *DrawDayGift) Reset()                    { *m = DrawDayGift{} }
func (m *DrawDayGift) String() string            { return proto.CompactTextString(m) }
func (*DrawDayGift) ProtoMessage()               {}
func (*DrawDayGift) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{96} }

func (m *DrawDayGift) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type DrawDayGiftRet struct {
	Reward *Reward `protobuf:"bytes,1,opt,name=reward" json:"reward,omitempty"`
}

func (m *DrawDayGiftRet) Reset()                    { *m = DrawDayGiftRet{} }
func (m *DrawDayGiftRet) String() string            { return proto.CompactTextString(m) }
func (*DrawDayGiftRet) ProtoMessage()               {}
func (*DrawDayGiftRet) Descriptor() ([]byte, []int) { return fileDescriptorCommunity, []int{97} }

func (m *DrawDayGiftRet) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func init() {
	proto.RegisterType((*UserInfo)(nil), "protocol.user_info")
	proto.RegisterType((*FriendRequestInfo)(nil), "protocol.friend_request_info")
	proto.RegisterType((*UserDetailInfo)(nil), "protocol.user_detail_info")
	proto.RegisterType((*SearchUser)(nil), "protocol.search_user")
	proto.RegisterType((*SearchUserRet)(nil), "protocol.search_user_ret")
	proto.RegisterType((*GetFriendList)(nil), "protocol.get_friend_list")
	proto.RegisterType((*GetFriendListRet)(nil), "protocol.get_friend_list_ret")
	proto.RegisterType((*GetFriendDetailInfo)(nil), "protocol.get_friend_detail_info")
	proto.RegisterType((*GetFriendDetailInfoRet)(nil), "protocol.get_friend_detail_info_ret")
	proto.RegisterType((*DeleteFriend)(nil), "protocol.delete_friend")
	proto.RegisterType((*DeleteFriendRet)(nil), "protocol.delete_friend_ret")
	proto.RegisterType((*GetFriendRequestList)(nil), "protocol.get_friend_request_list")
	proto.RegisterType((*GetFriendRequestListRet)(nil), "protocol.get_friend_request_list_ret")
	proto.RegisterType((*AddFriendRequest)(nil), "protocol.add_friend_request")
	proto.RegisterType((*AddFriendRequestRet)(nil), "protocol.add_friend_request_ret")
	proto.RegisterType((*AcceptFriendRequest)(nil), "protocol.accept_friend_request")
	proto.RegisterType((*AcceptFriendRequestRet)(nil), "protocol.accept_friend_request_ret")
	proto.RegisterType((*RefuseFriendRequest)(nil), "protocol.refuse_friend_request")
	proto.RegisterType((*RefuseFriendRequestRet)(nil), "protocol.refuse_friend_request_ret")
	proto.RegisterType((*Follow)(nil), "protocol.follow")
	proto.RegisterType((*FollowRet)(nil), "protocol.follow_ret")
	proto.RegisterType((*Unfollow)(nil), "protocol.unfollow")
	proto.RegisterType((*UnfollowRet)(nil), "protocol.unfollow_ret")
	proto.RegisterType((*GetFollowerList)(nil), "protocol.get_follower_list")
	proto.RegisterType((*GetFollowerListRet)(nil), "protocol.get_follower_list_ret")
	proto.RegisterType((*GetFollowingList)(nil), "protocol.get_following_list")
	proto.RegisterType((*GetFollowingListRet)(nil), "protocol.get_following_list_ret")
	proto.RegisterType((*FollowEach)(nil), "protocol.follow_each")
	proto.RegisterType((*GetFollowState)(nil), "protocol.get_follow_state")
	proto.RegisterType((*GetFollowStateRet)(nil), "protocol.get_follow_state_ret")
	proto.RegisterType((*Sale)(nil), "protocol.sale")
	proto.RegisterType((*PublicSale)(nil), "protocol.public_sale")
	proto.RegisterType((*PublicSaleRet)(nil), "protocol.public_sale_ret")
	proto.RegisterType((*CancelSale)(nil), "protocol.cancel_sale")
	proto.RegisterType((*CancelSaleRet)(nil), "protocol.cancel_sale_ret")
	proto.RegisterType((*BuySale)(nil), "protocol.buy_sale")
	proto.RegisterType((*BuySaleRet)(nil), "protocol.buy_sale_ret")
	proto.RegisterType((*GetSaleInfo)(nil), "protocol.get_sale_info")
	proto.RegisterType((*GetSaleInfoRet)(nil), "protocol.get_sale_info_ret")
	proto.RegisterType((*Stranger)(nil), "protocol.Stranger")
	proto.RegisterType((*GetStrangerList)(nil), "protocol.get_stranger_list")
	proto.RegisterType((*GetStrangerListRet)(nil), "protocol.get_stranger_list_ret")
	proto.RegisterType((*SearchResult)(nil), "protocol.search_result")
	proto.RegisterType((*SearchItem)(nil), "protocol.search_item")
	proto.RegisterType((*SearchItemRet)(nil), "protocol.search_item_ret")
	proto.RegisterType((*NewsFeed)(nil), "protocol.NewsFeed")
	proto.RegisterType((*NewsFeedDetail)(nil), "protocol.NewsFeedDetail")
	proto.RegisterType((*AttackStatistics)(nil), "protocol.attack_statistics")
	proto.RegisterType((*ReadNewsfeed)(nil), "protocol.read_newsfeed")
	proto.RegisterType((*ReadNewsfeedRet)(nil), "protocol.read_newsfeed_ret")
	proto.RegisterType((*GetNewsfeedDetail)(nil), "protocol.get_newsfeed_detail")
	proto.RegisterType((*GetNewsfeedDetailRet)(nil), "protocol.get_newsfeed_detail_ret")
	proto.RegisterType((*GetNewsfeedList)(nil), "protocol.get_newsfeed_list")
	proto.RegisterType((*GetNewsfeedListRet)(nil), "protocol.get_newsfeed_list_ret")
	proto.RegisterType((*GetOfflineNewsfeedList)(nil), "protocol.get_offline_newsfeed_list")
	proto.RegisterType((*GetOfflineNewsfeedListRet)(nil), "protocol.get_offline_newsfeed_list_ret")
	proto.RegisterType((*GetDealList)(nil), "protocol.get_deal_list")
	proto.RegisterType((*GetDealListRet)(nil), "protocol.get_deal_list_ret")
	proto.RegisterType((*RequestItem)(nil), "protocol.request_item")
	proto.RegisterType((*RequestItemRet)(nil), "protocol.request_item_ret")
	proto.RegisterType((*LootItem)(nil), "protocol.loot_item")
	proto.RegisterType((*LootItemRet)(nil), "protocol.loot_item_ret")
	proto.RegisterType((*LootStarBeliever)(nil), "protocol.loot_star_believer")
	proto.RegisterType((*LootStarBelieverRet)(nil), "protocol.loot_star_believer_ret")
	proto.RegisterType((*AcceptItemRequest)(nil), "protocol.accept_item_request")
	proto.RegisterType((*AcceptItemRequestRet)(nil), "protocol.accept_item_request_ret")
	proto.RegisterType((*RejectItemRequest)(nil), "protocol.reject_item_request")
	proto.RegisterType((*RejectItemRequestRet)(nil), "protocol.reject_item_request_ret")
	proto.RegisterType((*ItemRequestOverdue)(nil), "protocol.item_request_overdue")
	proto.RegisterType((*ItemRequestOverdueRet)(nil), "protocol.item_request_overdue_ret")
	proto.RegisterType((*FollowPush)(nil), "protocol.follow_push")
	proto.RegisterType((*RefuseFriendPush)(nil), "protocol.refuse_friend_push")
	proto.RegisterType((*DeleteFriendPush)(nil), "protocol.delete_friend_push")
	proto.RegisterType((*AddSale)(nil), "protocol.add_sale")
	proto.RegisterType((*AddSaleRet)(nil), "protocol.add_sale_ret")
	proto.RegisterType((*RemoveSale)(nil), "protocol.remove_sale")
	proto.RegisterType((*RemoveSaleRet)(nil), "protocol.remove_sale_ret")
	proto.RegisterType((*GetSale)(nil), "protocol.get_sale")
	proto.RegisterType((*GetSaleRet)(nil), "protocol.get_sale_ret")
	proto.RegisterType((*GetSales)(nil), "protocol.get_sales")
	proto.RegisterType((*GetSalesRet)(nil), "protocol.get_sales_ret")
	proto.RegisterType((*GlobalMessage)(nil), "protocol.global_message")
	proto.RegisterType((*LampMessage)(nil), "protocol.lamp_message")
	proto.RegisterType((*NoticeMessage)(nil), "protocol.notice_message")
	proto.RegisterType((*PublicShare)(nil), "protocol.public_share")
	proto.RegisterType((*PublicShareRet)(nil), "protocol.public_share_ret")
	proto.RegisterType((*PublicWechatShare)(nil), "protocol.public_wechat_share")
	proto.RegisterType((*PublicWechatShareRet)(nil), "protocol.public_wechat_share_ret")
	proto.RegisterType((*DrawWechatShareReward)(nil), "protocol.draw_wechat_share_reward")
	proto.RegisterType((*DrawWechatShareRewardRet)(nil), "protocol.draw_wechat_share_reward_ret")
	proto.RegisterType((*GetWechatShareTime)(nil), "protocol.get_wechat_share_time")
	proto.RegisterType((*GetWechatShareTimeRet)(nil), "protocol.get_wechat_share_time_ret")
	proto.RegisterType((*WatchAdSuccess)(nil), "protocol.watch_ad_success")
	proto.RegisterType((*WatchAdSuccessRet)(nil), "protocol.watch_ad_success_ret")
	proto.RegisterType((*GuideRevengeRet)(nil), "protocol.guide_revenge_ret")
	proto.RegisterType((*GetGlobalMessageRet)(nil), "protocol.get_global_message_ret")
	proto.RegisterType((*DrawDayGift)(nil), "protocol.draw_day_gift")
	proto.RegisterType((*DrawDayGiftRet)(nil), "protocol.draw_day_gift_ret")
}
func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.FollowEachOther {
		dAtA[i] = 0x18
		i++
		if m.FollowEachOther {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastOnlineTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.LastOnlineTime))
	}
	if m.FollowTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.FollowTime))
	}
	if m.Data != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Help {
		dAtA[i] = 0x50
		i++
		if m.Help {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.StarType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.StarType))
	}
	return i, nil
}

func (m *FriendRequestInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendRequestInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.AddTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.AddTime))
	}
	return i, nil
}

func (m *UserDetailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDetailInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *SearchUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SearchUserRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchUserRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.User.Size()))
		n2, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetFriendList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFriendList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetFriendListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFriendListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, msg := range m.Friends {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetFriendDetailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFriendDetailInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetFriendDetailInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFriendDetailInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Detail != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Detail.Size()))
		n3, err := m.Detail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *DeleteFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFriend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.FriendID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.FriendID))
	}
	return i, nil
}

func (m *DeleteFriendRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFriendRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetFriendRequestList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFriendRequestList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetFriendRequestListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFriendRequestListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendRequests) > 0 {
		for _, msg := range m.FriendRequests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddFriendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFriendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.RequestID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.RequestID))
	}
	return i, nil
}

func (m *AddFriendRequestRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFriendRequestRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AcceptFriendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptFriendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.RequestID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.RequestID))
	}
	return i, nil
}

func (m *AcceptFriendRequestRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptFriendRequestRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RefuseFriendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefuseFriendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.RequestID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.RequestID))
	}
	return i, nil
}

func (m *RefuseFriendRequestRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefuseFriendRequestRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Follow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Follow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.FollowerID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.FollowerID))
	}
	return i, nil
}

func (m *FollowRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Follower != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Follower.Size()))
		n4, err := m.Follower.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Unfollow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unfollow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.UnfollowerID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.UnfollowerID))
	}
	return i, nil
}

func (m *UnfollowRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnfollowRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetFollowerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFollowerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetFollowerListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFollowerListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Followers) > 0 {
		for _, msg := range m.Followers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetFollowingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFollowingList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetFollowingListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFollowingListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Followings) > 0 {
		for _, msg := range m.Followings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FollowEach) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowEach) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Uid))
	}
	if m.FollowID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.FollowID))
	}
	return i, nil
}

func (m *GetFollowState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFollowState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Uid1))
	}
	if m.Uid2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Uid2))
	}
	return i, nil
}

func (m *GetFollowStateRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFollowStateRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Follower {
		dAtA[i] = 0x8
		i++
		if m.Follower {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Following {
		dAtA[i] = 0x10
		i++
		if m.Following {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Sale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	if m.PublicTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.PublicTime))
	}
	if len(m.RefID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.RefID)))
		i += copy(dAtA[i:], m.RefID)
	}
	return i, nil
}

func (m *PublicSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicSale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	return i, nil
}

func (m *PublicSaleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicSaleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PublicTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.PublicTime))
	}
	return i, nil
}

func (m *CancelSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelSale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	return i, nil
}

func (m *CancelSaleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelSaleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BuySale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuySale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	return i, nil
}

func (m *BuySaleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuySaleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetSaleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSaleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetSaleInfoRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSaleInfoRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MySale != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.MySale.Size()))
		n5, err := m.MySale.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PublicTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.PublicTime))
	}
	return i, nil
}

func (m *Stranger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stranger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Type))
	}
	if m.Param != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Param))
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Time))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	return i, nil
}

func (m *GetStrangerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStrangerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetStrangerListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStrangerListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Strangers) > 0 {
		for _, msg := range m.Strangers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SearchID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.SearchID)))
		i += copy(dAtA[i:], m.SearchID)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	return i, nil
}

func (m *SearchItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.StarType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.StarType))
	}
	if len(m.ItemIDs) > 0 {
		dAtA7 := make([]byte, len(m.ItemIDs)*10)
		var j6 int
		for _, num1 := range m.ItemIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.ExistItems) > 0 {
		dAtA9 := make([]byte, len(m.ExistItems)*10)
		var j8 int
		for _, num1 := range m.ExistItems {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.Cost {
		dAtA[i] = 0x28
		i++
		if m.Cost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SearchItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Strangers) > 0 {
		for _, msg := range m.Strangers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NewsFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsFeed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.RelateID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.RelateID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Type))
	}
	if m.Time != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Time))
	}
	if m.Param1 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Param1))
	}
	if m.Param2 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Param2))
	}
	if m.Param3 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Param3))
	}
	if m.DoneRevenge {
		dAtA[i] = 0x58
		i++
		if m.DoneRevenge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ext) > 0 {
		for _, s := range m.Ext {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Read {
		dAtA[i] = 0x68
		i++
		if m.Read {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *NewsFeedDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewsFeedDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BelieverInfo) > 0 {
		for _, msg := range m.BelieverInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AttackStatistics) > 0 {
		for _, msg := range m.AttackStatistics {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Faith != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Faith))
	}
	if m.ItemNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemNum))
	}
	return i, nil
}

func (m *AttackStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttackStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Level))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *ReadNewsfeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadNewsfeed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ReadNewsfeedRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadNewsfeedRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetNewsfeedDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewsfeedDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetNewsfeedDetailRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewsfeedDetailRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Self != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Self.Size()))
		n10, err := m.Self.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Other != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Other.Size()))
		n11, err := m.Other.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *GetNewsfeedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewsfeedList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetNewsfeedListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNewsfeedListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewsFeeds) > 0 {
		for _, msg := range m.NewsFeeds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetOfflineNewsfeedList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOfflineNewsfeedList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetOfflineNewsfeedListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOfflineNewsfeedListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewsFeeds) > 0 {
		for _, msg := range m.NewsFeeds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetDealList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDealList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetDealListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDealListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deals) > 0 {
		for _, msg := range m.Deals {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SearchID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.SearchID)))
		i += copy(dAtA[i:], m.SearchID)
	}
	return i, nil
}

func (m *RequestItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DealID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.DealID)))
		i += copy(dAtA[i:], m.DealID)
	}
	return i, nil
}

func (m *LootItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SearchID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.SearchID)))
		i += copy(dAtA[i:], m.SearchID)
	}
	if m.LootID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.LootID))
	}
	if m.BuildingID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.BuildingID))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	if m.BuildingLevel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.BuildingLevel))
	}
	return i, nil
}

func (m *LootItemRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootItemRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Building != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Building))
	}
	return i, nil
}

func (m *LootStarBeliever) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootStarBeliever) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AttackID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.AttackID))
	}
	if m.DestID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.DestID))
	}
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *LootStarBelieverRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LootStarBelieverRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Shield {
		dAtA[i] = 0x10
		i++
		if m.Shield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsMax {
		dAtA[i] = 0x18
		i++
		if m.IsMax {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AcceptItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DealID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.DealID)))
		i += copy(dAtA[i:], m.DealID)
	}
	return i, nil
}

func (m *AcceptItemRequestRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptItemRequestRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RejectItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DealID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.DealID)))
		i += copy(dAtA[i:], m.DealID)
	}
	return i, nil
}

func (m *RejectItemRequestRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RejectItemRequestRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ItemRequestOverdue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemRequestOverdue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DealID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.DealID)))
		i += copy(dAtA[i:], m.DealID)
	}
	return i, nil
}

func (m *ItemRequestOverdueRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemRequestOverdueRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FollowPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FollowID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.FollowID))
	}
	return i, nil
}

func (m *RefuseFriendPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefuseFriendPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Friend != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Friend.Size()))
		n12, err := m.Friend.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *DeleteFriendPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteFriendPush) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Friend != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Friend.Size()))
		n13, err := m.Friend.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AddSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	return i, nil
}

func (m *AddSaleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddSaleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sale != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Sale.Size()))
		n14, err := m.Sale.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *RemoveSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveSale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ItemID))
	}
	return i, nil
}

func (m *RemoveSaleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveSaleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetSale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSale) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetSaleRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSaleRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sale != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Sale.Size()))
		n15, err := m.Sale.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *GetSales) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSales) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA17 := make([]byte, len(m.Id)*10)
		var j16 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	return i, nil
}

func (m *GetSalesRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSalesRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sales) > 0 {
		for _, msg := range m.Sales {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GlobalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sale != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Sale.Size()))
		n18, err := m.Sale.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.NewsFeed != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.NewsFeed.Size()))
		n19, err := m.NewsFeed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *LampMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LampMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *NoticeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NoticeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.NoticeID))
	}
	return i, nil
}

func (m *PublicShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicShare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Type))
	}
	if len(m.RefID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(len(m.RefID)))
		i += copy(dAtA[i:], m.RefID)
	}
	return i, nil
}

func (m *PublicShareRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicShareRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PublicWechatShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicWechatShare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Type))
	}
	if m.RefType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.RefType))
	}
	if m.RefNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.RefNum))
	}
	return i, nil
}

func (m *PublicWechatShareRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicWechatShareRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reward != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Reward.Size()))
		n20, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.ShareCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ShareCount))
	}
	if m.BuildType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.BuildType))
	}
	return i, nil
}

func (m *DrawWechatShareReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawWechatShareReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewsfeedType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.NewsfeedType))
	}
	return i, nil
}

func (m *DrawWechatShareRewardRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawWechatShareRewardRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reward != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Reward.Size()))
		n21, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.ShareCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.ShareCount))
	}
	return i, nil
}

func (m *GetWechatShareTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWechatShareTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetWechatShareTimeRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWechatShareTimeRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextDraw != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.NextDraw))
	}
	return i, nil
}

func (m *WatchAdSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchAdSuccess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *WatchAdSuccessRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchAdSuccessRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reward != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Reward.Size()))
		n22, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *GuideRevengeRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuideRevengeRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewsFeed != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.NewsFeed.Size()))
		n23, err := m.NewsFeed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *GetGlobalMessageRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGlobalMessageRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		for _, msg := range m.Message {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommunity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DrawDayGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawDayGift) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *DrawDayGiftRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawDayGiftRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reward != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommunity(dAtA, i, uint64(m.Reward.Size()))
		n24, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func encodeVarintCommunity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.FollowEachOther {
		n += 2
	}
	if m.LastOnlineTime != 0 {
		n += 1 + sovCommunity(uint64(m.LastOnlineTime))
	}
	if m.FollowTime != 0 {
		n += 1 + sovCommunity(uint64(m.FollowTime))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.Help {
		n += 2
	}
	if m.StarType != 0 {
		n += 1 + sovCommunity(uint64(m.StarType))
	}
	return n
}

func (m *FriendRequestInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.AddTime != 0 {
		n += 1 + sovCommunity(uint64(m.AddTime))
	}
	return n
}

func (m *UserDetailInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *SearchUser) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *SearchUserRet) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *GetFriendList) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetFriendListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Friends) > 0 {
		for _, e := range m.Friends {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *GetFriendDetailInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetFriendDetailInfoRet) Size() (n int) {
	var l int
	_ = l
	if m.Detail != nil {
		l = m.Detail.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *DeleteFriend) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.FriendID != 0 {
		n += 1 + sovCommunity(uint64(m.FriendID))
	}
	return n
}

func (m *DeleteFriendRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *GetFriendRequestList) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetFriendRequestListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.FriendRequests) > 0 {
		for _, e := range m.FriendRequests {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *AddFriendRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.RequestID != 0 {
		n += 1 + sovCommunity(uint64(m.RequestID))
	}
	return n
}

func (m *AddFriendRequestRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *AcceptFriendRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.RequestID != 0 {
		n += 1 + sovCommunity(uint64(m.RequestID))
	}
	return n
}

func (m *AcceptFriendRequestRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *RefuseFriendRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.RequestID != 0 {
		n += 1 + sovCommunity(uint64(m.RequestID))
	}
	return n
}

func (m *RefuseFriendRequestRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *Follow) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.FollowerID != 0 {
		n += 1 + sovCommunity(uint64(m.FollowerID))
	}
	return n
}

func (m *FollowRet) Size() (n int) {
	var l int
	_ = l
	if m.Follower != nil {
		l = m.Follower.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *Unfollow) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.UnfollowerID != 0 {
		n += 1 + sovCommunity(uint64(m.UnfollowerID))
	}
	return n
}

func (m *UnfollowRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *GetFollowerList) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetFollowerListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Followers) > 0 {
		for _, e := range m.Followers {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *GetFollowingList) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetFollowingListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Followings) > 0 {
		for _, e := range m.Followings {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *FollowEach) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCommunity(uint64(m.Uid))
	}
	if m.FollowID != 0 {
		n += 1 + sovCommunity(uint64(m.FollowID))
	}
	return n
}

func (m *GetFollowState) Size() (n int) {
	var l int
	_ = l
	if m.Uid1 != 0 {
		n += 1 + sovCommunity(uint64(m.Uid1))
	}
	if m.Uid2 != 0 {
		n += 1 + sovCommunity(uint64(m.Uid2))
	}
	return n
}

func (m *GetFollowStateRet) Size() (n int) {
	var l int
	_ = l
	if m.Follower {
		n += 2
	}
	if m.Following {
		n += 2
	}
	return n
}

func (m *Sale) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	if m.PublicTime != 0 {
		n += 1 + sovCommunity(uint64(m.PublicTime))
	}
	l = len(m.RefID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *PublicSale) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	return n
}

func (m *PublicSaleRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.PublicTime != 0 {
		n += 1 + sovCommunity(uint64(m.PublicTime))
	}
	return n
}

func (m *CancelSale) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	return n
}

func (m *CancelSaleRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *BuySale) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	return n
}

func (m *BuySaleRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *GetSaleInfo) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetSaleInfoRet) Size() (n int) {
	var l int
	_ = l
	if m.MySale != nil {
		l = m.MySale.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.PublicTime != 0 {
		n += 1 + sovCommunity(uint64(m.PublicTime))
	}
	return n
}

func (m *Stranger) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovCommunity(uint64(m.Type))
	}
	if m.Param != 0 {
		n += 1 + sovCommunity(uint64(m.Param))
	}
	if m.Time != 0 {
		n += 1 + sovCommunity(uint64(m.Time))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *GetStrangerList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetStrangerListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Strangers) > 0 {
		for _, e := range m.Strangers {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *SearchResult) Size() (n int) {
	var l int
	_ = l
	l = len(m.SearchID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *SearchItem) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.StarType != 0 {
		n += 1 + sovCommunity(uint64(m.StarType))
	}
	if len(m.ItemIDs) > 0 {
		l = 0
		for _, e := range m.ItemIDs {
			l += sovCommunity(uint64(e))
		}
		n += 1 + sovCommunity(uint64(l)) + l
	}
	if len(m.ExistItems) > 0 {
		l = 0
		for _, e := range m.ExistItems {
			l += sovCommunity(uint64(e))
		}
		n += 1 + sovCommunity(uint64(l)) + l
	}
	if m.Cost {
		n += 2
	}
	return n
}

func (m *SearchItemRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Strangers) > 0 {
		for _, e := range m.Strangers {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *NewsFeed) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.RelateID != 0 {
		n += 1 + sovCommunity(uint64(m.RelateID))
	}
	if m.Type != 0 {
		n += 1 + sovCommunity(uint64(m.Type))
	}
	if m.Time != 0 {
		n += 1 + sovCommunity(uint64(m.Time))
	}
	if m.Param1 != 0 {
		n += 1 + sovCommunity(uint64(m.Param1))
	}
	if m.Param2 != 0 {
		n += 1 + sovCommunity(uint64(m.Param2))
	}
	if m.Param3 != 0 {
		n += 1 + sovCommunity(uint64(m.Param3))
	}
	if m.DoneRevenge {
		n += 2
	}
	if len(m.Ext) > 0 {
		for _, s := range m.Ext {
			l = len(s)
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	if m.Read {
		n += 2
	}
	return n
}

func (m *NewsFeedDetail) Size() (n int) {
	var l int
	_ = l
	if len(m.BelieverInfo) > 0 {
		for _, e := range m.BelieverInfo {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	if len(m.AttackStatistics) > 0 {
		for _, e := range m.AttackStatistics {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	if m.Faith != 0 {
		n += 1 + sovCommunity(uint64(m.Faith))
	}
	if m.ItemNum != 0 {
		n += 1 + sovCommunity(uint64(m.ItemNum))
	}
	return n
}

func (m *AttackStatistics) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovCommunity(uint64(m.Level))
	}
	if m.Num != 0 {
		n += 1 + sovCommunity(uint64(m.Num))
	}
	return n
}

func (m *ReadNewsfeed) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *ReadNewsfeedRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *GetNewsfeedDetail) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *GetNewsfeedDetailRet) Size() (n int) {
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.Other != nil {
		l = m.Other.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *GetNewsfeedList) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetNewsfeedListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.NewsFeeds) > 0 {
		for _, e := range m.NewsFeeds {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *GetOfflineNewsfeedList) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetOfflineNewsfeedListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.NewsFeeds) > 0 {
		for _, e := range m.NewsFeeds {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *GetDealList) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetDealListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Deals) > 0 {
		for _, e := range m.Deals {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *RequestItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.SearchID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *RequestItemRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	l = len(m.DealID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *LootItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.SearchID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.LootID != 0 {
		n += 1 + sovCommunity(uint64(m.LootID))
	}
	if m.BuildingID != 0 {
		n += 1 + sovCommunity(uint64(m.BuildingID))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	if m.BuildingLevel != 0 {
		n += 1 + sovCommunity(uint64(m.BuildingLevel))
	}
	return n
}

func (m *LootItemRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	if m.Building != 0 {
		n += 1 + sovCommunity(uint64(m.Building))
	}
	return n
}

func (m *LootStarBeliever) Size() (n int) {
	var l int
	_ = l
	if m.AttackID != 0 {
		n += 1 + sovCommunity(uint64(m.AttackID))
	}
	if m.DestID != 0 {
		n += 1 + sovCommunity(uint64(m.DestID))
	}
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			l = len(s)
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *LootStarBelieverRet) Size() (n int) {
	var l int
	_ = l
	if len(m.BelieverID) > 0 {
		for _, s := range m.BelieverID {
			l = len(s)
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	if m.Shield {
		n += 2
	}
	if m.IsMax {
		n += 2
	}
	return n
}

func (m *AcceptItemRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DealID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *AcceptItemRequestRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *RejectItemRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DealID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *RejectItemRequestRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *ItemRequestOverdue) Size() (n int) {
	var l int
	_ = l
	l = len(m.DealID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *ItemRequestOverdueRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *FollowPush) Size() (n int) {
	var l int
	_ = l
	if m.FollowID != 0 {
		n += 1 + sovCommunity(uint64(m.FollowID))
	}
	return n
}

func (m *RefuseFriendPush) Size() (n int) {
	var l int
	_ = l
	if m.Friend != nil {
		l = m.Friend.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *DeleteFriendPush) Size() (n int) {
	var l int
	_ = l
	if m.Friend != nil {
		l = m.Friend.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *AddSale) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	return n
}

func (m *AddSaleRet) Size() (n int) {
	var l int
	_ = l
	if m.Sale != nil {
		l = m.Sale.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *RemoveSale) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	if m.ItemID != 0 {
		n += 1 + sovCommunity(uint64(m.ItemID))
	}
	return n
}

func (m *RemoveSaleRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *GetSale) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommunity(uint64(m.Id))
	}
	return n
}

func (m *GetSaleRet) Size() (n int) {
	var l int
	_ = l
	if m.Sale != nil {
		l = m.Sale.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *GetSales) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovCommunity(uint64(e))
		}
		n += 1 + sovCommunity(uint64(l)) + l
	}
	return n
}

func (m *GetSalesRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Sales) > 0 {
		for _, e := range m.Sales {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *GlobalMessage) Size() (n int) {
	var l int
	_ = l
	if m.Sale != nil {
		l = m.Sale.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.NewsFeed != nil {
		l = m.NewsFeed.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *LampMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *NoticeMessage) Size() (n int) {
	var l int
	_ = l
	if m.NoticeID != 0 {
		n += 1 + sovCommunity(uint64(m.NoticeID))
	}
	return n
}

func (m *PublicShare) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommunity(uint64(m.Type))
	}
	l = len(m.RefID)
	if l > 0 {
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *PublicShareRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *PublicWechatShare) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommunity(uint64(m.Type))
	}
	if m.RefType != 0 {
		n += 1 + sovCommunity(uint64(m.RefType))
	}
	if m.RefNum != 0 {
		n += 1 + sovCommunity(uint64(m.RefNum))
	}
	return n
}

func (m *PublicWechatShareRet) Size() (n int) {
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.ShareCount != 0 {
		n += 1 + sovCommunity(uint64(m.ShareCount))
	}
	if m.BuildType != 0 {
		n += 1 + sovCommunity(uint64(m.BuildType))
	}
	return n
}

func (m *DrawWechatShareReward) Size() (n int) {
	var l int
	_ = l
	if m.NewsfeedType != 0 {
		n += 1 + sovCommunity(uint64(m.NewsfeedType))
	}
	return n
}

func (m *DrawWechatShareRewardRet) Size() (n int) {
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	if m.ShareCount != 0 {
		n += 1 + sovCommunity(uint64(m.ShareCount))
	}
	return n
}

func (m *GetWechatShareTime) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetWechatShareTimeRet) Size() (n int) {
	var l int
	_ = l
	if m.NextDraw != 0 {
		n += 1 + sovCommunity(uint64(m.NextDraw))
	}
	return n
}

func (m *WatchAdSuccess) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommunity(uint64(m.Type))
	}
	return n
}

func (m *WatchAdSuccessRet) Size() (n int) {
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *GuideRevengeRet) Size() (n int) {
	var l int
	_ = l
	if m.NewsFeed != nil {
		l = m.NewsFeed.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func (m *GetGlobalMessageRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovCommunity(uint64(l))
		}
	}
	return n
}

func (m *DrawDayGift) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCommunity(uint64(m.Uid))
	}
	return n
}

func (m *DrawDayGiftRet) Size() (n int) {
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovCommunity(uint64(l))
	}
	return n
}

func sovCommunity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommunity(x uint64) (n int) {
	return sovCommunity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: user_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: user_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowEachOther", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FollowEachOther = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOnlineTime", wireType)
			}
			m.LastOnlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOnlineTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowTime", wireType)
			}
			m.FollowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserDetailInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Help = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarType", wireType)
			}
			m.StarType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendRequestInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: friend_request_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: friend_request_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTime", wireType)
			}
			m.AddTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDetailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: user_detail_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: user_detail_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: search_user: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: search_user: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchUserRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: search_user_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: search_user_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFriendList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_friend_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_friend_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFriendListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_friend_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_friend_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friends", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Friends = append(m.Friends, &UserInfo{})
			if err := m.Friends[len(m.Friends)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFriendDetailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_friend_detail_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_friend_detail_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFriendDetailInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_friend_detail_info_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_friend_detail_info_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Detail == nil {
				m.Detail = &UserDetailInfo{}
			}
			if err := m.Detail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: delete_friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: delete_friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendID", wireType)
			}
			m.FriendID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFriendRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: delete_friend_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: delete_friend_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFriendRequestList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_friend_request_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_friend_request_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFriendRequestListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_friend_request_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_friend_request_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendRequests = append(m.FriendRequests, &FriendRequestInfo{})
			if err := m.FriendRequests[len(m.FriendRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFriendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_friend_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_friend_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFriendRequestRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_friend_request_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_friend_request_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptFriendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accept_friend_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accept_friend_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptFriendRequestRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accept_friend_request_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accept_friend_request_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefuseFriendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: refuse_friend_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: refuse_friend_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefuseFriendRequestRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: refuse_friend_request_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: refuse_friend_request_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Follow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: follow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: follow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerID", wireType)
			}
			m.FollowerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: follow_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: follow_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Follower == nil {
				m.Follower = &UserInfo{}
			}
			if err := m.Follower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unfollow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: unfollow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: unfollow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnfollowerID", wireType)
			}
			m.UnfollowerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnfollowerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnfollowRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: unfollow_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: unfollow_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFollowerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_follower_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_follower_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFollowerListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_follower_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_follower_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Followers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Followers = append(m.Followers, &UserInfo{})
			if err := m.Followers[len(m.Followers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFollowingList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_following_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_following_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFollowingListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_following_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_following_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Followings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Followings = append(m.Followings, &UserInfo{})
			if err := m.Followings[len(m.Followings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowEach) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: follow_each: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: follow_each: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowID", wireType)
			}
			m.FollowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFollowState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_follow_state: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_follow_state: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid1", wireType)
			}
			m.Uid1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid2", wireType)
			}
			m.Uid2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFollowStateRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_follow_state_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_follow_state_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follower", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Follower = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Following", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Following = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicTime", wireType)
			}
			m.PublicTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_sale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_sale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicSaleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_sale_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_sale_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicTime", wireType)
			}
			m.PublicTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cancel_sale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cancel_sale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelSaleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cancel_sale_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cancel_sale_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuySale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: buy_sale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: buy_sale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuySaleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: buy_sale_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: buy_sale_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSaleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_sale_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_sale_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSaleInfoRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_sale_info_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_sale_info_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MySale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MySale == nil {
				m.MySale = &Sale{}
			}
			if err := m.MySale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicTime", wireType)
			}
			m.PublicTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stranger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stranger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stranger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			m.Param = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStrangerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_stranger_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_stranger_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStrangerListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_stranger_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_stranger_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strangers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strangers = append(m.Strangers, &Stranger{})
			if err := m.Strangers[len(m.Strangers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: search_result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: search_result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: search_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: search_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarType", wireType)
			}
			m.StarType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommunity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ItemIDs = append(m.ItemIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommunity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommunity
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommunity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ItemIDs = append(m.ItemIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemIDs", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommunity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExistItems = append(m.ExistItems, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommunity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommunity
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommunity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExistItems = append(m.ExistItems, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistItems", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cost = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: search_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: search_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strangers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strangers = append(m.Strangers, &SearchResult{})
			if err := m.Strangers[len(m.Strangers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelateID", wireType)
			}
			m.RelateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelateID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param1", wireType)
			}
			m.Param1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param2", wireType)
			}
			m.Param2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param3", wireType)
			}
			m.Param3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoneRevenge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoneRevenge = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = append(m.Ext, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Read = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewsFeedDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewsFeedDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewsFeedDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BelieverInfo = append(m.BelieverInfo, &BelieverInfo{})
			if err := m.BelieverInfo[len(m.BelieverInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackStatistics = append(m.AttackStatistics, &AttackStatistics{})
			if err := m.AttackStatistics[len(m.AttackStatistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemNum", wireType)
			}
			m.ItemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttackStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: attack_statistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: attack_statistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadNewsfeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: read_newsfeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: read_newsfeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadNewsfeedRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: read_newsfeed_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: read_newsfeed_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewsfeedDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_newsfeed_detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_newsfeed_detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewsfeedDetailRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_newsfeed_detail_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_newsfeed_detail_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &NewsFeedDetail{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Other == nil {
				m.Other = &NewsFeedDetail{}
			}
			if err := m.Other.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewsfeedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_newsfeed_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_newsfeed_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNewsfeedListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_newsfeed_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_newsfeed_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsFeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewsFeeds = append(m.NewsFeeds, &NewsFeed{})
			if err := m.NewsFeeds[len(m.NewsFeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOfflineNewsfeedList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_offline_newsfeed_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_offline_newsfeed_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOfflineNewsfeedListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_offline_newsfeed_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_offline_newsfeed_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsFeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewsFeeds = append(m.NewsFeeds, &NewsFeed{})
			if err := m.NewsFeeds[len(m.NewsFeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDealList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_deal_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_deal_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDealListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_deal_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_deal_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deals = append(m.Deals, &NewsFeed{})
			if err := m.Deals[len(m.Deals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: request_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: request_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: request_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: request_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LootID", wireType)
			}
			m.LootID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LootID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingID", wireType)
			}
			m.BuildingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingLevel", wireType)
			}
			m.BuildingLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootItemRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_item_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_item_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
			m.Building = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Building |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootStarBeliever) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_star_believer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_star_believer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackID", wireType)
			}
			m.AttackID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestID", wireType)
			}
			m.DestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BelieverID = append(m.BelieverID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LootStarBelieverRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: loot_star_believer_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: loot_star_believer_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BelieverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BelieverID = append(m.BelieverID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shield = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMax", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMax = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accept_item_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accept_item_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptItemRequestRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accept_item_request_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accept_item_request_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reject_item_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reject_item_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RejectItemRequestRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reject_item_request_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reject_item_request_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemRequestOverdue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: item_request_overdue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: item_request_overdue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemRequestOverdueRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: item_request_overdue_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: item_request_overdue_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: follow_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: follow_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowID", wireType)
			}
			m.FollowID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefuseFriendPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: refuse_friend_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: refuse_friend_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friend == nil {
				m.Friend = &UserInfo{}
			}
			if err := m.Friend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteFriendPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: delete_friend_push: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: delete_friend_push: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Friend == nil {
				m.Friend = &UserInfo{}
			}
			if err := m.Friend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_sale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_sale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddSaleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_sale_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_sale_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sale == nil {
				m.Sale = &Sale{}
			}
			if err := m.Sale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_sale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_sale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveSaleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: remove_sale_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: remove_sale_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_sale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_sale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSaleRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_sale_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_sale_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sale == nil {
				m.Sale = &Sale{}
			}
			if err := m.Sale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSales) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_sales: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_sales: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommunity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommunity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommunity
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommunity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSalesRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_sales_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_sales_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sales", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sales = append(m.Sales, &Sale{})
			if err := m.Sales[len(m.Sales)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: global_message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: global_message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sale == nil {
				m.Sale = &Sale{}
			}
			if err := m.Sale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsFeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewsFeed == nil {
				m.NewsFeed = &NewsFeed{}
			}
			if err := m.NewsFeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LampMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lamp_message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lamp_message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: notice_message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: notice_message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeID", wireType)
			}
			m.NoticeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoticeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_share: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_share: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicShareRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_share_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_share_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicWechatShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_wechat_share: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_wechat_share: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefType", wireType)
			}
			m.RefType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefNum", wireType)
			}
			m.RefNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicWechatShareRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_wechat_share_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_wechat_share_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCount", wireType)
			}
			m.ShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildType", wireType)
			}
			m.BuildType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawWechatShareReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: draw_wechat_share_reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: draw_wechat_share_reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsfeedType", wireType)
			}
			m.NewsfeedType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewsfeedType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawWechatShareRewardRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: draw_wechat_share_reward_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: draw_wechat_share_reward_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCount", wireType)
			}
			m.ShareCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWechatShareTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_wechat_share_time: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_wechat_share_time: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWechatShareTimeRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_wechat_share_time_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_wechat_share_time_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDraw", wireType)
			}
			m.NextDraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDraw |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchAdSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: watch_ad_success: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: watch_ad_success: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchAdSuccessRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: watch_ad_success_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: watch_ad_success_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuideRevengeRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: guide_revenge_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: guide_revenge_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsFeed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewsFeed == nil {
				m.NewsFeed = &NewsFeed{}
			}
			if err := m.NewsFeed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGlobalMessageRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_global_message_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_global_message_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &GlobalMessage{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawDayGift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: draw_day_gift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: draw_day_gift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawDayGiftRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: draw_day_gift_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: draw_day_gift_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommunity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommunity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommunity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommunity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommunity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommunity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommunity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommunity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommunity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommunity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommunity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("community.proto", fileDescriptorCommunity) }

var fileDescriptorCommunity = []byte{
	// 1997 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4b, 0x73, 0xdc, 0xc6,
	0x11, 0x2e, 0x70, 0x1f, 0xc4, 0x36, 0x97, 0x0f, 0x81, 0x32, 0x09, 0x53, 0x8f, 0xac, 0x27, 0x0a,
	0xb3, 0xb6, 0x2c, 0xc6, 0x5a, 0x96, 0x12, 0x97, 0x55, 0x76, 0x25, 0x12, 0x95, 0x84, 0x29, 0xbf,
	0x02, 0xe9, 0xa6, 0xc3, 0xd6, 0x10, 0x98, 0xdd, 0x45, 0x8c, 0x05, 0x18, 0x60, 0xc0, 0x15, 0x8f,
	0x39, 0xf9, 0x92, 0xbf, 0x90, 0xbf, 0x93, 0xca, 0x31, 0x3f, 0x21, 0xa5, 0x7b, 0xf2, 0x1b, 0x52,
	0xd3, 0x33, 0x83, 0x37, 0x41, 0x31, 0xca, 0x69, 0xd1, 0x3d, 0x5f, 0x3f, 0xa6, 0xa7, 0xa7, 0xa7,
	0x7b, 0x61, 0xdb, 0x8d, 0x96, 0xcb, 0x34, 0xf4, 0xf9, 0xe5, 0xd1, 0x79, 0x1c, 0xf1, 0xc8, 0x32,
	0xf1, 0xc7, 0x8d, 0x82, 0x83, 0x2d, 0x4a, 0xc5, 0x62, 0x14, 0xca, 0x15, 0xf2, 0x6f, 0x03, 0x06,
	0x69, 0xc2, 0xe2, 0xa9, 0x1f, 0xce, 0x22, 0x6b, 0x0b, 0xd6, 0x7c, 0xcf, 0x36, 0x46, 0xc6, 0xb8,
	0xe7, 0xac, 0xf9, 0x9e, 0x35, 0x86, 0xed, 0x59, 0x14, 0x04, 0xd1, 0xea, 0x05, 0x75, 0x17, 0xdf,
	0xf1, 0x05, 0x8b, 0xed, 0xce, 0xc8, 0x18, 0x9b, 0x4e, 0x95, 0x6d, 0x1d, 0xc2, 0x56, 0x40, 0x13,
	0xfe, 0x5d, 0x18, 0xf8, 0x21, 0x7b, 0xe5, 0x2f, 0x99, 0xdd, 0x1d, 0x19, 0xe3, 0x8e, 0x53, 0xe1,
	0x5a, 0xf7, 0x01, 0xa4, 0x28, 0x62, 0x7a, 0x88, 0x29, 0x70, 0xac, 0x23, 0xe8, 0x7a, 0x94, 0x53,
	0x7b, 0x7d, 0x64, 0x8c, 0x37, 0x26, 0x07, 0x47, 0xda, 0xf1, 0x23, 0x74, 0xd2, 0x63, 0x9c, 0xfa,
	0x01, 0xfa, 0xea, 0x20, 0xce, 0xb2, 0xa0, 0xbb, 0x60, 0xc1, 0xb9, 0x0d, 0xe8, 0x16, 0x7e, 0x5b,
	0x07, 0x60, 0x26, 0x9c, 0xc6, 0xaf, 0x2e, 0xcf, 0x99, 0xbd, 0x81, 0x7b, 0xc9, 0x68, 0xf2, 0x1a,
	0x76, 0x67, 0xb1, 0xcf, 0x42, 0x6f, 0x1a, 0xb3, 0x3f, 0xa7, 0x2c, 0xe1, 0xcd, 0x1b, 0x3f, 0x00,
	0x33, 0xf4, 0xdd, 0x1f, 0x42, 0xba, 0x64, 0xf6, 0xda, 0xc8, 0x18, 0x0f, 0x9c, 0x8c, 0xb6, 0x6c,
	0x58, 0xa7, 0x9e, 0x87, 0xfe, 0x77, 0xd0, 0x7f, 0x4d, 0x92, 0x5f, 0xc2, 0x4e, 0xd5, 0xcd, 0x9a,
	0x66, 0x0b, 0xba, 0x1e, 0x4b, 0x5c, 0xa5, 0x15, 0xbf, 0xc9, 0x3d, 0xd8, 0x48, 0x18, 0x8d, 0xdd,
	0xc5, 0x54, 0x88, 0x57, 0x45, 0xc8, 0x17, 0xb0, 0x5d, 0x58, 0x9e, 0xc6, 0x8c, 0x5b, 0x3f, 0x87,
	0xae, 0xf8, 0x46, 0xd0, 0xc6, 0x64, 0xb7, 0x12, 0x26, 0x19, 0x1f, 0xf1, 0x49, 0x3e, 0x82, 0xed,
	0x39, 0xe3, 0x53, 0xb5, 0xe7, 0xc0, 0x4f, 0x78, 0x4d, 0xfd, 0x09, 0xec, 0x56, 0x20, 0x68, 0xe2,
	0x11, 0xac, 0x4b, 0x56, 0x62, 0x1b, 0xa3, 0xce, 0x55, 0x56, 0x34, 0x86, 0x8c, 0x61, 0xaf, 0xa0,
	0xa5, 0x25, 0x02, 0xe4, 0x7b, 0x38, 0x68, 0x46, 0xa2, 0xd9, 0x09, 0xf4, 0x25, 0x4b, 0xed, 0xad,
	0x2d, 0x05, 0x14, 0x92, 0x3c, 0x85, 0x4d, 0x8f, 0x05, 0x8c, 0x33, 0xa5, 0xb4, 0xe9, 0x38, 0xe5,
	0xca, 0xe9, 0x09, 0x06, 0xbe, 0xe7, 0x64, 0x34, 0x79, 0x08, 0xb7, 0x4a, 0xc2, 0xe8, 0xc5, 0x1e,
	0xf4, 0x63, 0x96, 0xa4, 0x01, 0x47, 0x25, 0xa6, 0xa3, 0x28, 0xf2, 0x31, 0xec, 0x17, 0x7c, 0xd7,
	0x29, 0xd4, 0x18, 0x56, 0x0f, 0xee, 0x5c, 0x01, 0x45, 0x0b, 0x2f, 0x60, 0x4b, 0x2e, 0x39, 0x72,
	0x45, 0x47, 0xf9, 0x5e, 0xbe, 0xdf, 0x86, 0x44, 0x75, 0x2a, 0x42, 0xe4, 0x19, 0x58, 0xd4, 0xf3,
	0x2a, 0x56, 0x6a, 0xfb, 0xbf, 0x0b, 0x03, 0xb5, 0x94, 0x05, 0x20, 0x67, 0x90, 0xcf, 0x60, 0xaf,
	0xae, 0xa3, 0x35, 0x0c, 0x2f, 0xe0, 0x03, 0xea, 0xba, 0xec, 0x9c, 0xbf, 0x9f, 0xe1, 0x63, 0xf8,
	0xb0, 0x51, 0xcd, 0x75, 0xb6, 0x63, 0x36, 0x4b, 0x13, 0xf6, 0xde, 0xb6, 0x1b, 0xd5, 0xb4, 0xda,
	0xfe, 0x1c, 0xfa, 0xb2, 0x56, 0xd5, 0x8c, 0x65, 0x75, 0x8d, 0xc5, 0x99, 0xb5, 0x02, 0x87, 0x7c,
	0xa9, 0xd7, 0x51, 0xff, 0x2f, 0xc0, 0xd4, 0x6b, 0x6d, 0x57, 0x38, 0x03, 0x91, 0xaf, 0xc0, 0x4c,
	0xc3, 0x2b, 0x4c, 0x13, 0x18, 0xea, 0xb5, 0x82, 0xf1, 0x12, 0x8f, 0x1c, 0xe6, 0x98, 0xd6, 0x0d,
	0xfe, 0x14, 0x6e, 0x61, 0xd2, 0x2a, 0xc9, 0xe6, 0xcc, 0xfe, 0x03, 0x7c, 0x50, 0x03, 0xa1, 0xd6,
	0xc7, 0x30, 0xd0, 0xcc, 0xd6, 0xa2, 0x91, 0xa3, 0xc8, 0x03, 0xb0, 0x72, 0x5d, 0x7e, 0x38, 0x6f,
	0xb6, 0xf8, 0x8d, 0x2a, 0x2e, 0x25, 0x14, 0x9a, 0x3c, 0xd6, 0x71, 0xf5, 0xc3, 0x79, 0xab, 0xcd,
	0x02, 0x8c, 0x3c, 0x85, 0x0d, 0x15, 0x0b, 0x46, 0xdd, 0x85, 0xb5, 0x03, 0x9d, 0x34, 0x33, 0x27,
	0x3e, 0xb1, 0x5e, 0x20, 0xa0, 0x50, 0x2f, 0x14, 0x4d, 0xbe, 0x80, 0x9d, 0xdc, 0x97, 0x69, 0xc2,
	0x29, 0x67, 0xa2, 0xa8, 0xa7, 0xbe, 0xf7, 0x58, 0xa9, 0xc0, 0x6f, 0xc5, 0x9b, 0x28, 0x79, 0xfc,
	0x26, 0xdf, 0xc3, 0xed, 0xaa, 0x2c, 0xee, 0xe2, 0xa0, 0x92, 0x0f, 0x66, 0x7e, 0xf4, 0x22, 0x8d,
	0x33, 0xd7, 0x51, 0x99, 0xe9, 0xe4, 0x0c, 0xe2, 0x41, 0x37, 0xa1, 0x01, 0xab, 0x25, 0xc5, 0x1e,
	0xf4, 0x7d, 0xce, 0x96, 0x99, 0xff, 0x8a, 0x12, 0x79, 0x7a, 0x9e, 0x9e, 0x05, 0xbe, 0x5b, 0x78,
	0xbf, 0x0a, 0x1c, 0xeb, 0x36, 0xf4, 0x62, 0x36, 0x3b, 0x3d, 0xc1, 0xe7, 0x7b, 0xe0, 0x48, 0x82,
	0x3c, 0x81, 0x0d, 0x89, 0x99, 0xde, 0xc4, 0x18, 0x39, 0x85, 0xed, 0x82, 0x58, 0x5b, 0xe2, 0x55,
	0xfc, 0x5a, 0xab, 0xfa, 0x25, 0x3c, 0x70, 0x69, 0xe8, 0xb2, 0xe0, 0x66, 0x1e, 0x7c, 0x0c, 0xdb,
	0x05, 0xb1, 0xd6, 0xd4, 0x9f, 0x80, 0x79, 0x96, 0x5e, 0xde, 0x4c, 0xfd, 0x21, 0x0c, 0xb5, 0x4c,
	0xab, 0xee, 0x9f, 0xc0, 0xa6, 0x38, 0x77, 0xc4, 0x35, 0xbe, 0x89, 0xaf, 0xe5, 0xbd, 0xcb, 0x00,
	0xa8, 0xed, 0x10, 0xfa, 0xcb, 0xcb, 0x97, 0x34, 0x60, 0xaa, 0x46, 0x6c, 0xe5, 0x79, 0x2d, 0x80,
	0x8e, 0x5a, 0xbd, 0xee, 0x4c, 0xc9, 0x5f, 0x0d, 0x30, 0x5f, 0xf2, 0x98, 0x86, 0xf3, 0x7a, 0x73,
	0x21, 0xd2, 0x94, 0x8b, 0x46, 0x49, 0xa5, 0xa9, 0xf8, 0x16, 0x49, 0x70, 0x4e, 0x63, 0xba, 0x44,
	0x5d, 0x3d, 0x47, 0x12, 0x88, 0xcc, 0x1b, 0x3b, 0xfc, 0x2e, 0xf5, 0x49, 0xbd, 0x4a, 0x9f, 0xb4,
	0x07, 0x7d, 0x7a, 0x41, 0x39, 0x8d, 0xed, 0x3e, 0xae, 0x28, 0x8a, 0xec, 0xaa, 0xbd, 0x2a, 0x8f,
	0xf0, 0x2e, 0x93, 0x53, 0x59, 0x53, 0x4a, 0x4c, 0x0c, 0xc2, 0x67, 0x30, 0xd0, 0x4c, 0x7d, 0xbf,
	0xad, 0x3c, 0x0e, 0x7a, 0x5b, 0x4e, 0x0e, 0x22, 0x3f, 0x1a, 0xb0, 0xa9, 0xfa, 0x25, 0x95, 0x5c,
	0xa2, 0x21, 0x44, 0xc6, 0xe9, 0x09, 0xee, 0x7c, 0xe0, 0x64, 0xb4, 0x8a, 0xc7, 0x5a, 0x63, 0xe7,
	0xd7, 0xa9, 0xef, 0x48, 0xa5, 0x41, 0xb7, 0x74, 0xa9, 0xf2, 0x9d, 0xf6, 0x4a, 0x3b, 0xfd, 0xd1,
	0xc8, 0x1a, 0x3b, 0x81, 0x6c, 0x6a, 0x4b, 0xb2, 0x46, 0x75, 0xad, 0xdc, 0xa8, 0x8a, 0x2e, 0x53,
	0x6a, 0x4f, 0xec, 0xce, 0xa8, 0x33, 0xee, 0x39, 0x9a, 0x14, 0xc7, 0xcd, 0xde, 0xf8, 0x09, 0x3f,
	0xe5, 0x6c, 0x99, 0xd8, 0x5d, 0x5c, 0x2c, 0x70, 0xc4, 0x39, 0xb9, 0x51, 0xc2, 0xd1, 0x17, 0xd3,
	0xc1, 0x6f, 0xf2, 0xfb, 0xac, 0x85, 0x14, 0x5a, 0x30, 0xb0, 0x4f, 0xea, 0x81, 0xdd, 0x2f, 0x24,
	0x58, 0x31, 0x80, 0xc5, 0xe8, 0xfe, 0xc7, 0x00, 0xf3, 0x5b, 0xb6, 0x4a, 0x7e, 0xcb, 0x58, 0xb1,
	0xcf, 0x1a, 0xe8, 0x0d, 0xc5, 0x2c, 0xa0, 0x9c, 0xe5, 0x75, 0x53, 0xd3, 0x59, 0xa2, 0xf5, 0x0a,
	0x89, 0xa6, 0x53, 0xaa, 0x5f, 0x48, 0xa9, 0x3d, 0xe8, 0x63, 0xbe, 0x3d, 0xc6, 0x19, 0xa0, 0xe7,
	0x28, 0x2a, 0xe3, 0x4f, 0x6c, 0xb3, 0xc0, 0x9f, 0x64, 0xfc, 0x63, 0x7b, 0x50, 0xe0, 0x1f, 0x5b,
	0x23, 0xd8, 0xf0, 0xa2, 0x90, 0x39, 0xec, 0x82, 0x85, 0x73, 0x39, 0x08, 0x98, 0x4e, 0x91, 0x25,
	0xea, 0x3e, 0x7b, 0xc3, 0xed, 0xe1, 0xa8, 0x33, 0x1e, 0x38, 0xe2, 0x53, 0xf8, 0x13, 0x33, 0xea,
	0xd9, 0x9b, 0x32, 0x74, 0xe2, 0x9b, 0xfc, 0xdd, 0x80, 0x2d, 0xbd, 0xe1, 0x13, 0xec, 0x37, 0xad,
	0xa7, 0x30, 0x3c, 0x63, 0x81, 0xcf, 0x2e, 0x58, 0x7c, 0x1a, 0xce, 0xa2, 0x7a, 0xf4, 0xf4, 0xaa,
	0x7c, 0x7a, 0x4a, 0x60, 0xeb, 0x77, 0xb0, 0x43, 0x39, 0xa7, 0xee, 0x0f, 0x2f, 0x39, 0xe5, 0x7e,
	0xc2, 0x7d, 0x37, 0xb1, 0xd7, 0x50, 0xc1, 0x9d, 0x5c, 0x81, 0x44, 0xe0, 0x0b, 0x21, 0x21, 0x4e,
	0x4d, 0x48, 0xdc, 0xd2, 0x19, 0xf5, 0xf9, 0x42, 0xdf, 0x52, 0x24, 0x74, 0xde, 0x7c, 0x9b, 0x2e,
	0x55, 0x92, 0x6a, 0x92, 0x3c, 0x85, 0x5b, 0x35, 0xb5, 0x42, 0x49, 0xc0, 0x2e, 0x58, 0xa0, 0xb2,
	0x52, 0x12, 0x22, 0x32, 0x61, 0xba, 0x54, 0x47, 0x28, 0x3e, 0x45, 0x05, 0x13, 0xd1, 0x98, 0x86,
	0x6c, 0x95, 0xcc, 0x1a, 0x8e, 0x5e, 0xb4, 0xd1, 0x25, 0x40, 0x6b, 0x3d, 0xfc, 0x99, 0x1c, 0x39,
	0x32, 0xac, 0xec, 0xe3, 0x6b, 0x3a, 0x57, 0xb2, 0xdb, 0xae, 0xc0, 0x50, 0xf3, 0xa7, 0xd0, 0x4d,
	0x58, 0x30, 0x53, 0x95, 0xd1, 0xce, 0x23, 0x57, 0x3e, 0x2a, 0x07, 0x51, 0xd6, 0x11, 0xf4, 0x22,
	0x9c, 0x5e, 0xd7, 0xae, 0x81, 0x4b, 0x98, 0x6e, 0x83, 0x32, 0xc3, 0x8d, 0x4d, 0x89, 0x2a, 0x59,
	0x25, 0x90, 0x2e, 0x59, 0xa1, 0x52, 0xdb, 0x50, 0xb2, 0xb4, 0x45, 0x27, 0x07, 0x91, 0x87, 0xf0,
	0xa1, 0x50, 0x15, 0xcd, 0x66, 0x62, 0x50, 0xbe, 0xc6, 0xee, 0x1f, 0xe1, 0xde, 0x95, 0xe0, 0xff,
	0xd1, 0xbe, 0x7a, 0x9f, 0x3c, 0x46, 0x83, 0x66, 0x9b, 0x5f, 0xca, 0x80, 0x64, 0x00, 0xb4, 0x33,
	0x86, 0x9e, 0x60, 0xb4, 0xd9, 0x90, 0x00, 0xf2, 0x09, 0x0c, 0xb3, 0x29, 0x46, 0x14, 0xc2, 0x96,
	0x82, 0x4c, 0x9e, 0xc1, 0x4e, 0x11, 0xdb, 0xda, 0x35, 0xec, 0x89, 0x61, 0x91, 0x06, 0xaa, 0xda,
	0x0c, 0x1c, 0x45, 0x91, 0xbf, 0x19, 0x30, 0x08, 0xa2, 0xe8, 0x7a, 0x6b, 0x42, 0x83, 0x00, 0xe6,
	0x2f, 0xbb, 0xa4, 0x44, 0x91, 0x3d, 0x4b, 0xfd, 0xc0, 0xf3, 0xc3, 0xf9, 0xe9, 0x89, 0xba, 0x61,
	0x05, 0xce, 0x95, 0x4f, 0xc1, 0x03, 0xd8, 0xd4, 0xa8, 0xaf, 0xf1, 0x5e, 0xc9, 0x72, 0x57, 0x66,
	0x92, 0xe7, 0xb0, 0x99, 0xb9, 0xd7, 0xba, 0xc1, 0x03, 0xd1, 0x94, 0x48, 0x49, 0x5d, 0x50, 0x35,
	0x4d, 0x16, 0x60, 0xa1, 0x12, 0xf1, 0x64, 0x4c, 0x75, 0x89, 0x11, 0x12, 0xf2, 0x96, 0xab, 0xcd,
	0xf6, 0x9c, 0x8c, 0x96, 0xe1, 0x2a, 0x8c, 0x43, 0x8a, 0xc2, 0xcd, 0xea, 0x12, 0x75, 0x82, 0xcf,
	0xcd, 0xc0, 0x29, 0x70, 0xc8, 0x0c, 0xf6, 0xea, 0x96, 0xd0, 0xef, 0xb2, 0xa4, 0x51, 0x95, 0x14,
	0x16, 0x93, 0x85, 0xcf, 0x02, 0x4f, 0x75, 0xae, 0x8a, 0x12, 0x65, 0xc7, 0x4f, 0xbe, 0xa1, 0x6f,
	0xd4, 0xdf, 0x49, 0x92, 0x20, 0x8f, 0x60, 0x57, 0xcd, 0x83, 0x2a, 0x30, 0x72, 0xb0, 0xcb, 0x4f,
	0xd9, 0x28, 0x9d, 0xf2, 0x63, 0xd8, 0x6f, 0x80, 0xb7, 0x16, 0x9e, 0x47, 0xb0, 0x1b, 0xb3, 0x3f,
	0x31, 0xf7, 0xdd, 0x2d, 0x34, 0xc0, 0x5b, 0x2d, 0x1c, 0xc1, 0xed, 0x12, 0x36, 0xba, 0x60, 0xb1,
	0x97, 0xb2, 0x2b, 0x4d, 0x4c, 0xc0, 0x6e, 0xc2, 0x5f, 0xf3, 0x2f, 0x84, 0x9e, 0x5f, 0xce, 0xd3,
	0x64, 0x51, 0x9a, 0x56, 0x8c, 0xca, 0xb4, 0xf2, 0x1b, 0xb0, 0xca, 0x63, 0x2e, 0x4a, 0x3c, 0x84,
	0xbe, 0x24, 0xdb, 0xa6, 0x4f, 0x05, 0x11, 0x2a, 0xca, 0x7f, 0x90, 0xdc, 0x5c, 0xc5, 0x04, 0x4c,
	0xea, 0x79, 0x37, 0xeb, 0xad, 0x27, 0x30, 0xd4, 0x32, 0x18, 0x0c, 0x22, 0x27, 0x9d, 0x2b, 0x7a,
	0x61, 0x5c, 0x13, 0x53, 0x42, 0xcc, 0x96, 0xd1, 0x05, 0xbb, 0xf1, 0x94, 0x50, 0x10, 0x6b, 0x0d,
	0xfd, 0x01, 0x98, 0xba, 0x51, 0xaf, 0x15, 0xc9, 0x09, 0x0c, 0xb3, 0x26, 0xfe, 0x5d, 0x3d, 0xbe,
	0x03, 0x03, 0x2d, 0x93, 0x64, 0x0a, 0x3b, 0x4a, 0xe1, 0x93, 0x7c, 0x6c, 0x48, 0x50, 0xe3, 0x03,
	0xe8, 0x21, 0xa1, 0x2a, 0x6e, 0x55, 0xa5, 0x5c, 0x24, 0x1e, 0x6c, 0xcd, 0x83, 0xe8, 0x8c, 0x06,
	0xd3, 0x25, 0x4b, 0x12, 0x3a, 0x67, 0xef, 0xe2, 0x89, 0x75, 0x04, 0xa6, 0x7e, 0x10, 0xd4, 0x33,
	0xd9, 0x54, 0xd0, 0x33, 0x0c, 0x21, 0x30, 0x0c, 0xe8, 0xf2, 0x3c, 0xb3, 0x61, 0xa9, 0x7f, 0x6e,
	0x0d, 0xf5, 0xc7, 0x26, 0xe5, 0x94, 0x7c, 0x0a, 0x5b, 0x61, 0xc4, 0x7d, 0x97, 0x65, 0x28, 0xd1,
	0x5e, 0x23, 0x27, 0xcf, 0x55, 0x4d, 0x93, 0xcf, 0x61, 0xa8, 0xc7, 0xc5, 0x05, 0x8d, 0x59, 0xd6,
	0x31, 0x1a, 0xe5, 0xd1, 0x44, 0xce, 0xa7, 0x6b, 0xc5, 0xf9, 0xf4, 0x13, 0xd8, 0x29, 0x4a, 0xb6,
	0x9e, 0xe0, 0x6b, 0xd8, 0x55, 0xd8, 0x15, 0x73, 0x17, 0x94, 0xb7, 0x18, 0xb3, 0x61, 0x3d, 0x66,
	0xb3, 0x42, 0x7b, 0xae, 0x49, 0xa9, 0x7c, 0x26, 0x9a, 0x2c, 0xf9, 0x34, 0x28, 0x8a, 0xfc, 0xc5,
	0x80, 0xfd, 0x06, 0xed, 0xea, 0xb9, 0xec, 0xc7, 0x6c, 0x45, 0x63, 0x7d, 0x63, 0x76, 0xf2, 0xf0,
	0x3a, 0xc8, 0x77, 0xd4, 0xba, 0xa8, 0xaa, 0x28, 0xf6, 0x3c, 0x4a, 0x43, 0xae, 0xff, 0x4c, 0xca,
	0x39, 0xd6, 0x5d, 0x18, 0xe0, 0x2b, 0x80, 0x9e, 0x49, 0x07, 0x72, 0x06, 0xf9, 0x0a, 0x6c, 0x2f,
	0xa6, 0xab, 0xaa, 0x03, 0xa8, 0x99, 0xc0, 0x50, 0xf7, 0x0b, 0xaf, 0xf2, 0xdd, 0x96, 0x78, 0x64,
	0x01, 0x77, 0xaf, 0x92, 0xff, 0xff, 0xee, 0x83, 0xec, 0xcb, 0x0e, 0xaa, 0x64, 0x48, 0xcc, 0x00,
	0xe4, 0x57, 0xb2, 0x1f, 0xaa, 0x2d, 0xe8, 0x3f, 0x4b, 0x42, 0xf6, 0x86, 0x9f, 0xc4, 0x74, 0x85,
	0x1e, 0x74, 0x9c, 0x8c, 0x26, 0x87, 0xb0, 0xb3, 0xa2, 0xdc, 0x5d, 0x4c, 0xa9, 0x37, 0x4d, 0x52,
	0xd7, 0x65, 0x49, 0xd2, 0x74, 0xb2, 0xe4, 0xd7, 0x70, 0xbb, 0x8a, 0xbb, 0xd9, 0xde, 0xc8, 0x73,
	0xb8, 0x35, 0x4f, 0x7d, 0x4f, 0xb8, 0x84, 0xd3, 0x04, 0x8a, 0x17, 0xef, 0x90, 0xf1, 0x0e, 0x77,
	0xe8, 0x6b, 0xf9, 0xbf, 0x56, 0xf9, 0xb6, 0xaa, 0xbf, 0xc1, 0xd7, 0x15, 0xa9, 0xee, 0x7a, 0xa1,
	0x67, 0x2d, 0xc3, 0x1d, 0x0d, 0x24, 0x1f, 0xc1, 0x26, 0x1e, 0x9c, 0x47, 0x2f, 0xa7, 0x73, 0x7f,
	0xc6, 0xeb, 0x7f, 0x6c, 0x89, 0x3e, 0xae, 0x04, 0xb9, 0xd9, 0xa6, 0x9f, 0x0d, 0xff, 0xf1, 0xf6,
	0xbe, 0xf1, 0xcf, 0xb7, 0xf7, 0x8d, 0x7f, 0xbd, 0xbd, 0x6f, 0x9c, 0xf5, 0x11, 0x76, 0xfc, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x97, 0x26, 0xfa, 0x6f, 0x1a, 0x00, 0x00,
}
