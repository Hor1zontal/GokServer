// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventtask.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Task struct {
	Id       int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseID   int32   `protobuf:"varint,2,opt,name=baseID,proto3" json:"baseID,omitempty"`
	State    int32   `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	EventID  int32   `protobuf:"varint,4,opt,name=eventID,proto3" json:"eventID,omitempty"`
	EndingID int32   `protobuf:"varint,5,opt,name=endingID,proto3" json:"endingID,omitempty"`
	Reward   *Reward `protobuf:"bytes,6,opt,name=reward" json:"reward,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{0} }

func (m *Task) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetBaseID() int32 {
	if m != nil {
		return m.BaseID
	}
	return 0
}

func (m *Task) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Task) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

func (m *Task) GetEndingID() int32 {
	if m != nil {
		return m.EndingID
	}
	return 0
}

func (m *Task) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

// 随机事件任务
type RandomEventTask struct {
	FilterType int32 `protobuf:"varint,1,opt,name=filterType,proto3" json:"filterType,omitempty"`
}

func (m *RandomEventTask) Reset()                    { *m = RandomEventTask{} }
func (m *RandomEventTask) String() string            { return proto.CompactTextString(m) }
func (*RandomEventTask) ProtoMessage()               {}
func (*RandomEventTask) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{1} }

func (m *RandomEventTask) GetFilterType() int32 {
	if m != nil {
		return m.FilterType
	}
	return 0
}

type RandomEventTaskRet struct {
	Task     *Task `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	DecPower int32 `protobuf:"varint,2,opt,name=decPower,proto3" json:"decPower,omitempty"`
}

func (m *RandomEventTaskRet) Reset()                    { *m = RandomEventTaskRet{} }
func (m *RandomEventTaskRet) String() string            { return proto.CompactTextString(m) }
func (*RandomEventTaskRet) ProtoMessage()               {}
func (*RandomEventTaskRet) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{2} }

func (m *RandomEventTaskRet) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *RandomEventTaskRet) GetDecPower() int32 {
	if m != nil {
		return m.DecPower
	}
	return 0
}

// 复仇任务
type RandomRevengeTask struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Guide bool   `protobuf:"varint,2,opt,name=guide,proto3" json:"guide,omitempty"`
}

func (m *RandomRevengeTask) Reset()                    { *m = RandomRevengeTask{} }
func (m *RandomRevengeTask) String() string            { return proto.CompactTextString(m) }
func (*RandomRevengeTask) ProtoMessage()               {}
func (*RandomRevengeTask) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{3} }

func (m *RandomRevengeTask) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RandomRevengeTask) GetGuide() bool {
	if m != nil {
		return m.Guide
	}
	return false
}

type RandomRevengeTaskRet struct {
	Task     *Task `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	DecPower int32 `protobuf:"varint,2,opt,name=decPower,proto3" json:"decPower,omitempty"`
}

func (m *RandomRevengeTaskRet) Reset()                    { *m = RandomRevengeTaskRet{} }
func (m *RandomRevengeTaskRet) String() string            { return proto.CompactTextString(m) }
func (*RandomRevengeTaskRet) ProtoMessage()               {}
func (*RandomRevengeTaskRet) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{4} }

func (m *RandomRevengeTaskRet) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *RandomRevengeTaskRet) GetDecPower() int32 {
	if m != nil {
		return m.DecPower
	}
	return 0
}

// 获取任务列表
type GetTaskList struct {
}

func (m *GetTaskList) Reset()                    { *m = GetTaskList{} }
func (m *GetTaskList) String() string            { return proto.CompactTextString(m) }
func (*GetTaskList) ProtoMessage()               {}
func (*GetTaskList) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{5} }

// 获取任务列表
type GetTaskListRet struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *GetTaskListRet) Reset()                    { *m = GetTaskListRet{} }
func (m *GetTaskListRet) String() string            { return proto.CompactTextString(m) }
func (*GetTaskListRet) ProtoMessage()               {}
func (*GetTaskListRet) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{6} }

func (m *GetTaskListRet) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// 触发任务
type TriggerTask struct {
	TaskType int32 `protobuf:"varint,1,opt,name=taskType,proto3" json:"taskType,omitempty"`
	EventID  int32 `protobuf:"varint,2,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (m *TriggerTask) Reset()                    { *m = TriggerTask{} }
func (m *TriggerTask) String() string            { return proto.CompactTextString(m) }
func (*TriggerTask) ProtoMessage()               {}
func (*TriggerTask) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{7} }

func (m *TriggerTask) GetTaskType() int32 {
	if m != nil {
		return m.TaskType
	}
	return 0
}

func (m *TriggerTask) GetEventID() int32 {
	if m != nil {
		return m.EventID
	}
	return 0
}

type TriggerTaskRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *TriggerTaskRet) Reset()                    { *m = TriggerTaskRet{} }
func (m *TriggerTaskRet) String() string            { return proto.CompactTextString(m) }
func (*TriggerTaskRet) ProtoMessage()               {}
func (*TriggerTaskRet) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{8} }

func (m *TriggerTaskRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 设定结局ID
type SetTaskEnding struct {
	TaskId   int32 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	EndingID int32 `protobuf:"varint,2,opt,name=endingID,proto3" json:"endingID,omitempty"`
}

func (m *SetTaskEnding) Reset()                    { *m = SetTaskEnding{} }
func (m *SetTaskEnding) String() string            { return proto.CompactTextString(m) }
func (*SetTaskEnding) ProtoMessage()               {}
func (*SetTaskEnding) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{9} }

func (m *SetTaskEnding) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *SetTaskEnding) GetEndingID() int32 {
	if m != nil {
		return m.EndingID
	}
	return 0
}

type SetTaskEndingRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *SetTaskEndingRet) Reset()                    { *m = SetTaskEndingRet{} }
func (m *SetTaskEndingRet) String() string            { return proto.CompactTextString(m) }
func (*SetTaskEndingRet) ProtoMessage()               {}
func (*SetTaskEndingRet) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{10} }

func (m *SetTaskEndingRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type RandomDial struct {
}

func (m *RandomDial) Reset()                    { *m = RandomDial{} }
func (m *RandomDial) String() string            { return proto.CompactTextString(m) }
func (*RandomDial) ProtoMessage()               {}
func (*RandomDial) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{11} }

type RandomDialRet struct {
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	//    repeated believer_info believerDial = 2; //
	Task *Task `protobuf:"bytes,3,opt,name=task" json:"task,omitempty"`
	//    int32 faith = 4;
	//    int32 power = 5;
	DecPower int32   `protobuf:"varint,6,opt,name=decPower,proto3" json:"decPower,omitempty"`
	Reward   *Reward `protobuf:"bytes,7,opt,name=reward" json:"reward,omitempty"`
	Multiple bool    `protobuf:"varint,8,opt,name=multiple,proto3" json:"multiple,omitempty"`
}

func (m *RandomDialRet) Reset()                    { *m = RandomDialRet{} }
func (m *RandomDialRet) String() string            { return proto.CompactTextString(m) }
func (*RandomDialRet) ProtoMessage()               {}
func (*RandomDialRet) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{12} }

func (m *RandomDialRet) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *RandomDialRet) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *RandomDialRet) GetDecPower() int32 {
	if m != nil {
		return m.DecPower
	}
	return 0
}

func (m *RandomDialRet) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RandomDialRet) GetMultiple() bool {
	if m != nil {
		return m.Multiple
	}
	return false
}

type MultipleDialReward struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *MultipleDialReward) Reset()                    { *m = MultipleDialReward{} }
func (m *MultipleDialReward) String() string            { return proto.CompactTextString(m) }
func (*MultipleDialReward) ProtoMessage()               {}
func (*MultipleDialReward) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{13} }

func (m *MultipleDialReward) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type MultipleDialRewardRet struct {
	Reward *Reward `protobuf:"bytes,1,opt,name=reward" json:"reward,omitempty"`
}

func (m *MultipleDialRewardRet) Reset()                    { *m = MultipleDialRewardRet{} }
func (m *MultipleDialRewardRet) String() string            { return proto.CompactTextString(m) }
func (*MultipleDialRewardRet) ProtoMessage()               {}
func (*MultipleDialRewardRet) Descriptor() ([]byte, []int) { return fileDescriptorEventtask, []int{14} }

func (m *MultipleDialRewardRet) GetReward() *Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func init() {
	proto.RegisterType((*Task)(nil), "protocol.Task")
	proto.RegisterType((*RandomEventTask)(nil), "protocol.random_event_task")
	proto.RegisterType((*RandomEventTaskRet)(nil), "protocol.random_event_task_ret")
	proto.RegisterType((*RandomRevengeTask)(nil), "protocol.random_revenge_task")
	proto.RegisterType((*RandomRevengeTaskRet)(nil), "protocol.random_revenge_task_ret")
	proto.RegisterType((*GetTaskList)(nil), "protocol.get_task_list")
	proto.RegisterType((*GetTaskListRet)(nil), "protocol.get_task_list_ret")
	proto.RegisterType((*TriggerTask)(nil), "protocol.trigger_task")
	proto.RegisterType((*TriggerTaskRet)(nil), "protocol.trigger_task_ret")
	proto.RegisterType((*SetTaskEnding)(nil), "protocol.set_task_ending")
	proto.RegisterType((*SetTaskEndingRet)(nil), "protocol.set_task_ending_ret")
	proto.RegisterType((*RandomDial)(nil), "protocol.random_dial")
	proto.RegisterType((*RandomDialRet)(nil), "protocol.random_dial_ret")
	proto.RegisterType((*MultipleDialReward)(nil), "protocol.multiple_dial_reward")
	proto.RegisterType((*MultipleDialRewardRet)(nil), "protocol.multiple_dial_reward_ret")
}
func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Id))
	}
	if m.BaseID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.BaseID))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.State))
	}
	if m.EventID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.EventID))
	}
	if m.EndingID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.EndingID))
	}
	if m.Reward != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Reward.Size()))
		n1, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RandomEventTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomEventTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FilterType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.FilterType))
	}
	return i, nil
}

func (m *RandomEventTaskRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomEventTaskRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Task.Size()))
		n2, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DecPower != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.DecPower))
	}
	return i, nil
}

func (m *RandomRevengeTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomRevengeTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Guide {
		dAtA[i] = 0x10
		i++
		if m.Guide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RandomRevengeTaskRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomRevengeTaskRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Task != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Task.Size()))
		n3, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DecPower != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.DecPower))
	}
	return i, nil
}

func (m *GetTaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetTaskListRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskListRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEventtask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TriggerTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.TaskType))
	}
	if m.EventID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.EventID))
	}
	return i, nil
}

func (m *TriggerTaskRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerTaskRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetTaskEnding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTaskEnding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.TaskId))
	}
	if m.EndingID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.EndingID))
	}
	return i, nil
}

func (m *SetTaskEndingRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetTaskEndingRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RandomDial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomDial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RandomDialRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomDialRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Position != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Position))
	}
	if m.Task != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Task.Size()))
		n4, err := m.Task.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.DecPower != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.DecPower))
	}
	if m.Reward != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Reward.Size()))
		n5, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Multiple {
		dAtA[i] = 0x40
		i++
		if m.Multiple {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MultipleDialReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultipleDialReward) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *MultipleDialRewardRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultipleDialRewardRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reward != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEventtask(dAtA, i, uint64(m.Reward.Size()))
		n6, err := m.Reward.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintEventtask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Task) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEventtask(uint64(m.Id))
	}
	if m.BaseID != 0 {
		n += 1 + sovEventtask(uint64(m.BaseID))
	}
	if m.State != 0 {
		n += 1 + sovEventtask(uint64(m.State))
	}
	if m.EventID != 0 {
		n += 1 + sovEventtask(uint64(m.EventID))
	}
	if m.EndingID != 0 {
		n += 1 + sovEventtask(uint64(m.EndingID))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovEventtask(uint64(l))
	}
	return n
}

func (m *RandomEventTask) Size() (n int) {
	var l int
	_ = l
	if m.FilterType != 0 {
		n += 1 + sovEventtask(uint64(m.FilterType))
	}
	return n
}

func (m *RandomEventTaskRet) Size() (n int) {
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovEventtask(uint64(l))
	}
	if m.DecPower != 0 {
		n += 1 + sovEventtask(uint64(m.DecPower))
	}
	return n
}

func (m *RandomRevengeTask) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventtask(uint64(l))
	}
	if m.Guide {
		n += 2
	}
	return n
}

func (m *RandomRevengeTaskRet) Size() (n int) {
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovEventtask(uint64(l))
	}
	if m.DecPower != 0 {
		n += 1 + sovEventtask(uint64(m.DecPower))
	}
	return n
}

func (m *GetTaskList) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetTaskListRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovEventtask(uint64(l))
		}
	}
	return n
}

func (m *TriggerTask) Size() (n int) {
	var l int
	_ = l
	if m.TaskType != 0 {
		n += 1 + sovEventtask(uint64(m.TaskType))
	}
	if m.EventID != 0 {
		n += 1 + sovEventtask(uint64(m.EventID))
	}
	return n
}

func (m *TriggerTaskRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *SetTaskEnding) Size() (n int) {
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovEventtask(uint64(m.TaskId))
	}
	if m.EndingID != 0 {
		n += 1 + sovEventtask(uint64(m.EndingID))
	}
	return n
}

func (m *SetTaskEndingRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *RandomDial) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RandomDialRet) Size() (n int) {
	var l int
	_ = l
	if m.Position != 0 {
		n += 1 + sovEventtask(uint64(m.Position))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovEventtask(uint64(l))
	}
	if m.DecPower != 0 {
		n += 1 + sovEventtask(uint64(m.DecPower))
	}
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovEventtask(uint64(l))
	}
	if m.Multiple {
		n += 2
	}
	return n
}

func (m *MultipleDialReward) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEventtask(uint64(m.Type))
	}
	return n
}

func (m *MultipleDialRewardRet) Size() (n int) {
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovEventtask(uint64(l))
	}
	return n
}

func sovEventtask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEventtask(x uint64) (n int) {
	return sovEventtask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseID", wireType)
			}
			m.BaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndingID", wireType)
			}
			m.EndingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndingID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomEventTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_event_task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_event_task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterType", wireType)
			}
			m.FilterType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomEventTaskRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_event_task_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_event_task_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecPower", wireType)
			}
			m.DecPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecPower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomRevengeTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_revenge_task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_revenge_task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guide = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomRevengeTaskRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_revenge_task_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_revenge_task_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecPower", wireType)
			}
			m.DecPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecPower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_task_list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_task_list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskListRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: get_task_list_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: get_task_list_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: trigger_task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: trigger_task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			m.EventID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerTaskRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: trigger_task_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: trigger_task_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTaskEnding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_task_ending: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_task_ending: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndingID", wireType)
			}
			m.EndingID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndingID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetTaskEndingRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_task_ending_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_task_ending_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomDial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_dial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_dial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomDialRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: random_dial_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: random_dial_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &Task{}
			}
			if err := m.Task.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecPower", wireType)
			}
			m.DecPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecPower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiple", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Multiple = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultipleDialReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: multiple_dial_reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: multiple_dial_reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultipleDialRewardRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: multiple_dial_reward_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: multiple_dial_reward_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventtask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &Reward{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventtask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventtask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventtask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventtask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventtask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEventtask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEventtask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEventtask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEventtask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventtask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("eventtask.proto", fileDescriptorEventtask) }

var fileDescriptorEventtask = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xb1, 0x6e, 0xdb, 0x3c,
	0x10, 0x06, 0x65, 0x4b, 0xd1, 0x7f, 0x4e, 0xec, 0x84, 0xf1, 0x9f, 0x12, 0x1e, 0x0c, 0x83, 0xe8,
	0x60, 0x04, 0xa8, 0x87, 0x64, 0x2a, 0xba, 0x15, 0xea, 0xe0, 0xad, 0x10, 0x02, 0x14, 0x9d, 0x0c,
	0xc5, 0x62, 0x05, 0x22, 0xb2, 0x64, 0x50, 0x74, 0x83, 0xbe, 0x4f, 0xdf, 0xa0, 0x2f, 0xd1, 0xb1,
	0x8f, 0x50, 0xf8, 0x49, 0x0a, 0x9e, 0x48, 0x59, 0x6a, 0x0d, 0xa3, 0x43, 0x27, 0xf2, 0xbb, 0xe3,
	0xdd, 0x7d, 0x77, 0xdf, 0x11, 0x46, 0xe2, 0xb3, 0x28, 0xb4, 0x4e, 0xaa, 0xa7, 0xc5, 0x56, 0x95,
	0xba, 0xa4, 0x21, 0x1e, 0xeb, 0x32, 0x9f, 0x0c, 0x93, 0x64, 0x5d, 0x6e, 0x36, 0x65, 0x51, 0x7b,
	0xf8, 0x57, 0x02, 0xfd, 0x87, 0xa4, 0x7a, 0xa2, 0x43, 0xf0, 0x64, 0xca, 0xc8, 0x8c, 0xcc, 0xfd,
	0xd8, 0x93, 0x29, 0xbd, 0x81, 0xe0, 0x31, 0xa9, 0xc4, 0x32, 0x62, 0x1e, 0xda, 0x2c, 0xa2, 0x63,
	0xf0, 0x2b, 0x9d, 0x68, 0xc1, 0x7a, 0x68, 0xae, 0x01, 0x65, 0x70, 0x86, 0x35, 0x97, 0x11, 0xeb,
	0xa3, 0xdd, 0x41, 0x3a, 0x81, 0x50, 0x14, 0xa9, 0x2c, 0xb2, 0x65, 0xc4, 0x7c, 0x74, 0x35, 0x98,
	0xce, 0x21, 0x50, 0xe2, 0x39, 0x51, 0x29, 0x0b, 0x66, 0x64, 0x3e, 0xb8, 0xbb, 0x5c, 0x38, 0x9e,
	0x8b, 0x18, 0xed, 0xb1, 0xf5, 0xf3, 0x7b, 0xb8, 0x52, 0x49, 0x91, 0x96, 0x9b, 0x15, 0xe6, 0x5d,
	0x99, 0xde, 0xe8, 0x14, 0xe0, 0x93, 0xcc, 0xb5, 0x50, 0x0f, 0x5f, 0xb6, 0xc2, 0x52, 0x6f, 0x59,
	0xf8, 0x07, 0xf8, 0xff, 0x8f, 0xa0, 0x95, 0x12, 0x9a, 0x72, 0xe8, 0x9b, 0x3b, 0x86, 0x0c, 0xee,
	0x86, 0x87, 0xaa, 0x66, 0x12, 0x31, 0xfa, 0x0c, 0xef, 0x54, 0xac, 0xdf, 0x97, 0xcf, 0x42, 0xd9,
	0x09, 0x34, 0x98, 0xbf, 0x81, 0x6b, 0x9b, 0x58, 0x99, 0xcc, 0x99, 0xa8, 0xf9, 0x1c, 0x46, 0xf8,
	0x1f, 0x8e, 0x70, 0x0c, 0x7e, 0xb6, 0x93, 0xa9, 0xc0, 0xf8, 0x30, 0xae, 0x01, 0xff, 0x08, 0x2f,
	0x8e, 0x04, 0xff, 0x13, 0x5e, 0x23, 0xb8, 0xc8, 0x84, 0xed, 0x33, 0x97, 0x95, 0xe6, 0xaf, 0xe1,
	0xaa, 0x63, 0xc0, 0x2a, 0x2f, 0xc1, 0x37, 0x86, 0x8a, 0x91, 0x59, 0xef, 0x48, 0x99, 0xda, 0xc9,
	0x23, 0x38, 0xd7, 0x4a, 0x66, 0x99, 0x50, 0x2b, 0x57, 0xd7, 0x9c, 0xad, 0x51, 0x37, 0xb8, 0xad,
	0xbe, 0xd7, 0x51, 0x9f, 0xdf, 0xc2, 0x65, 0x3b, 0x0b, 0xd6, 0xbf, 0x31, 0xaa, 0x57, 0xbb, 0x5c,
	0x63, 0x9e, 0x30, 0xb6, 0x88, 0xbf, 0x83, 0x51, 0xe5, 0xc8, 0xd6, 0x2b, 0x62, 0x9e, 0x1a, 0xb8,
	0x74, 0x8b, 0x69, 0x51, 0x67, 0xa9, 0xbc, 0xee, 0x52, 0xf1, 0x57, 0x70, 0xfd, 0x5b, 0x9a, 0x93,
	0x55, 0x2f, 0x60, 0x60, 0xe5, 0x48, 0x65, 0x92, 0xf3, 0x6f, 0x04, 0x46, 0x2d, 0x8c, 0xa1, 0x13,
	0x08, 0xb7, 0x65, 0x25, 0xb5, 0x2c, 0x0b, 0xd7, 0xba, 0xc3, 0x8d, 0x64, 0xbd, 0xbf, 0x94, 0x2c,
	0xe8, 0x4a, 0xd6, 0xfa, 0x02, 0x67, 0xa7, 0xbf, 0x80, 0xc9, 0xb2, 0xd9, 0xe5, 0x5a, 0x6e, 0x73,
	0xc1, 0x42, 0x6c, 0xa1, 0xc1, 0xfc, 0x16, 0xc6, 0xee, 0xee, 0x68, 0x63, 0x0c, 0x85, 0xbe, 0x3e,
	0x08, 0x86, 0x77, 0x1e, 0x01, 0x3b, 0xf6, 0x16, 0x3b, 0x3d, 0xb0, 0x21, 0xa7, 0xd9, 0xbc, 0x3d,
	0xff, 0xbe, 0x9f, 0x92, 0x1f, 0xfb, 0x29, 0xf9, 0xb9, 0x9f, 0x92, 0xc7, 0x00, 0x9f, 0xdd, 0xff,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x60, 0x71, 0x81, 0x24, 0x79, 0x04, 0x00, 0x00,
}
