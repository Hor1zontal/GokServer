// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AddAttach struct {
	Faith     int32           `protobuf:"varint,1,opt,name=faith,proto3" json:"faith,omitempty"`
	Power     int32           `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	Diamond   int32           `protobuf:"varint,3,opt,name=diamond,proto3" json:"diamond,omitempty"`
	GayPoint  int32           `protobuf:"varint,4,opt,name=gay_point,json=gayPoint,proto3" json:"gay_point,omitempty"`
	Items     []*BagItem      `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
	Believers []*BelieverInfo `protobuf:"bytes,6,rep,name=believers" json:"believers,omitempty"`
}

func (m *AddAttach) Reset()                    { *m = AddAttach{} }
func (m *AddAttach) String() string            { return proto.CompactTextString(m) }
func (*AddAttach) ProtoMessage()               {}
func (*AddAttach) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

func (m *AddAttach) GetFaith() int32 {
	if m != nil {
		return m.Faith
	}
	return 0
}

func (m *AddAttach) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *AddAttach) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *AddAttach) GetGayPoint() int32 {
	if m != nil {
		return m.GayPoint
	}
	return 0
}

func (m *AddAttach) GetItems() []*BagItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *AddAttach) GetBelievers() []*BelieverInfo {
	if m != nil {
		return m.Believers
	}
	return nil
}

type AddAttachRet struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *AddAttachRet) Reset()                    { *m = AddAttachRet{} }
func (m *AddAttachRet) String() string            { return proto.CompactTextString(m) }
func (*AddAttachRet) ProtoMessage()               {}
func (*AddAttachRet) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

func (m *AddAttachRet) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type SetBuildings struct {
	StarID int32 `protobuf:"varint,1,opt,name=starID,proto3" json:"starID,omitempty"`
	Level  int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *SetBuildings) Reset()                    { *m = SetBuildings{} }
func (m *SetBuildings) String() string            { return proto.CompactTextString(m) }
func (*SetBuildings) ProtoMessage()               {}
func (*SetBuildings) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{2} }

func (m *SetBuildings) GetStarID() int32 {
	if m != nil {
		return m.StarID
	}
	return 0
}

func (m *SetBuildings) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type SetBuildingsRet struct {
	Result []int32 `protobuf:"varint,1,rep,packed,name=result" json:"result,omitempty"`
}

func (m *SetBuildingsRet) Reset()                    { *m = SetBuildingsRet{} }
func (m *SetBuildingsRet) String() string            { return proto.CompactTextString(m) }
func (*SetBuildingsRet) ProtoMessage()               {}
func (*SetBuildingsRet) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{3} }

func (m *SetBuildingsRet) GetResult() []int32 {
	if m != nil {
		return m.Result
	}
	return nil
}

type SetBelievers struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *SetBelievers) Reset()                    { *m = SetBelievers{} }
func (m *SetBelievers) String() string            { return proto.CompactTextString(m) }
func (*SetBelievers) ProtoMessage()               {}
func (*SetBelievers) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{4} }

func (m *SetBelievers) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type SetBelieversRet struct {
	Believers []*BelieverInfo `protobuf:"bytes,1,rep,name=believers" json:"believers,omitempty"`
}

func (m *SetBelieversRet) Reset()                    { *m = SetBelieversRet{} }
func (m *SetBelieversRet) String() string            { return proto.CompactTextString(m) }
func (*SetBelieversRet) ProtoMessage()               {}
func (*SetBelieversRet) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{5} }

func (m *SetBelieversRet) GetBelievers() []*BelieverInfo {
	if m != nil {
		return m.Believers
	}
	return nil
}

func init() {
	proto.RegisterType((*AddAttach)(nil), "protocol.add_attach")
	proto.RegisterType((*AddAttachRet)(nil), "protocol.add_attach_ret")
	proto.RegisterType((*SetBuildings)(nil), "protocol.set_buildings")
	proto.RegisterType((*SetBuildingsRet)(nil), "protocol.set_buildings_ret")
	proto.RegisterType((*SetBelievers)(nil), "protocol.set_believers")
	proto.RegisterType((*SetBelieversRet)(nil), "protocol.set_believers_ret")
}
func (m *AddAttach) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAttach) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Faith != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Faith))
	}
	if m.Power != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Power))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Diamond))
	}
	if m.GayPoint != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.GayPoint))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Believers) > 0 {
		for _, msg := range m.Believers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddAttachRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAttachRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SetBuildings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBuildings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StarID))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *SetBuildingsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBuildingsRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA2 := make([]byte, len(m.Result)*10)
		var j1 int
		for _, num1 := range m.Result {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *SetBelievers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBelievers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *SetBelieversRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBelieversRet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Believers) > 0 {
		for _, msg := range m.Believers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddAttach) Size() (n int) {
	var l int
	_ = l
	if m.Faith != 0 {
		n += 1 + sovInternal(uint64(m.Faith))
	}
	if m.Power != 0 {
		n += 1 + sovInternal(uint64(m.Power))
	}
	if m.Diamond != 0 {
		n += 1 + sovInternal(uint64(m.Diamond))
	}
	if m.GayPoint != 0 {
		n += 1 + sovInternal(uint64(m.GayPoint))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	if len(m.Believers) > 0 {
		for _, e := range m.Believers {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *AddAttachRet) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *SetBuildings) Size() (n int) {
	var l int
	_ = l
	if m.StarID != 0 {
		n += 1 + sovInternal(uint64(m.StarID))
	}
	if m.Level != 0 {
		n += 1 + sovInternal(uint64(m.Level))
	}
	return n
}

func (m *SetBuildingsRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		l = 0
		for _, e := range m.Result {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *SetBelievers) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovInternal(uint64(m.Level))
	}
	return n
}

func (m *SetBelieversRet) Size() (n int) {
	var l int
	_ = l
	if len(m.Believers) > 0 {
		for _, e := range m.Believers {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func sovInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddAttach) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_attach: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_attach: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faith", wireType)
			}
			m.Faith = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faith |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GayPoint", wireType)
			}
			m.GayPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GayPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BagItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believers = append(m.Believers, &BelieverInfo{})
			if err := m.Believers[len(m.Believers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAttachRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: add_attach_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: add_attach_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBuildings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_buildings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_buildings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarID", wireType)
			}
			m.StarID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBuildingsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_buildings_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_buildings_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Result = append(m.Result, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Result = append(m.Result, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBelievers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_believers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_believers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBelieversRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: set_believers_ret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: set_believers_ret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Believers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Believers = append(m.Believers, &BelieverInfo{})
			if err := m.Believers[len(m.Believers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("internal.proto", fileDescriptorInternal) }

var fileDescriptorInternal = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4a, 0x3b, 0x31,
	0x10, 0xc6, 0xc9, 0xbf, 0xff, 0xad, 0xed, 0xa8, 0x05, 0x83, 0x68, 0x50, 0x28, 0x65, 0x41, 0x58,
	0x10, 0x7a, 0x50, 0x3c, 0x7a, 0x11, 0x2f, 0x7a, 0x92, 0x7d, 0x81, 0x65, 0xb6, 0x9b, 0x6e, 0x03,
	0xd9, 0xa4, 0x24, 0x69, 0xa5, 0x6f, 0xe8, 0xb1, 0x8f, 0x20, 0x7d, 0x12, 0x49, 0x36, 0x4b, 0x5b,
	0xbc, 0x78, 0x0a, 0xbf, 0x99, 0x2f, 0xdf, 0xcc, 0x7c, 0x30, 0x12, 0xca, 0x71, 0xa3, 0x50, 0x4e,
	0x97, 0x46, 0x3b, 0x4d, 0x07, 0xe1, 0x99, 0x69, 0x79, 0x33, 0x42, 0x9c, 0xe9, 0xa6, 0xd1, 0xaa,
	0xed, 0xa4, 0x5b, 0x02, 0x80, 0x55, 0x55, 0xa0, 0x73, 0x38, 0x5b, 0xd0, 0x4b, 0x48, 0xe6, 0x28,
	0xdc, 0x82, 0x91, 0x09, 0xc9, 0x92, 0xbc, 0x05, 0x5f, 0x5d, 0xea, 0x4f, 0x6e, 0xd8, 0xbf, 0xb6,
	0x1a, 0x80, 0x32, 0x38, 0xa9, 0x04, 0x36, 0x5a, 0x55, 0xac, 0x17, 0xea, 0x1d, 0xd2, 0x5b, 0x18,
	0xd6, 0xb8, 0x29, 0x96, 0x5a, 0x28, 0xc7, 0xfe, 0x87, 0xde, 0xa0, 0xc6, 0xcd, 0x87, 0x67, 0x9a,
	0x41, 0x22, 0x1c, 0x6f, 0x2c, 0x4b, 0x26, 0xbd, 0xec, 0xf4, 0x81, 0x4e, 0xbb, 0xdd, 0xa6, 0x25,
	0xd6, 0x85, 0x6f, 0xe5, 0xad, 0x80, 0x3e, 0xc1, 0xb0, 0xe4, 0x52, 0xf0, 0x35, 0x37, 0x96, 0xf5,
	0x83, 0xfa, 0xfa, 0x40, 0x1d, 0x5b, 0x85, 0x50, 0x73, 0x9d, 0xef, 0x95, 0x69, 0x06, 0xa3, 0xfd,
	0x45, 0x85, 0xe1, 0x8e, 0x5e, 0x41, 0xdf, 0x70, 0xbb, 0x92, 0x2e, 0x9c, 0x35, 0xc8, 0x23, 0xa5,
	0xcf, 0x70, 0x6e, 0xb9, 0x2b, 0xca, 0x95, 0x90, 0x95, 0x50, 0xb5, 0xf5, 0x42, 0xeb, 0xd0, 0xbc,
	0xbd, 0xc6, 0xfb, 0x23, 0xf9, 0x00, 0x24, 0x5f, 0x73, 0xd9, 0x05, 0x10, 0x20, 0xbd, 0x87, 0x8b,
	0xa3, 0xef, 0xbf, 0x66, 0xf5, 0xbc, 0x45, 0x9c, 0x75, 0x17, 0x67, 0x75, 0x6b, 0xee, 0x3d, 0xc9,
	0xa1, 0xe7, 0x7b, 0xf4, 0xec, 0x64, 0xc1, 0xf3, 0x28, 0x08, 0xf2, 0xd7, 0x20, 0x5e, 0xce, 0xbe,
	0x76, 0x63, 0xb2, 0xdd, 0x8d, 0xc9, 0xf7, 0x6e, 0x4c, 0xca, 0x7e, 0xf8, 0xf0, 0xf8, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xe3, 0xe7, 0x94, 0x35, 0x1c, 0x02, 0x00, 0x00,
}
